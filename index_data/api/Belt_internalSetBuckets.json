{
  "name": "Belt_internalSetBuckets",
  "docstrings": [],
  "items": [
    {
      "id": "Belt_internalSetBuckets.Belt_internalBucketsType",
      "kind": "moduleAlias",
      "docstrings": [],
      "signature": "module C = Belt_internalBucketsType"
    },
    {
      "id": "Belt_internalSetBuckets.bucket",
      "kind": "type",
      "name": "bucket",
      "signature": "type bucket<'a> = {\\n  mutable key: 'a,\\n  mutable next: C.opt<bucket<'a>>,\\n}",
      "docstrings": [],
      "detail": {
        "kind": "record",
        "fieldDocs": [
          {
            "fieldName": "key",
            "docstrings": [],
            "signature": "'a"
          },
          {
            "fieldName": "next",
            "docstrings": [],
            "signature": "C.opt<bucket<'a>>"
          }
        ]
      }
    },
    {
      "id": "Belt_internalSetBuckets.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'hash, 'eq, 'a> = C.container<'hash, 'eq, bucket<'a>>",
      "docstrings": [],
      "detail": {
        "kind": "record",
        "fieldDocs": [
          {
            "fieldName": "size",
            "docstrings": [],
            "signature": "int"
          },
          {
            "fieldName": "buckets",
            "docstrings": [],
            "signature": "array<opt<'c>>"
          },
          {
            "fieldName": "hash",
            "docstrings": [],
            "signature": "'hash"
          },
          {
            "fieldName": "eq",
            "docstrings": [],
            "signature": "'eq"
          }
        ]
      }
    },
    {
      "id": "Belt_internalSetBuckets.copy",
      "kind": "value",
      "name": "copy",
      "signature": "let copy: t<'hash, 'eq, 'a> => t<'hash, 'eq, 'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetBuckets.forEachU",
      "kind": "value",
      "name": "forEachU",
      "signature": "let forEachU: (t<'hash, 'eq, 'a>, (. 'a) => unit) => unit",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetBuckets.forEach",
      "kind": "value",
      "name": "forEach",
      "signature": "let forEach: (t<'hash, 'eq, 'a>, 'a => unit) => unit",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetBuckets.fillArray",
      "kind": "value",
      "name": "fillArray",
      "signature": "let fillArray: (int, array<'a>, bucket<'a>) => int",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetBuckets.toArray",
      "kind": "value",
      "name": "toArray",
      "signature": "let toArray: t<'a, 'b, 'a0> => array<'a0>",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetBuckets.reduceU",
      "kind": "value",
      "name": "reduceU",
      "signature": "let reduceU: (t<'a, 'b, 'a0>, 'b0, (. 'b0, 'a0) => 'b0) => 'b0",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetBuckets.reduce",
      "kind": "value",
      "name": "reduce",
      "signature": "let reduce: (t<'a, 'b, 'a0>, 'b0, ('b0, 'a0) => 'b0) => 'b0",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetBuckets.logStats",
      "kind": "value",
      "name": "logStats",
      "signature": "let logStats: t<'a, 'b, 'c> => unit",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetBuckets.getBucketHistogram",
      "kind": "value",
      "name": "getBucketHistogram",
      "signature": "let getBucketHistogram: t<'a, 'b, 'c> => array<int>",
      "docstrings": []
    }
  ]
}