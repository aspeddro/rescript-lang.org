{
  "name": "Random",
  "docstrings": [],
  "items": [
    {
      "id": "Random.init",
      "kind": "value",
      "name": "init",
      "signature": "let init: int => unit",
      "docstrings": [
        "Initialize the generator, using the argument as a seed.\n     The same seed will always yield the same sequence of numbers."
      ]
    },
    {
      "id": "Random.full_init",
      "kind": "value",
      "name": "full_init",
      "signature": "let full_init: array<int> => unit",
      "docstrings": [
        "Same as {!Random.init} but takes more data as seed."
      ]
    },
    {
      "id": "Random.self_init",
      "kind": "value",
      "name": "self_init",
      "signature": "let self_init: unit => unit",
      "docstrings": [
        "Initialize the generator with a random seed chosen\n   in a system-dependent way.  If [/dev/urandom] is available on\n   the host machine, it is used to provide a highly random initial\n   seed.  Otherwise, a less random seed is computed from system\n   parameters (current time, process IDs)."
      ]
    },
    {
      "id": "Random.bits",
      "kind": "value",
      "name": "bits",
      "signature": "let bits: unit => int",
      "docstrings": [
        "Return 30 random bits in a nonnegative integer.\n    @before 3.12.0 used a different algorithm (affects all the following\n                   functions)"
      ]
    },
    {
      "id": "Random.int",
      "kind": "value",
      "name": "int",
      "signature": "let int: int => int",
      "docstrings": [
        "[Random.int bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0 and less\n     than 2{^30}."
      ]
    },
    {
      "id": "Random.int32",
      "kind": "value",
      "name": "int32",
      "signature": "let int32: Int32.t => Int32.t",
      "docstrings": [
        "[Random.int32 bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0."
      ]
    },
    {
      "id": "Random.int64",
      "kind": "value",
      "name": "int64",
      "signature": "let int64: Int64.t => Int64.t",
      "docstrings": [
        "[Random.int64 bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0."
      ]
    },
    {
      "id": "Random.float",
      "kind": "value",
      "name": "float",
      "signature": "let float: float => float",
      "docstrings": [
        "[Random.float bound] returns a random floating-point number\n   between 0 and [bound] (inclusive).  If [bound] is\n   negative, the result is negative or zero.  If [bound] is 0,\n   the result is 0."
      ]
    },
    {
      "id": "Random.bool",
      "kind": "value",
      "name": "bool",
      "signature": "let bool: unit => bool",
      "docstrings": [
        "[Random.bool ()] returns [true] or [false] with probability 0.5 each."
      ]
    },
    {
      "id": "State.Random",
      "kind": "module",
      "item": {
        "name": "State",
        "docstrings": [],
        "items": [
          {
            "id": "Random.State.t",
            "kind": "type",
            "name": "t",
            "signature": "type t",
            "docstrings": [
              "The type of PRNG states."
            ]
          },
          {
            "id": "Random.State.make",
            "kind": "value",
            "name": "make",
            "signature": "let make: array<int> => t",
            "docstrings": [
              "Create a new state and initialize it with the given seed."
            ]
          },
          {
            "id": "Random.State.make_self_init",
            "kind": "value",
            "name": "make_self_init",
            "signature": "let make_self_init: unit => t",
            "docstrings": [
              "Create a new state and initialize it with a system-dependent\n      low-entropy seed."
            ]
          },
          {
            "id": "Random.State.copy",
            "kind": "value",
            "name": "copy",
            "signature": "let copy: t => t",
            "docstrings": [
              "Return a copy of the given state."
            ]
          },
          {
            "id": "Random.State.bits",
            "kind": "value",
            "name": "bits",
            "signature": "let bits: t => int",
            "docstrings": []
          },
          {
            "id": "Random.State.int",
            "kind": "value",
            "name": "int",
            "signature": "let int: (t, int) => int",
            "docstrings": []
          },
          {
            "id": "Random.State.int32",
            "kind": "value",
            "name": "int32",
            "signature": "let int32: (t, Int32.t) => Int32.t",
            "docstrings": []
          },
          {
            "id": "Random.State.int64",
            "kind": "value",
            "name": "int64",
            "signature": "let int64: (t, Int64.t) => Int64.t",
            "docstrings": []
          },
          {
            "id": "Random.State.float",
            "kind": "value",
            "name": "float",
            "signature": "let float: (t, float) => float",
            "docstrings": []
          },
          {
            "id": "Random.State.bool",
            "kind": "value",
            "name": "bool",
            "signature": "let bool: t => bool",
            "docstrings": [
              "These functions are the same as the basic functions, except that they\n      use (and update) the given PRNG state instead of the default one."
            ]
          }
        ]
      }
    },
    {
      "id": "Random.get_state",
      "kind": "value",
      "name": "get_state",
      "signature": "let get_state: unit => State.t",
      "docstrings": [
        "Return the current state of the generator used by the basic functions."
      ]
    },
    {
      "id": "Random.set_state",
      "kind": "value",
      "name": "set_state",
      "signature": "let set_state: State.t => unit",
      "docstrings": [
        "Set the state of the generator used by the basic functions."
      ]
    }
  ]
}