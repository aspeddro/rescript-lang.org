{
  "name": "Belt_internalAVLset",
  "docstrings": [],
  "items": [
    {
      "id": "Belt_internalAVLset.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'value> = option<node<'value>>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.node",
      "kind": "type",
      "name": "node",
      "signature": "type node<'value> = {\\n  mutable value: 'value,\\n  mutable height: int,\\n  mutable left: t<'value>,\\n  mutable right: t<'value>,\\n}",
      "docstrings": [],
      "detail": {
        "kind": "record",
        "fieldDocs": [
          {
            "fieldName": "value",
            "docstrings": [],
            "signature": "'value"
          },
          {
            "fieldName": "height",
            "docstrings": [],
            "signature": "int"
          },
          {
            "fieldName": "left",
            "docstrings": [],
            "signature": "t<'value>"
          },
          {
            "fieldName": "right",
            "docstrings": [],
            "signature": "t<'value>"
          }
        ]
      }
    },
    {
      "id": "Belt_internalAVLset.cmp",
      "kind": "type",
      "name": "cmp",
      "signature": "type cmp<'a, 'b> = Belt_Id.cmp<'a, 'b>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.copy",
      "kind": "value",
      "name": "copy",
      "signature": "let copy: t<'a> => t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.create",
      "kind": "value",
      "name": "create",
      "signature": "let create: (t<'a>, 'a, t<'a>) => t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.bal",
      "kind": "value",
      "name": "bal",
      "signature": "let bal: (t<'a>, 'a, t<'a>) => t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.singleton",
      "kind": "value",
      "name": "singleton",
      "signature": "let singleton: 'a => t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.minimum",
      "kind": "value",
      "name": "minimum",
      "signature": "let minimum: t<'a> => option<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.minUndefined",
      "kind": "value",
      "name": "minUndefined",
      "signature": "let minUndefined: t<'a> => Js.undefined<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.maximum",
      "kind": "value",
      "name": "maximum",
      "signature": "let maximum: t<'a> => option<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.maxUndefined",
      "kind": "value",
      "name": "maxUndefined",
      "signature": "let maxUndefined: t<'a> => Js.undefined<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.removeMinAuxWithRef",
      "kind": "value",
      "name": "removeMinAuxWithRef",
      "signature": "let removeMinAuxWithRef: (node<'a>, Belt_internals.ref<'a>) => t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.isEmpty",
      "kind": "value",
      "name": "isEmpty",
      "signature": "let isEmpty: t<'a> => bool",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.stackAllLeft",
      "kind": "value",
      "name": "stackAllLeft",
      "signature": "let stackAllLeft: (t<'a>, list<node<'a>>) => list<node<'a>>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.forEachU",
      "kind": "value",
      "name": "forEachU",
      "signature": "let forEachU: (t<'a>, (. 'a) => unit) => unit",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.forEach",
      "kind": "value",
      "name": "forEach",
      "signature": "let forEach: (t<'a>, 'a => unit) => unit",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.reduceU",
      "kind": "value",
      "name": "reduceU",
      "signature": "let reduceU: (t<'a>, 'b, (. 'b, 'a) => 'b) => 'b",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.reduce",
      "kind": "value",
      "name": "reduce",
      "signature": "let reduce: (t<'a>, 'b, ('b, 'a) => 'b) => 'b",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.everyU",
      "kind": "value",
      "name": "everyU",
      "signature": "let everyU: (t<'a>, (. 'a) => bool) => bool",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.every",
      "kind": "value",
      "name": "every",
      "signature": "let every: (t<'a>, 'a => bool) => bool",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.someU",
      "kind": "value",
      "name": "someU",
      "signature": "let someU: (t<'a>, (. 'a) => bool) => bool",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.some",
      "kind": "value",
      "name": "some",
      "signature": "let some: (t<'a>, 'a => bool) => bool",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.joinShared",
      "kind": "value",
      "name": "joinShared",
      "signature": "let joinShared: (t<'a>, 'a, t<'a>) => t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.concatShared",
      "kind": "value",
      "name": "concatShared",
      "signature": "let concatShared: (t<'a>, t<'a>) => t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.keepSharedU",
      "kind": "value",
      "name": "keepSharedU",
      "signature": "let keepSharedU: (t<'a>, (. 'a) => bool) => t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.keepShared",
      "kind": "value",
      "name": "keepShared",
      "signature": "let keepShared: (t<'a>, 'a => bool) => t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.keepCopyU",
      "kind": "value",
      "name": "keepCopyU",
      "signature": "let keepCopyU: (t<'a>, (. 'a) => bool) => t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.keepCopy",
      "kind": "value",
      "name": "keepCopy",
      "signature": "let keepCopy: (t<'a>, 'a => bool) => t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.partitionSharedU",
      "kind": "value",
      "name": "partitionSharedU",
      "signature": "let partitionSharedU: (t<'a>, (. 'a) => bool) => (t<'a>, t<'a>)",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.partitionShared",
      "kind": "value",
      "name": "partitionShared",
      "signature": "let partitionShared: (t<'a>, 'a => bool) => (t<'a>, t<'a>)",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.partitionCopyU",
      "kind": "value",
      "name": "partitionCopyU",
      "signature": "let partitionCopyU: (t<'a>, (. 'a) => bool) => (t<'a>, t<'a>)",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.partitionCopy",
      "kind": "value",
      "name": "partitionCopy",
      "signature": "let partitionCopy: (t<'a>, 'a => bool) => (t<'a>, t<'a>)",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.lengthNode",
      "kind": "value",
      "name": "lengthNode",
      "signature": "let lengthNode: node<'a> => int",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.size",
      "kind": "value",
      "name": "size",
      "signature": "let size: t<'a> => int",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.toList",
      "kind": "value",
      "name": "toList",
      "signature": "let toList: t<'a> => list<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.checkInvariantInternal",
      "kind": "value",
      "name": "checkInvariantInternal",
      "signature": "let checkInvariantInternal: t<'a> => unit",
      "docstrings": [
        "**raise** when invariant is not held"
      ]
    },
    {
      "id": "Belt_internalAVLset.fillArray",
      "kind": "value",
      "name": "fillArray",
      "signature": "let fillArray: (node<'a>, int, array<'a>) => int",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.toArray",
      "kind": "value",
      "name": "toArray",
      "signature": "let toArray: t<'a> => array<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.fromSortedArrayAux",
      "kind": "value",
      "name": "fromSortedArrayAux",
      "signature": "let fromSortedArrayAux: (array<'a>, int, int) => t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.fromSortedArrayRevAux",
      "kind": "value",
      "name": "fromSortedArrayRevAux",
      "signature": "let fromSortedArrayRevAux: (array<'a>, int, int) => t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.fromSortedArrayUnsafe",
      "kind": "value",
      "name": "fromSortedArrayUnsafe",
      "signature": "let fromSortedArrayUnsafe: array<'a> => t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.has",
      "kind": "value",
      "name": "has",
      "signature": "let has: (t<'a>, 'a, ~cmp: cmp<'a, 'b>) => bool",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.cmp",
      "kind": "value",
      "name": "cmp",
      "signature": "let cmp: (t<'a>, t<'a>, ~cmp: cmp<'a, 'b>) => int",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.eq",
      "kind": "value",
      "name": "eq",
      "signature": "let eq: (t<'a>, t<'a>, ~cmp: cmp<'a, 'b>) => bool",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.subset",
      "kind": "value",
      "name": "subset",
      "signature": "let subset: (t<'a>, t<'a>, ~cmp: cmp<'a, 'b>) => bool",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.get",
      "kind": "value",
      "name": "get",
      "signature": "let get: (t<'a>, 'a, ~cmp: cmp<'a, 'b>) => option<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.getUndefined",
      "kind": "value",
      "name": "getUndefined",
      "signature": "let getUndefined: (t<'a>, 'a, ~cmp: cmp<'a, 'b>) => Js.undefined<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.getExn",
      "kind": "value",
      "name": "getExn",
      "signature": "let getExn: (t<'a>, 'a, ~cmp: cmp<'a, 'b>) => 'a",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.fromArray",
      "kind": "value",
      "name": "fromArray",
      "signature": "let fromArray: (array<'a>, ~cmp: cmp<'a, 'b>) => t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.addMutate",
      "kind": "value",
      "name": "addMutate",
      "signature": "let addMutate: (~cmp: cmp<'a, 'b>, t<'a>, 'a) => t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.balMutate",
      "kind": "value",
      "name": "balMutate",
      "signature": "let balMutate: node<'a> => node<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_internalAVLset.removeMinAuxWithRootMutate",
      "kind": "value",
      "name": "removeMinAuxWithRootMutate",
      "signature": "let removeMinAuxWithRootMutate: (node<'a>, node<'a>) => t<'a>",
      "docstrings": [
        "`removeMinAuxWithRootMutate root n`\n   remove the minimum of n in place and store its value in the `key root`"
      ]
    }
  ]
}