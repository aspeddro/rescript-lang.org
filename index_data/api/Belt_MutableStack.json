{
  "name": "Belt_MutableStack",
  "docstrings": [
    "First in last out stack. This module implements stacks, with in-place\nmodification."
  ],
  "items": [
    {
      "id": "Belt_MutableStack.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_MutableStack.make",
      "kind": "value",
      "name": "make",
      "signature": "let make: unit => t<'a>",
      "docstrings": [
        "Returns a new stack, initially empty."
      ]
    },
    {
      "id": "Belt_MutableStack.clear",
      "kind": "value",
      "name": "clear",
      "signature": "let clear: t<'a> => unit",
      "docstrings": [
        "Discard all elements from the stack."
      ]
    },
    {
      "id": "Belt_MutableStack.copy",
      "kind": "value",
      "name": "copy",
      "signature": "let copy: t<'a> => t<'a>",
      "docstrings": [
        "`copy(x)` O(1) operation, return a new stack."
      ]
    },
    {
      "id": "Belt_MutableStack.push",
      "kind": "value",
      "name": "push",
      "signature": "let push: (t<'a>, 'a) => unit",
      "docstrings": []
    },
    {
      "id": "Belt_MutableStack.popUndefined",
      "kind": "value",
      "name": "popUndefined",
      "signature": "let popUndefined: t<'a> => Js.undefined<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_MutableStack.pop",
      "kind": "value",
      "name": "pop",
      "signature": "let pop: t<'a> => option<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_MutableStack.topUndefined",
      "kind": "value",
      "name": "topUndefined",
      "signature": "let topUndefined: t<'a> => Js.undefined<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_MutableStack.top",
      "kind": "value",
      "name": "top",
      "signature": "let top: t<'a> => option<'a>",
      "docstrings": []
    },
    {
      "id": "Belt_MutableStack.isEmpty",
      "kind": "value",
      "name": "isEmpty",
      "signature": "let isEmpty: t<'a> => bool",
      "docstrings": []
    },
    {
      "id": "Belt_MutableStack.size",
      "kind": "value",
      "name": "size",
      "signature": "let size: t<'a> => int",
      "docstrings": []
    },
    {
      "id": "Belt_MutableStack.forEachU",
      "kind": "value",
      "name": "forEachU",
      "signature": "let forEachU: (t<'a>, (. 'a) => unit) => unit",
      "docstrings": []
    },
    {
      "id": "Belt_MutableStack.forEach",
      "kind": "value",
      "name": "forEach",
      "signature": "let forEach: (t<'a>, 'a => unit) => unit",
      "docstrings": []
    },
    {
      "id": "Belt_MutableStack.dynamicPopIterU",
      "kind": "value",
      "name": "dynamicPopIterU",
      "signature": "let dynamicPopIterU: (t<'a>, (. 'a) => unit) => unit",
      "docstrings": []
    },
    {
      "id": "Belt_MutableStack.dynamicPopIter",
      "kind": "value",
      "name": "dynamicPopIter",
      "signature": "let dynamicPopIter: (t<'a>, 'a => unit) => unit",
      "docstrings": [
        "`dynamicPopIter(s, f)` apply `f` to each element of `s`. The item is poped\n  before applying `f`, `s` will be empty after this opeartion. This function is\n  useful for worklist algorithm."
      ]
    }
  ]
}