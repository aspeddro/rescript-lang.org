{
  "name": "Complex",
  "docstrings": [],
  "items": [
    {
      "id": "Complex.t",
      "kind": "type",
      "name": "t",
      "signature": "type t = {re: float, im: float}",
      "docstrings": [
        "The type of complex numbers.  [re] is the real part and [im] the\n    imaginary part."
      ],
      "detail": {
        "kind": "record",
        "fieldDocs": [
          {
            "fieldName": "re",
            "docstrings": [],
            "signature": "float"
          },
          {
            "fieldName": "im",
            "docstrings": [],
            "signature": "float"
          }
        ]
      }
    },
    {
      "id": "Complex.zero",
      "kind": "value",
      "name": "zero",
      "signature": "let zero: t",
      "docstrings": [
        "The complex number [0]."
      ]
    },
    {
      "id": "Complex.one",
      "kind": "value",
      "name": "one",
      "signature": "let one: t",
      "docstrings": [
        "The complex number [1]."
      ]
    },
    {
      "id": "Complex.i",
      "kind": "value",
      "name": "i",
      "signature": "let i: t",
      "docstrings": [
        "The complex number [i]."
      ]
    },
    {
      "id": "Complex.neg",
      "kind": "value",
      "name": "neg",
      "signature": "let neg: t => t",
      "docstrings": [
        "Unary negation."
      ]
    },
    {
      "id": "Complex.conj",
      "kind": "value",
      "name": "conj",
      "signature": "let conj: t => t",
      "docstrings": [
        "Conjugate: given the complex [x + i.y], returns [x - i.y]."
      ]
    },
    {
      "id": "Complex.add",
      "kind": "value",
      "name": "add",
      "signature": "let add: (t, t) => t",
      "docstrings": [
        "Addition"
      ]
    },
    {
      "id": "Complex.sub",
      "kind": "value",
      "name": "sub",
      "signature": "let sub: (t, t) => t",
      "docstrings": [
        "Subtraction"
      ]
    },
    {
      "id": "Complex.mul",
      "kind": "value",
      "name": "mul",
      "signature": "let mul: (t, t) => t",
      "docstrings": [
        "Multiplication"
      ]
    },
    {
      "id": "Complex.inv",
      "kind": "value",
      "name": "inv",
      "signature": "let inv: t => t",
      "docstrings": [
        "Multiplicative inverse ([1/z])."
      ]
    },
    {
      "id": "Complex.div",
      "kind": "value",
      "name": "div",
      "signature": "let div: (t, t) => t",
      "docstrings": [
        "Division"
      ]
    },
    {
      "id": "Complex.sqrt",
      "kind": "value",
      "name": "sqrt",
      "signature": "let sqrt: t => t",
      "docstrings": [
        "Square root.  The result [x + i.y] is such that [x > 0] or\n    [x = 0] and [y >= 0].\n    This function has a discontinuity along the negative real axis."
      ]
    },
    {
      "id": "Complex.norm2",
      "kind": "value",
      "name": "norm2",
      "signature": "let norm2: t => float",
      "docstrings": [
        "Norm squared: given [x + i.y], returns [x^2 + y^2]."
      ]
    },
    {
      "id": "Complex.norm",
      "kind": "value",
      "name": "norm",
      "signature": "let norm: t => float",
      "docstrings": [
        "Norm: given [x + i.y], returns [sqrt(x^2 + y^2)]."
      ]
    },
    {
      "id": "Complex.arg",
      "kind": "value",
      "name": "arg",
      "signature": "let arg: t => float",
      "docstrings": [
        "Argument.  The argument of a complex number is the angle\n    in the complex plane between the positive real axis and a line\n    passing through zero and the number.  This angle ranges from\n    [-pi] to [pi].  This function has a discontinuity along the\n    negative real axis."
      ]
    },
    {
      "id": "Complex.polar",
      "kind": "value",
      "name": "polar",
      "signature": "let polar: (float, float) => t",
      "docstrings": [
        "[polar norm arg] returns the complex having norm [norm]\n    and argument [arg]."
      ]
    },
    {
      "id": "Complex.exp",
      "kind": "value",
      "name": "exp",
      "signature": "let exp: t => t",
      "docstrings": [
        "Exponentiation.  [exp z] returns [e] to the [z] power."
      ]
    },
    {
      "id": "Complex.log",
      "kind": "value",
      "name": "log",
      "signature": "let log: t => t",
      "docstrings": [
        "Natural logarithm (in base [e])."
      ]
    },
    {
      "id": "Complex.pow",
      "kind": "value",
      "name": "pow",
      "signature": "let pow: (t, t) => t",
      "docstrings": [
        "Power function.  [pow z1 z2] returns [z1] to the [z2] power."
      ]
    }
  ]
}