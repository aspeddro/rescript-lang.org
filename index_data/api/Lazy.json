{
  "name": "Lazy",
  "docstrings": [],
  "items": [
    {
      "id": "Lazy.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a> = lazy_t<'a>",
      "docstrings": [
        "A value of type ['a Lazy.t] is a deferred computation, called\n   a suspension, that has a result of type ['a].  The special\n   expression syntax [lazy (expr)] makes a suspension of the\n   computation of [expr], without computing [expr] itself yet.\n   \"Forcing\" the suspension will then compute [expr] and return its\n   result.\n\n   Note: [lazy_t] is the built-in type constructor used by the compiler\n   for the [lazy] keyword.  You should not use it directly.  Always use\n   [Lazy.t] instead.\n\n   Note: [Lazy.force] is not thread-safe.  If you use this module in\n   a multi-threaded program, you will need to add some locks.\n\n   Note: if the program is compiled with the [-rectypes] option,\n   ill-founded recursive definitions of the form [let rec x = lazy x]\n   or [let rec x = lazy(lazy(...(lazy x)))] are accepted by the type-checker\n   and lead, when forced, to ill-formed values that trigger infinite\n   loops in the garbage collector and other parts of the run-time system.\n   Without the [-rectypes] option, such ill-founded recursive definitions\n   are rejected by the type-checker."
      ]
    },
    {
      "id": "Lazy.force",
      "kind": "value",
      "name": "force",
      "signature": "let force: t<'a> => 'a",
      "docstrings": [
        "[force x] forces the suspension [x] and returns its result.\n   If [x] has already been forced, [Lazy.force x] returns the\n   same value again without recomputing it.  If it raised an exception,\n   the same exception is raised again.\n   Raise {!Undefined} if the forcing of [x] tries to force [x] itself\n   recursively."
      ]
    },
    {
      "id": "Lazy.force_val",
      "kind": "value",
      "name": "force_val",
      "signature": "let force_val: t<'a> => 'a",
      "docstrings": [
        "[force_val x] forces the suspension [x] and returns its\n    result.  If [x] has already been forced, [force_val x]\n    returns the same value again without recomputing it.\n    Raise {!Undefined} if the forcing of [x] tries to force [x] itself\n    recursively.\n    If the computation of [x] raises an exception, it is unspecified\n    whether [force_val x] raises the same exception or {!Undefined}."
      ]
    },
    {
      "id": "Lazy.from_fun",
      "kind": "value",
      "name": "from_fun",
      "signature": "let from_fun: (unit => 'a) => t<'a>",
      "docstrings": [
        "[from_fun f] is the same as [lazy (f ())] but slightly more efficient.\n\n    [from_fun] should only be used if the function [f] is already defined.\n    In particular it is always less efficient to write\n    [from_fun (fun () -> expr)] than [lazy expr].\n\n    @since 4.00.0"
      ]
    },
    {
      "id": "Lazy.from_val",
      "kind": "value",
      "name": "from_val",
      "signature": "let from_val: 'a => t<'a>",
      "docstrings": [
        "[from_val v] returns an already-forced suspension of [v].\n    This is for special purposes only and should not be confused with\n    [lazy (v)].\n    @since 4.00.0"
      ]
    },
    {
      "id": "Lazy.is_val",
      "kind": "value",
      "name": "is_val",
      "signature": "let is_val: t<'a> => bool",
      "docstrings": [
        "[is_val x] returns [true] if [x] has already been forced and\n    did not raise an exception.\n    @since 4.00.0"
      ]
    },
    {
      "id": "Lazy.lazy_from_fun",
      "kind": "value",
      "name": "lazy_from_fun",
      "signature": "let lazy_from_fun: (unit => 'a) => t<'a>",
      "docstrings": [
        "@deprecated synonym for [from_fun]."
      ]
    },
    {
      "id": "Lazy.lazy_from_val",
      "kind": "value",
      "name": "lazy_from_val",
      "signature": "let lazy_from_val: 'a => t<'a>",
      "docstrings": [
        "@deprecated synonym for [from_val]."
      ]
    },
    {
      "id": "Lazy.lazy_is_val",
      "kind": "value",
      "name": "lazy_is_val",
      "signature": "let lazy_is_val: t<'a> => bool",
      "docstrings": [
        "@deprecated synonym for [is_val]."
      ]
    }
  ]
}