{
  "name": "MoreLabels",
  "docstrings": [],
  "items": [
    {
      "id": "Hashtbl.MoreLabels",
      "kind": "module",
      "item": {
        "name": "Hashtbl",
        "docstrings": [],
        "items": [
          {
            "id": "MoreLabels.Hashtbl.t",
            "kind": "type",
            "name": "t",
            "signature": "type t<'a, 'b> = Hashtbl.t<'a, 'b>",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.create",
            "kind": "value",
            "name": "create",
            "signature": "let create: (~random: bool=?, int) => t<'a, 'b>",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.clear",
            "kind": "value",
            "name": "clear",
            "signature": "let clear: t<'a, 'b> => unit",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.reset",
            "kind": "value",
            "name": "reset",
            "signature": "let reset: t<'a, 'b> => unit",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.copy",
            "kind": "value",
            "name": "copy",
            "signature": "let copy: t<'a, 'b> => t<'a, 'b>",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.add",
            "kind": "value",
            "name": "add",
            "signature": "let add: (t<'a, 'b>, ~key: 'a, ~data: 'b) => unit",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.find",
            "kind": "value",
            "name": "find",
            "signature": "let find: (t<'a, 'b>, 'a) => 'b",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.find_opt",
            "kind": "value",
            "name": "find_opt",
            "signature": "let find_opt: (t<'a, 'b>, 'a) => option<'b>",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.find_all",
            "kind": "value",
            "name": "find_all",
            "signature": "let find_all: (t<'a, 'b>, 'a) => list<'b>",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.mem",
            "kind": "value",
            "name": "mem",
            "signature": "let mem: (t<'a, 'b>, 'a) => bool",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.remove",
            "kind": "value",
            "name": "remove",
            "signature": "let remove: (t<'a, 'b>, 'a) => unit",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.replace",
            "kind": "value",
            "name": "replace",
            "signature": "let replace: (t<'a, 'b>, ~key: 'a, ~data: 'b) => unit",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.iter",
            "kind": "value",
            "name": "iter",
            "signature": "let iter: (~f: (~key: 'a, ~data: 'b) => unit, t<'a, 'b>) => unit",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.filter_map_inplace",
            "kind": "value",
            "name": "filter_map_inplace",
            "signature": "let filter_map_inplace: (~f: (~key: 'a, ~data: 'b) => option<'b>, t<'a, 'b>) => unit",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.fold",
            "kind": "value",
            "name": "fold",
            "signature": "let fold: (~f: (~key: 'a, ~data: 'b, 'c) => 'c, t<'a, 'b>, ~init: 'c) => 'c",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.length",
            "kind": "value",
            "name": "length",
            "signature": "let length: t<'a, 'b> => int",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.randomize",
            "kind": "value",
            "name": "randomize",
            "signature": "let randomize: unit => unit",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.is_randomized",
            "kind": "value",
            "name": "is_randomized",
            "signature": "let is_randomized: unit => bool",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.statistics",
            "kind": "type",
            "name": "statistics",
            "signature": "type statistics = Hashtbl.statistics",
            "docstrings": [],
            "detail": {
              "kind": "record",
              "fieldDocs": [
                {
                  "fieldName": "num_bindings",
                  "docstrings": [
                    "Number of bindings present in the table.\n        Same value as returned by {!Hashtbl.length}."
                  ],
                  "signature": "int"
                },
                {
                  "fieldName": "num_buckets",
                  "docstrings": [
                    "Number of buckets in the table."
                  ],
                  "signature": "int"
                },
                {
                  "fieldName": "max_bucket_length",
                  "docstrings": [
                    "Maximal number of bindings per bucket."
                  ],
                  "signature": "int"
                },
                {
                  "fieldName": "bucket_histogram",
                  "docstrings": [
                    "Histogram of bucket sizes.  This array [histo] has\n        length [max_bucket_length + 1].  The value of\n        [histo.(i)] is the number of buckets whose size is [i]."
                  ],
                  "signature": "array<int>"
                }
              ]
            }
          },
          {
            "id": "MoreLabels.Hashtbl.stats",
            "kind": "value",
            "name": "stats",
            "signature": "let stats: t<'a, 'b> => statistics",
            "docstrings": []
          },
          {
            "id": "Make.Hashtbl.MoreLabels",
            "kind": "module",
            "item": {
              "name": "Make",
              "docstrings": [],
              "items": [
                {
                  "id": "MoreLabels.Hashtbl.Make.key",
                  "kind": "type",
                  "name": "key",
                  "signature": "type key = H.t",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.t",
                  "kind": "type",
                  "name": "t",
                  "signature": "type t<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.create",
                  "kind": "value",
                  "name": "create",
                  "signature": "let create: int => t<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.clear",
                  "kind": "value",
                  "name": "clear",
                  "signature": "let clear: t<'a> => unit",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.reset",
                  "kind": "value",
                  "name": "reset",
                  "signature": "let reset: t<'a> => unit",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.copy",
                  "kind": "value",
                  "name": "copy",
                  "signature": "let copy: t<'a> => t<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.add",
                  "kind": "value",
                  "name": "add",
                  "signature": "let add: (t<'a>, ~key: key, ~data: 'a) => unit",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.remove",
                  "kind": "value",
                  "name": "remove",
                  "signature": "let remove: (t<'a>, key) => unit",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.find",
                  "kind": "value",
                  "name": "find",
                  "signature": "let find: (t<'a>, key) => 'a",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.find_opt",
                  "kind": "value",
                  "name": "find_opt",
                  "signature": "let find_opt: (t<'a>, key) => option<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.find_all",
                  "kind": "value",
                  "name": "find_all",
                  "signature": "let find_all: (t<'a>, key) => list<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.replace",
                  "kind": "value",
                  "name": "replace",
                  "signature": "let replace: (t<'a>, ~key: key, ~data: 'a) => unit",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.mem",
                  "kind": "value",
                  "name": "mem",
                  "signature": "let mem: (t<'a>, key) => bool",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.iter",
                  "kind": "value",
                  "name": "iter",
                  "signature": "let iter: (~f: (~key: key, ~data: 'a) => unit, t<'a>) => unit",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.filter_map_inplace",
                  "kind": "value",
                  "name": "filter_map_inplace",
                  "signature": "let filter_map_inplace: (~f: (~key: key, ~data: 'a) => option<'a>, t<'a>) => unit",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.fold",
                  "kind": "value",
                  "name": "fold",
                  "signature": "let fold: (~f: (~key: key, ~data: 'a, 'b) => 'b, t<'a>, ~init: 'b) => 'b",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.length",
                  "kind": "value",
                  "name": "length",
                  "signature": "let length: t<'a> => int",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.Make.stats",
                  "kind": "value",
                  "name": "stats",
                  "signature": "let stats: t<'a> => statistics",
                  "docstrings": []
                }
              ]
            }
          },
          {
            "id": "MakeSeeded.Hashtbl.MoreLabels",
            "kind": "module",
            "item": {
              "name": "MakeSeeded",
              "docstrings": [],
              "items": [
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.key",
                  "kind": "type",
                  "name": "key",
                  "signature": "type key = H.t",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.t",
                  "kind": "type",
                  "name": "t",
                  "signature": "type t<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.create",
                  "kind": "value",
                  "name": "create",
                  "signature": "let create: (~random: bool=?, int) => t<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.clear",
                  "kind": "value",
                  "name": "clear",
                  "signature": "let clear: t<'a> => unit",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.reset",
                  "kind": "value",
                  "name": "reset",
                  "signature": "let reset: t<'a> => unit",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.copy",
                  "kind": "value",
                  "name": "copy",
                  "signature": "let copy: t<'a> => t<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.add",
                  "kind": "value",
                  "name": "add",
                  "signature": "let add: (t<'a>, ~key: key, ~data: 'a) => unit",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.remove",
                  "kind": "value",
                  "name": "remove",
                  "signature": "let remove: (t<'a>, key) => unit",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.find",
                  "kind": "value",
                  "name": "find",
                  "signature": "let find: (t<'a>, key) => 'a",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.find_opt",
                  "kind": "value",
                  "name": "find_opt",
                  "signature": "let find_opt: (t<'a>, key) => option<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.find_all",
                  "kind": "value",
                  "name": "find_all",
                  "signature": "let find_all: (t<'a>, key) => list<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.replace",
                  "kind": "value",
                  "name": "replace",
                  "signature": "let replace: (t<'a>, ~key: key, ~data: 'a) => unit",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.mem",
                  "kind": "value",
                  "name": "mem",
                  "signature": "let mem: (t<'a>, key) => bool",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.iter",
                  "kind": "value",
                  "name": "iter",
                  "signature": "let iter: (~f: (~key: key, ~data: 'a) => unit, t<'a>) => unit",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.filter_map_inplace",
                  "kind": "value",
                  "name": "filter_map_inplace",
                  "signature": "let filter_map_inplace: (~f: (~key: key, ~data: 'a) => option<'a>, t<'a>) => unit",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.fold",
                  "kind": "value",
                  "name": "fold",
                  "signature": "let fold: (~f: (~key: key, ~data: 'a, 'b) => 'b, t<'a>, ~init: 'b) => 'b",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.length",
                  "kind": "value",
                  "name": "length",
                  "signature": "let length: t<'a> => int",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Hashtbl.MakeSeeded.stats",
                  "kind": "value",
                  "name": "stats",
                  "signature": "let stats: t<'a> => statistics",
                  "docstrings": []
                }
              ]
            }
          },
          {
            "id": "MoreLabels.Hashtbl.hash",
            "kind": "value",
            "name": "hash",
            "signature": "let hash: 'a => int",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.seeded_hash",
            "kind": "value",
            "name": "seeded_hash",
            "signature": "let seeded_hash: (int, 'a) => int",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.hash_param",
            "kind": "value",
            "name": "hash_param",
            "signature": "let hash_param: (int, int, 'a) => int",
            "docstrings": []
          },
          {
            "id": "MoreLabels.Hashtbl.seeded_hash_param",
            "kind": "value",
            "name": "seeded_hash_param",
            "signature": "let seeded_hash_param: (int, int, int, 'a) => int",
            "docstrings": []
          }
        ]
      }
    },
    {
      "id": "Map.MoreLabels",
      "kind": "module",
      "item": {
        "name": "Map",
        "docstrings": [],
        "items": [
          {
            "id": "Make.Map.MoreLabels",
            "kind": "module",
            "item": {
              "name": "Make",
              "docstrings": [],
              "items": [
                {
                  "id": "MoreLabels.Map.Make.key",
                  "kind": "type",
                  "name": "key",
                  "signature": "type key = Ord.t",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.t",
                  "kind": "type",
                  "name": "t",
                  "signature": "type t<+'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.empty",
                  "kind": "value",
                  "name": "empty",
                  "signature": "let empty: t<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.is_empty",
                  "kind": "value",
                  "name": "is_empty",
                  "signature": "let is_empty: t<'a> => bool",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.mem",
                  "kind": "value",
                  "name": "mem",
                  "signature": "let mem: (key, t<'a>) => bool",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.add",
                  "kind": "value",
                  "name": "add",
                  "signature": "let add: (~key: key, ~data: 'a, t<'a>) => t<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.update",
                  "kind": "value",
                  "name": "update",
                  "signature": "let update: (~key: key, ~f: option<'a> => option<'a>, t<'a>) => t<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.singleton",
                  "kind": "value",
                  "name": "singleton",
                  "signature": "let singleton: (key, 'a) => t<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.remove",
                  "kind": "value",
                  "name": "remove",
                  "signature": "let remove: (key, t<'a>) => t<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.merge",
                  "kind": "value",
                  "name": "merge",
                  "signature": "let merge: (~f: (key, option<'a>, option<'b>) => option<'c>, t<'a>, t<'b>) => t<'c>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.union",
                  "kind": "value",
                  "name": "union",
                  "signature": "let union: (~f: (key, 'a, 'a) => option<'a>, t<'a>, t<'a>) => t<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.compare",
                  "kind": "value",
                  "name": "compare",
                  "signature": "let compare: (~cmp: ('a, 'a) => int, t<'a>, t<'a>) => int",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.equal",
                  "kind": "value",
                  "name": "equal",
                  "signature": "let equal: (~cmp: ('a, 'a) => bool, t<'a>, t<'a>) => bool",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.iter",
                  "kind": "value",
                  "name": "iter",
                  "signature": "let iter: (~f: (~key: key, ~data: 'a) => unit, t<'a>) => unit",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.fold",
                  "kind": "value",
                  "name": "fold",
                  "signature": "let fold: (~f: (~key: key, ~data: 'a, 'b) => 'b, t<'a>, ~init: 'b) => 'b",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.for_all",
                  "kind": "value",
                  "name": "for_all",
                  "signature": "let for_all: (~f: (key, 'a) => bool, t<'a>) => bool",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.exists",
                  "kind": "value",
                  "name": "exists",
                  "signature": "let exists: (~f: (key, 'a) => bool, t<'a>) => bool",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.filter",
                  "kind": "value",
                  "name": "filter",
                  "signature": "let filter: (~f: (key, 'a) => bool, t<'a>) => t<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.partition",
                  "kind": "value",
                  "name": "partition",
                  "signature": "let partition: (~f: (key, 'a) => bool, t<'a>) => (t<'a>, t<'a>)",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.cardinal",
                  "kind": "value",
                  "name": "cardinal",
                  "signature": "let cardinal: t<'a> => int",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.bindings",
                  "kind": "value",
                  "name": "bindings",
                  "signature": "let bindings: t<'a> => list<(key, 'a)>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.min_binding",
                  "kind": "value",
                  "name": "min_binding",
                  "signature": "let min_binding: t<'a> => (key, 'a)",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.min_binding_opt",
                  "kind": "value",
                  "name": "min_binding_opt",
                  "signature": "let min_binding_opt: t<'a> => option<(key, 'a)>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.max_binding",
                  "kind": "value",
                  "name": "max_binding",
                  "signature": "let max_binding: t<'a> => (key, 'a)",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.max_binding_opt",
                  "kind": "value",
                  "name": "max_binding_opt",
                  "signature": "let max_binding_opt: t<'a> => option<(key, 'a)>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.choose",
                  "kind": "value",
                  "name": "choose",
                  "signature": "let choose: t<'a> => (key, 'a)",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.choose_opt",
                  "kind": "value",
                  "name": "choose_opt",
                  "signature": "let choose_opt: t<'a> => option<(key, 'a)>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.split",
                  "kind": "value",
                  "name": "split",
                  "signature": "let split: (key, t<'a>) => (t<'a>, option<'a>, t<'a>)",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.find",
                  "kind": "value",
                  "name": "find",
                  "signature": "let find: (key, t<'a>) => 'a",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.find_opt",
                  "kind": "value",
                  "name": "find_opt",
                  "signature": "let find_opt: (key, t<'a>) => option<'a>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.find_first",
                  "kind": "value",
                  "name": "find_first",
                  "signature": "let find_first: (~f: key => bool, t<'a>) => (key, 'a)",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.find_first_opt",
                  "kind": "value",
                  "name": "find_first_opt",
                  "signature": "let find_first_opt: (~f: key => bool, t<'a>) => option<(key, 'a)>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.find_last",
                  "kind": "value",
                  "name": "find_last",
                  "signature": "let find_last: (~f: key => bool, t<'a>) => (key, 'a)",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.find_last_opt",
                  "kind": "value",
                  "name": "find_last_opt",
                  "signature": "let find_last_opt: (~f: key => bool, t<'a>) => option<(key, 'a)>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.map",
                  "kind": "value",
                  "name": "map",
                  "signature": "let map: (~f: 'a => 'b, t<'a>) => t<'b>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Map.Make.mapi",
                  "kind": "value",
                  "name": "mapi",
                  "signature": "let mapi: (~f: (key, 'a) => 'b, t<'a>) => t<'b>",
                  "docstrings": []
                }
              ]
            }
          }
        ]
      }
    },
    {
      "id": "Set.MoreLabels",
      "kind": "module",
      "item": {
        "name": "Set",
        "docstrings": [],
        "items": [
          {
            "id": "Make.Set.MoreLabels",
            "kind": "module",
            "item": {
              "name": "Make",
              "docstrings": [],
              "items": [
                {
                  "id": "MoreLabels.Set.Make.elt",
                  "kind": "type",
                  "name": "elt",
                  "signature": "type elt = Ord.t",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.t",
                  "kind": "type",
                  "name": "t",
                  "signature": "type t",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.empty",
                  "kind": "value",
                  "name": "empty",
                  "signature": "let empty: t",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.is_empty",
                  "kind": "value",
                  "name": "is_empty",
                  "signature": "let is_empty: t => bool",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.mem",
                  "kind": "value",
                  "name": "mem",
                  "signature": "let mem: (elt, t) => bool",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.add",
                  "kind": "value",
                  "name": "add",
                  "signature": "let add: (elt, t) => t",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.singleton",
                  "kind": "value",
                  "name": "singleton",
                  "signature": "let singleton: elt => t",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.remove",
                  "kind": "value",
                  "name": "remove",
                  "signature": "let remove: (elt, t) => t",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.union",
                  "kind": "value",
                  "name": "union",
                  "signature": "let union: (t, t) => t",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.inter",
                  "kind": "value",
                  "name": "inter",
                  "signature": "let inter: (t, t) => t",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.diff",
                  "kind": "value",
                  "name": "diff",
                  "signature": "let diff: (t, t) => t",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.compare",
                  "kind": "value",
                  "name": "compare",
                  "signature": "let compare: (t, t) => int",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.equal",
                  "kind": "value",
                  "name": "equal",
                  "signature": "let equal: (t, t) => bool",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.subset",
                  "kind": "value",
                  "name": "subset",
                  "signature": "let subset: (t, t) => bool",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.iter",
                  "kind": "value",
                  "name": "iter",
                  "signature": "let iter: (~f: elt => unit, t) => unit",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.map",
                  "kind": "value",
                  "name": "map",
                  "signature": "let map: (~f: elt => elt, t) => t",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.fold",
                  "kind": "value",
                  "name": "fold",
                  "signature": "let fold: (~f: (elt, 'a) => 'a, t, ~init: 'a) => 'a",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.for_all",
                  "kind": "value",
                  "name": "for_all",
                  "signature": "let for_all: (~f: elt => bool, t) => bool",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.exists",
                  "kind": "value",
                  "name": "exists",
                  "signature": "let exists: (~f: elt => bool, t) => bool",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.filter",
                  "kind": "value",
                  "name": "filter",
                  "signature": "let filter: (~f: elt => bool, t) => t",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.partition",
                  "kind": "value",
                  "name": "partition",
                  "signature": "let partition: (~f: elt => bool, t) => (t, t)",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.cardinal",
                  "kind": "value",
                  "name": "cardinal",
                  "signature": "let cardinal: t => int",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.elements",
                  "kind": "value",
                  "name": "elements",
                  "signature": "let elements: t => list<elt>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.min_elt",
                  "kind": "value",
                  "name": "min_elt",
                  "signature": "let min_elt: t => elt",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.min_elt_opt",
                  "kind": "value",
                  "name": "min_elt_opt",
                  "signature": "let min_elt_opt: t => option<elt>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.max_elt",
                  "kind": "value",
                  "name": "max_elt",
                  "signature": "let max_elt: t => elt",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.max_elt_opt",
                  "kind": "value",
                  "name": "max_elt_opt",
                  "signature": "let max_elt_opt: t => option<elt>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.choose",
                  "kind": "value",
                  "name": "choose",
                  "signature": "let choose: t => elt",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.choose_opt",
                  "kind": "value",
                  "name": "choose_opt",
                  "signature": "let choose_opt: t => option<elt>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.split",
                  "kind": "value",
                  "name": "split",
                  "signature": "let split: (elt, t) => (t, bool, t)",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.find",
                  "kind": "value",
                  "name": "find",
                  "signature": "let find: (elt, t) => elt",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.find_opt",
                  "kind": "value",
                  "name": "find_opt",
                  "signature": "let find_opt: (elt, t) => option<elt>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.find_first",
                  "kind": "value",
                  "name": "find_first",
                  "signature": "let find_first: (~f: elt => bool, t) => elt",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.find_first_opt",
                  "kind": "value",
                  "name": "find_first_opt",
                  "signature": "let find_first_opt: (~f: elt => bool, t) => option<elt>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.find_last",
                  "kind": "value",
                  "name": "find_last",
                  "signature": "let find_last: (~f: elt => bool, t) => elt",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.find_last_opt",
                  "kind": "value",
                  "name": "find_last_opt",
                  "signature": "let find_last_opt: (~f: elt => bool, t) => option<elt>",
                  "docstrings": []
                },
                {
                  "id": "MoreLabels.Set.Make.of_list",
                  "kind": "value",
                  "name": "of_list",
                  "signature": "let of_list: list<elt> => t",
                  "docstrings": []
                }
              ]
            }
          }
        ]
      }
    }
  ]
}