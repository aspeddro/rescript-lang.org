{
  "name": "Sort",
  "docstrings": [],
  "items": [
    {
      "id": "Sort.list",
      "kind": "value",
      "name": "list",
      "signature": "let list: (('a, 'a) => bool, list<'a>) => list<'a>",
      "docstrings": [
        "Sort a list in increasing order according to an ordering predicate.\n   The predicate should return [true] if its first argument is\n   less than or equal to its second argument."
      ]
    },
    {
      "id": "Sort.array",
      "kind": "value",
      "name": "array",
      "signature": "let array: (('a, 'a) => bool, array<'a>) => unit",
      "docstrings": [
        "Sort an array in increasing order according to an\n   ordering predicate.\n   The predicate should return [true] if its first argument is\n   less than or equal to its second argument.\n   The array is sorted in place."
      ]
    },
    {
      "id": "Sort.merge",
      "kind": "value",
      "name": "merge",
      "signature": "let merge: (('a, 'a) => bool, list<'a>, list<'a>) => list<'a>",
      "docstrings": [
        "Merge two lists according to the given predicate.\n   Assuming the two argument lists are sorted according to the\n   predicate, [merge] returns a sorted list containing the elements\n   from the two lists. The behavior is undefined if the two\n   argument lists were not sorted."
      ]
    }
  ]
}