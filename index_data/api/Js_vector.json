{
  "name": "Js_vector",
  "docstrings": [],
  "items": [
    {
      "id": "Js_vector.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a> = array<'a>",
      "docstrings": []
    },
    {
      "id": "Js_vector.filterInPlace",
      "kind": "value",
      "name": "filterInPlace",
      "signature": "let filterInPlace: ((. 'a) => bool, t<'a>) => unit",
      "docstrings": []
    },
    {
      "id": "Js_vector.empty",
      "kind": "value",
      "name": "empty",
      "signature": "let empty: t<'a> => unit",
      "docstrings": []
    },
    {
      "id": "Js_vector.pushBack",
      "kind": "value",
      "name": "pushBack",
      "signature": "let pushBack: ('a, t<'a>) => unit",
      "docstrings": []
    },
    {
      "id": "Js_vector.copy",
      "kind": "value",
      "name": "copy",
      "signature": "let copy: t<'a> => t<'a>",
      "docstrings": [
        "shallow copy"
      ]
    },
    {
      "id": "Js_vector.memByRef",
      "kind": "value",
      "name": "memByRef",
      "signature": "let memByRef: ('a, t<'a>) => bool",
      "docstrings": []
    },
    {
      "id": "Js_vector.iter",
      "kind": "value",
      "name": "iter",
      "signature": "let iter: ((. 'a) => unit, t<'a>) => unit",
      "docstrings": []
    },
    {
      "id": "Js_vector.iteri",
      "kind": "value",
      "name": "iteri",
      "signature": "let iteri: ((. int, 'a) => unit, t<'a>) => unit",
      "docstrings": []
    },
    {
      "id": "Js_vector.toList",
      "kind": "value",
      "name": "toList",
      "signature": "let toList: t<'a> => list<'a>",
      "docstrings": []
    },
    {
      "id": "Js_vector.map",
      "kind": "value",
      "name": "map",
      "signature": "let map: ((. 'a) => 'b, t<'a>) => t<'b>",
      "docstrings": []
    },
    {
      "id": "Js_vector.mapi",
      "kind": "value",
      "name": "mapi",
      "signature": "let mapi: ((. int, 'a) => 'b, t<'a>) => t<'b>",
      "docstrings": []
    },
    {
      "id": "Js_vector.foldLeft",
      "kind": "value",
      "name": "foldLeft",
      "signature": "let foldLeft: ((. 'a, 'b) => 'a, 'a, t<'b>) => 'a",
      "docstrings": []
    },
    {
      "id": "Js_vector.foldRight",
      "kind": "value",
      "name": "foldRight",
      "signature": "let foldRight: ((. 'b, 'a) => 'a, t<'b>, 'a) => 'a",
      "docstrings": []
    },
    {
      "id": "Js_vector.length",
      "kind": "value",
      "name": "length",
      "signature": "let length: t<'a> => int",
      "docstrings": [
        "Return the length (number of elements) of the given array."
      ]
    },
    {
      "id": "Js_vector.get",
      "kind": "value",
      "name": "get",
      "signature": "let get: (t<'a>, int) => 'a",
      "docstrings": [
        "`Vector.get(a, n)` returns the element number `n` of vector `a`. The first\nelement has number 0. The last element has number `Vector.length(a) - 1`. You\ncan also write `a[n]` instead of `Vector.get(a, n)`. Raise `Invalid_argument\n\"index out of bounds\"` if `n` is outside the range 0 to (`Array.length(a) -\n1`)."
      ]
    },
    {
      "id": "Js_vector.set",
      "kind": "value",
      "name": "set",
      "signature": "let set: (t<'a>, int, 'a) => unit",
      "docstrings": [
        "`Vector.set(a, n, x)` modifies vector `a` in place, replacing element number\n`n` with `x`. Raise `Invalid_argument \"index out of bounds\"` if `n` is outside\nthe range 0 to `Array.length(a) - 1`."
      ]
    },
    {
      "id": "Js_vector.make",
      "kind": "value",
      "name": "make",
      "signature": "let make: (int, 'a) => t<'a>",
      "docstrings": [
        "`Vector.make(n, x)` returns a fresh vector of length `n`, initialized with `x`.\nAll the elements of this new vector are initially physically equal to `x` (in\nthe sense of the `==` predicate). Consequently, if `x` is mutable, it is shared\namong all elements of the array, and modifying `x` through one of the array\nentries will modify all other entries at the same time. Raise\n`Invalid_argument` if `n < 0` or `n > Sys.max_array_length`. If the value of\n`x` is a floating-point number, then the maximum size is only\n`Sys.max_array_length / 2`."
      ]
    },
    {
      "id": "Js_vector.init",
      "kind": "value",
      "name": "init",
      "signature": "let init: (int, (. int) => 'a) => t<'a>",
      "docstrings": [
        "Raises `RangeError` when n is negative.\nn : size"
      ]
    },
    {
      "id": "Js_vector.append",
      "kind": "value",
      "name": "append",
      "signature": "let append: ('a, t<'a>) => t<'a>",
      "docstrings": [
        "`append(x, a)` returns a fresh vector with `x` appended to `a`."
      ]
    },
    {
      "id": "Js_vector.unsafe_get",
      "kind": "value",
      "name": "unsafe_get",
      "signature": "let unsafe_get: (t<'a>, int) => 'a",
      "docstrings": []
    },
    {
      "id": "Js_vector.unsafe_set",
      "kind": "value",
      "name": "unsafe_set",
      "signature": "let unsafe_set: (t<'a>, int, 'a) => unit",
      "docstrings": []
    }
  ]
}