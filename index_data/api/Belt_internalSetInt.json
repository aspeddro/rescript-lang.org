{
  "name": "Belt_internalSetInt",
  "docstrings": [],
  "items": [
    {
      "id": "Belt_internalSetInt.value",
      "kind": "type",
      "name": "value",
      "signature": "type value = int",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetInt.Belt_SortArrayInt",
      "kind": "moduleAlias",
      "docstrings": [],
      "signature": "module S = Belt_SortArrayInt"
    },
    {
      "id": "Belt_internalSetInt.Belt_internalAVLset",
      "kind": "moduleAlias",
      "docstrings": [],
      "signature": "module N = Belt_internalAVLset"
    },
    {
      "id": "Belt_internalSetInt.Belt_Array",
      "kind": "moduleAlias",
      "docstrings": [],
      "signature": "module A = Belt_Array"
    },
    {
      "id": "Belt_internalSetInt.t",
      "kind": "type",
      "name": "t",
      "signature": "type t = N.t<value>",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetInt.has",
      "kind": "value",
      "name": "has",
      "signature": "let has: (t, value) => bool",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetInt.compareAux",
      "kind": "value",
      "name": "compareAux",
      "signature": "let compareAux: (list<N.node<value>>, list<N.node<value>>) => int",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetInt.cmp",
      "kind": "value",
      "name": "cmp",
      "signature": "let cmp: (N.t<value>, N.t<value>) => int",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetInt.eq",
      "kind": "value",
      "name": "eq",
      "signature": "let eq: (t, N.t<value>) => bool",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetInt.subset",
      "kind": "value",
      "name": "subset",
      "signature": "let subset: (t, t) => bool",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetInt.get",
      "kind": "value",
      "name": "get",
      "signature": "let get: (t, value) => option<value>",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetInt.getUndefined",
      "kind": "value",
      "name": "getUndefined",
      "signature": "let getUndefined: (t, value) => Js.Undefined.t<value>",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetInt.getExn",
      "kind": "value",
      "name": "getExn",
      "signature": "let getExn: (t, value) => value",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetInt.addMutate",
      "kind": "value",
      "name": "addMutate",
      "signature": "let addMutate: (N.t<value>, value) => N.t<value>",
      "docstrings": []
    },
    {
      "id": "Belt_internalSetInt.fromArray",
      "kind": "value",
      "name": "fromArray",
      "signature": "let fromArray: array<value> => N.t<value>",
      "docstrings": []
    }
  ]
}