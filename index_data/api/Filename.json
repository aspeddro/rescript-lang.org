{
  "name": "Filename",
  "docstrings": [],
  "items": [
    {
      "id": "Filename.current_dir_name",
      "kind": "value",
      "name": "current_dir_name",
      "signature": "let current_dir_name: string",
      "docstrings": [
        "The conventional name for the current directory (e.g. [.] in Unix)."
      ]
    },
    {
      "id": "Filename.parent_dir_name",
      "kind": "value",
      "name": "parent_dir_name",
      "signature": "let parent_dir_name: string",
      "docstrings": [
        "The conventional name for the parent of the current directory\n   (e.g. [..] in Unix)."
      ]
    },
    {
      "id": "Filename.dir_sep",
      "kind": "value",
      "name": "dir_sep",
      "signature": "let dir_sep: string",
      "docstrings": [
        "The directory separator (e.g. [/] in Unix). @since 3.11.2"
      ]
    },
    {
      "id": "Filename.concat",
      "kind": "value",
      "name": "concat",
      "signature": "let concat: (string, string) => string",
      "docstrings": [
        "[concat dir file] returns a file name that designates file\n   [file] in directory [dir]."
      ]
    },
    {
      "id": "Filename.is_relative",
      "kind": "value",
      "name": "is_relative",
      "signature": "let is_relative: string => bool",
      "docstrings": [
        "Return [true] if the file name is relative to the current\n   directory, [false] if it is absolute (i.e. in Unix, starts\n   with [/])."
      ]
    },
    {
      "id": "Filename.is_implicit",
      "kind": "value",
      "name": "is_implicit",
      "signature": "let is_implicit: string => bool",
      "docstrings": [
        "Return [true] if the file name is relative and does not start\n   with an explicit reference to the current directory ([./] or\n   [../] in Unix), [false] if it starts with an explicit reference\n   to the root directory or the current directory."
      ]
    },
    {
      "id": "Filename.check_suffix",
      "kind": "value",
      "name": "check_suffix",
      "signature": "let check_suffix: (string, string) => bool",
      "docstrings": [
        "[check_suffix name suff] returns [true] if the filename [name]\n   ends with the suffix [suff]."
      ]
    },
    {
      "id": "Filename.chop_suffix",
      "kind": "value",
      "name": "chop_suffix",
      "signature": "let chop_suffix: (string, string) => string",
      "docstrings": [
        "[chop_suffix name suff] removes the suffix [suff] from\n   the filename [name]. The behavior is undefined if [name] does not\n   end with the suffix [suff]."
      ]
    },
    {
      "id": "Filename.extension",
      "kind": "value",
      "name": "extension",
      "signature": "let extension: string => string",
      "docstrings": [
        "[extension name] is the shortest suffix [ext] of [name0] where:\n\n    - [name0] is the longest suffix of [name] that does not\n      contain a directory separator;\n    - [ext] starts with a period;\n    - [ext] is preceded by at least one non-period character\n      in [name0].\n\n    If such a suffix does not exist, [extension name] is the empty\n    string.\n\n    @since 4.04"
      ]
    },
    {
      "id": "Filename.remove_extension",
      "kind": "value",
      "name": "remove_extension",
      "signature": "let remove_extension: string => string",
      "docstrings": [
        "Return the given file name without its extension, as defined\n    in {!Filename.extension}. If the extension is empty, the function\n    returns the given file name.\n\n    The following invariant holds for any file name [s]:\n\n    [remove_extension s ^ extension s = s]\n\n    @since 4.04"
      ]
    },
    {
      "id": "Filename.chop_extension",
      "kind": "value",
      "name": "chop_extension",
      "signature": "let chop_extension: string => string",
      "docstrings": [
        "Same as {!Filename.remove_extension}, but raise [Invalid_argument]\n    if the given name has an empty extension."
      ]
    },
    {
      "id": "Filename.basename",
      "kind": "value",
      "name": "basename",
      "signature": "let basename: string => string",
      "docstrings": [
        "Split a file name into directory name / base file name.\n   If [name] is a valid file name, then [concat (dirname name) (basename name)]\n   returns a file name which is equivalent to [name]. Moreover,\n   after setting the current directory to [dirname name] (with {!Sys.chdir}),\n   references to [basename name] (which is a relative file name)\n   designate the same file as [name] before the call to {!Sys.chdir}.\n\n   This function conforms to the specification of POSIX.1-2008 for the\n   [basename] utility."
      ]
    },
    {
      "id": "Filename.dirname",
      "kind": "value",
      "name": "dirname",
      "signature": "let dirname: string => string",
      "docstrings": [
        "See {!Filename.basename}.\n   This function conforms to the specification of POSIX.1-2008 for the\n   [dirname] utility."
      ]
    },
    {
      "id": "Filename.get_temp_dir_name",
      "kind": "value",
      "name": "get_temp_dir_name",
      "signature": "let get_temp_dir_name: unit => string",
      "docstrings": [
        "The name of the temporary directory:\n    Under Unix, the value of the [TMPDIR] environment variable, or \"/tmp\"\n    if the variable is not set.\n    Under Windows, the value of the [TEMP] environment variable, or \".\"\n    if the variable is not set.\n    The temporary directory can be changed with {!Filename.set_temp_dir_name}.\n    @since 4.00.0"
      ]
    },
    {
      "id": "Filename.set_temp_dir_name",
      "kind": "value",
      "name": "set_temp_dir_name",
      "signature": "let set_temp_dir_name: string => unit",
      "docstrings": [
        "Change the temporary directory returned by {!Filename.get_temp_dir_name}\n    and used by {!Filename.temp_file} and {!Filename.open_temp_file}.\n    @since 4.00.0"
      ]
    },
    {
      "id": "Filename.temp_dir_name",
      "kind": "value",
      "name": "temp_dir_name",
      "signature": "let temp_dir_name: string",
      "docstrings": [
        "The name of the initial temporary directory:\n    Under Unix, the value of the [TMPDIR] environment variable, or \"/tmp\"\n    if the variable is not set.\n    Under Windows, the value of the [TEMP] environment variable, or \".\"\n    if the variable is not set.\n    @deprecated You should use {!Filename.get_temp_dir_name} instead.\n    @since 3.09.1"
      ]
    },
    {
      "id": "Filename.quote",
      "kind": "value",
      "name": "quote",
      "signature": "let quote: string => string",
      "docstrings": [
        "Return a quoted version of a file name, suitable for use as\n    one argument in a command line, escaping all meta-characters.\n    Warning: under Windows, the output is only suitable for use\n    with programs that follow the standard Windows quoting\n    conventions."
      ]
    }
  ]
}