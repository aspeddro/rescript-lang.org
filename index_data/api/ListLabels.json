{
  "name": "ListLabels",
  "docstrings": [],
  "items": [
    {
      "id": "ListLabels.length",
      "kind": "value",
      "name": "length",
      "signature": "let length: list<'a> => int",
      "docstrings": [
        "Return the length (number of elements) of the given list."
      ]
    },
    {
      "id": "ListLabels.hd",
      "kind": "value",
      "name": "hd",
      "signature": "let hd: list<'a> => 'a",
      "docstrings": [
        "Return the first element of the given list. Raise\n   [Failure \"hd\"] if the list is empty."
      ]
    },
    {
      "id": "ListLabels.compare_lengths",
      "kind": "value",
      "name": "compare_lengths",
      "signature": "let compare_lengths: (list<'a>, list<'b>) => int",
      "docstrings": [
        "Compare the lengths of two lists. [compare_lengths l1 l2] is\n   equivalent to [compare (length l1) (length l2)], except that\n   the computation stops after itering on the shortest list.\n   @since 4.05.0"
      ]
    },
    {
      "id": "ListLabels.compare_length_with",
      "kind": "value",
      "name": "compare_length_with",
      "signature": "let compare_length_with: (list<'a>, ~len: int) => int",
      "docstrings": [
        "Compare the length of a list to an integer. [compare_length_with l n] is\n   equivalent to [compare (length l) n], except that\n   the computation stops after at most [n] iterations on the list.\n   @since 4.05.0"
      ]
    },
    {
      "id": "ListLabels.cons",
      "kind": "value",
      "name": "cons",
      "signature": "let cons: ('a, list<'a>) => list<'a>",
      "docstrings": [
        "[cons x xs] is [x :: xs]\n    @since 4.05.0"
      ]
    },
    {
      "id": "ListLabels.tl",
      "kind": "value",
      "name": "tl",
      "signature": "let tl: list<'a> => list<'a>",
      "docstrings": [
        "Return the given list without its first element. Raise\n   [Failure \"tl\"] if the list is empty."
      ]
    },
    {
      "id": "ListLabels.nth",
      "kind": "value",
      "name": "nth",
      "signature": "let nth: (list<'a>, int) => 'a",
      "docstrings": [
        "Return the [n]-th element of the given list.\n   The first element (head of the list) is at position 0.\n   Raise [Failure \"nth\"] if the list is too short.\n   Raise [Invalid_argument \"List.nth\"] if [n] is negative."
      ]
    },
    {
      "id": "ListLabels.nth_opt",
      "kind": "value",
      "name": "nth_opt",
      "signature": "let nth_opt: (list<'a>, int) => option<'a>",
      "docstrings": [
        "Return the [n]-th element of the given list.\n    The first element (head of the list) is at position 0.\n    Return [None] if the list is too short.\n    Raise [Invalid_argument \"List.nth\"] if [n] is negative.\n    @since 4.05"
      ]
    },
    {
      "id": "ListLabels.rev",
      "kind": "value",
      "name": "rev",
      "signature": "let rev: list<'a> => list<'a>",
      "docstrings": [
        "List reversal."
      ]
    },
    {
      "id": "ListLabels.init",
      "kind": "value",
      "name": "init",
      "signature": "let init: (~len: int, ~f: int => 'a) => list<'a>",
      "docstrings": [
        "[List.init len f] is [f 0; f 1; ...; f (len-1)], evaluated left to right.\n\n    @raise Invalid_argument if [len < 0].\n    @since 4.06.0"
      ]
    },
    {
      "id": "ListLabels.append",
      "kind": "value",
      "name": "append",
      "signature": "let append: (list<'a>, list<'a>) => list<'a>",
      "docstrings": [
        "Catenate two lists.  Same function as the infix operator [@].\n   Not tail-recursive (length of the first argument).  The [@]\n   operator is not tail-recursive either."
      ]
    },
    {
      "id": "ListLabels.rev_append",
      "kind": "value",
      "name": "rev_append",
      "signature": "let rev_append: (list<'a>, list<'a>) => list<'a>",
      "docstrings": [
        "[List.rev_append l1 l2] reverses [l1] and concatenates it with [l2].\n   This is equivalent to [(]{!List.rev}[ l1) @ l2], but [rev_append] is\n   tail-recursive and more efficient."
      ]
    },
    {
      "id": "ListLabels.concat",
      "kind": "value",
      "name": "concat",
      "signature": "let concat: list<list<'a>> => list<'a>",
      "docstrings": [
        "Concatenate a list of lists.  The elements of the argument are all\n   concatenated together (in the same order) to give the result.\n   Not tail-recursive\n   (length of the argument + length of the longest sub-list)."
      ]
    },
    {
      "id": "ListLabels.flatten",
      "kind": "value",
      "name": "flatten",
      "signature": "let flatten: list<list<'a>> => list<'a>",
      "docstrings": [
        "Same as [concat].  Not tail-recursive\n   (length of the argument + length of the longest sub-list)."
      ]
    },
    {
      "id": "ListLabels.iter",
      "kind": "value",
      "name": "iter",
      "signature": "let iter: (~f: 'a => unit, list<'a>) => unit",
      "docstrings": [
        "[List.iter f [a1; ...; an]] applies function [f] in turn to\n   [a1; ...; an]. It is equivalent to\n   [begin f a1; f a2; ...; f an; () end]."
      ]
    },
    {
      "id": "ListLabels.iteri",
      "kind": "value",
      "name": "iteri",
      "signature": "let iteri: (~f: (int, 'a) => unit, list<'a>) => unit",
      "docstrings": [
        "Same as {!List.iter}, but the function is applied to the index of\n   the element as first argument (counting from 0), and the element\n   itself as second argument.\n   @since 4.00.0"
      ]
    },
    {
      "id": "ListLabels.map",
      "kind": "value",
      "name": "map",
      "signature": "let map: (~f: 'a => 'b, list<'a>) => list<'b>",
      "docstrings": [
        "[List.map f [a1; ...; an]] applies function [f] to [a1, ..., an],\n   and builds the list [[f a1; ...; f an]]\n   with the results returned by [f].  Not tail-recursive."
      ]
    },
    {
      "id": "ListLabels.mapi",
      "kind": "value",
      "name": "mapi",
      "signature": "let mapi: (~f: (int, 'a) => 'b, list<'a>) => list<'b>",
      "docstrings": [
        "Same as {!List.map}, but the function is applied to the index of\n   the element as first argument (counting from 0), and the element\n   itself as second argument.\n   @since 4.00.0"
      ]
    },
    {
      "id": "ListLabels.rev_map",
      "kind": "value",
      "name": "rev_map",
      "signature": "let rev_map: (~f: 'a => 'b, list<'a>) => list<'b>",
      "docstrings": [
        "[List.rev_map f l] gives the same result as\n   {!List.rev}[ (]{!List.map}[ f l)], but is tail-recursive and\n   more efficient."
      ]
    },
    {
      "id": "ListLabels.fold_left",
      "kind": "value",
      "name": "fold_left",
      "signature": "let fold_left: (~f: ('a, 'b) => 'a, ~init: 'a, list<'b>) => 'a",
      "docstrings": [
        "[List.fold_left f a [b1; ...; bn]] is\n   [f (... (f (f a b1) b2) ...) bn]."
      ]
    },
    {
      "id": "ListLabels.fold_right",
      "kind": "value",
      "name": "fold_right",
      "signature": "let fold_right: (~f: ('a, 'b) => 'b, list<'a>, ~init: 'b) => 'b",
      "docstrings": [
        "[List.fold_right f [a1; ...; an] b] is\n   [f a1 (f a2 (... (f an b) ...))].  Not tail-recursive."
      ]
    },
    {
      "id": "ListLabels.iter2",
      "kind": "value",
      "name": "iter2",
      "signature": "let iter2: (~f: ('a, 'b) => unit, list<'a>, list<'b>) => unit",
      "docstrings": [
        "[List.iter2 f [a1; ...; an] [b1; ...; bn]] calls in turn\n   [f a1 b1; ...; f an bn].\n   Raise [Invalid_argument] if the two lists are determined\n   to have different lengths."
      ]
    },
    {
      "id": "ListLabels.map2",
      "kind": "value",
      "name": "map2",
      "signature": "let map2: (~f: ('a, 'b) => 'c, list<'a>, list<'b>) => list<'c>",
      "docstrings": [
        "[List.map2 f [a1; ...; an] [b1; ...; bn]] is\n   [[f a1 b1; ...; f an bn]].\n   Raise [Invalid_argument] if the two lists are determined\n   to have different lengths.  Not tail-recursive."
      ]
    },
    {
      "id": "ListLabels.rev_map2",
      "kind": "value",
      "name": "rev_map2",
      "signature": "let rev_map2: (~f: ('a, 'b) => 'c, list<'a>, list<'b>) => list<'c>",
      "docstrings": [
        "[List.rev_map2 f l1 l2] gives the same result as\n   {!List.rev}[ (]{!List.map2}[ f l1 l2)], but is tail-recursive and\n   more efficient."
      ]
    },
    {
      "id": "ListLabels.fold_left2",
      "kind": "value",
      "name": "fold_left2",
      "signature": "let fold_left2: (~f: ('a, 'b, 'c) => 'a, ~init: 'a, list<'b>, list<'c>) => 'a",
      "docstrings": [
        "[List.fold_left2 f a [b1; ...; bn] [c1; ...; cn]] is\n   [f (... (f (f a b1 c1) b2 c2) ...) bn cn].\n   Raise [Invalid_argument] if the two lists are determined\n   to have different lengths."
      ]
    },
    {
      "id": "ListLabels.fold_right2",
      "kind": "value",
      "name": "fold_right2",
      "signature": "let fold_right2: (~f: ('a, 'b, 'c) => 'c, list<'a>, list<'b>, ~init: 'c) => 'c",
      "docstrings": [
        "[List.fold_right2 f [a1; ...; an] [b1; ...; bn] c] is\n   [f a1 b1 (f a2 b2 (... (f an bn c) ...))].\n   Raise [Invalid_argument] if the two lists are determined\n   to have different lengths.  Not tail-recursive."
      ]
    },
    {
      "id": "ListLabels.for_all",
      "kind": "value",
      "name": "for_all",
      "signature": "let for_all: (~f: 'a => bool, list<'a>) => bool",
      "docstrings": [
        "[for_all p [a1; ...; an]] checks if all elements of the list\n   satisfy the predicate [p]. That is, it returns\n   [(p a1) && (p a2) && ... && (p an)]."
      ]
    },
    {
      "id": "ListLabels.exists",
      "kind": "value",
      "name": "exists",
      "signature": "let exists: (~f: 'a => bool, list<'a>) => bool",
      "docstrings": [
        "[exists p [a1; ...; an]] checks if at least one element of\n   the list satisfies the predicate [p]. That is, it returns\n   [(p a1) || (p a2) || ... || (p an)]."
      ]
    },
    {
      "id": "ListLabels.for_all2",
      "kind": "value",
      "name": "for_all2",
      "signature": "let for_all2: (~f: ('a, 'b) => bool, list<'a>, list<'b>) => bool",
      "docstrings": [
        "Same as {!List.for_all}, but for a two-argument predicate.\n   Raise [Invalid_argument] if the two lists are determined\n   to have different lengths."
      ]
    },
    {
      "id": "ListLabels.exists2",
      "kind": "value",
      "name": "exists2",
      "signature": "let exists2: (~f: ('a, 'b) => bool, list<'a>, list<'b>) => bool",
      "docstrings": [
        "Same as {!List.exists}, but for a two-argument predicate.\n   Raise [Invalid_argument] if the two lists are determined\n   to have different lengths."
      ]
    },
    {
      "id": "ListLabels.mem",
      "kind": "value",
      "name": "mem",
      "signature": "let mem: ('a, ~set: list<'a>) => bool",
      "docstrings": [
        "[mem a l] is true if and only if [a] is equal\n   to an element of [l]."
      ]
    },
    {
      "id": "ListLabels.memq",
      "kind": "value",
      "name": "memq",
      "signature": "let memq: ('a, ~set: list<'a>) => bool",
      "docstrings": [
        "Same as {!List.mem}, but uses physical equality instead of structural\n   equality to compare list elements."
      ]
    },
    {
      "id": "ListLabels.find",
      "kind": "value",
      "name": "find",
      "signature": "let find: (~f: 'a => bool, list<'a>) => 'a",
      "docstrings": [
        "[find p l] returns the first element of the list [l]\n   that satisfies the predicate [p].\n   Raise [Not_found] if there is no value that satisfies [p] in the\n   list [l]."
      ]
    },
    {
      "id": "ListLabels.find_opt",
      "kind": "value",
      "name": "find_opt",
      "signature": "let find_opt: (~f: 'a => bool, list<'a>) => option<'a>",
      "docstrings": [
        "[find p l] returns the first element of the list [l]\n   that satisfies the predicate [p].\n   Returns [None] if there is no value that satisfies [p] in the\n   list [l].\n   @since 4.05"
      ]
    },
    {
      "id": "ListLabels.filter",
      "kind": "value",
      "name": "filter",
      "signature": "let filter: (~f: 'a => bool, list<'a>) => list<'a>",
      "docstrings": [
        "[filter p l] returns all the elements of the list [l]\n   that satisfy the predicate [p].  The order of the elements\n   in the input list is preserved."
      ]
    },
    {
      "id": "ListLabels.find_all",
      "kind": "value",
      "name": "find_all",
      "signature": "let find_all: (~f: 'a => bool, list<'a>) => list<'a>",
      "docstrings": [
        "[find_all] is another name for {!List.filter}."
      ]
    },
    {
      "id": "ListLabels.partition",
      "kind": "value",
      "name": "partition",
      "signature": "let partition: (~f: 'a => bool, list<'a>) => (list<'a>, list<'a>)",
      "docstrings": [
        "[partition p l] returns a pair of lists [(l1, l2)], where\n   [l1] is the list of all the elements of [l] that\n   satisfy the predicate [p], and [l2] is the list of all the\n   elements of [l] that do not satisfy [p].\n   The order of the elements in the input list is preserved."
      ]
    },
    {
      "id": "ListLabels.assoc",
      "kind": "value",
      "name": "assoc",
      "signature": "let assoc: ('a, list<('a, 'b)>) => 'b",
      "docstrings": [
        "[assoc a l] returns the value associated with key [a] in the list of\n   pairs [l]. That is,\n   [assoc a [ ...; (a,b); ...] = b]\n   if [(a,b)] is the leftmost binding of [a] in list [l].\n   Raise [Not_found] if there is no value associated with [a] in the\n   list [l]."
      ]
    },
    {
      "id": "ListLabels.assoc_opt",
      "kind": "value",
      "name": "assoc_opt",
      "signature": "let assoc_opt: ('a, list<('a, 'b)>) => option<'b>",
      "docstrings": [
        "[assoc_opt a l] returns the value associated with key [a] in the list of\n    pairs [l]. That is,\n    [assoc a [ ...; (a,b); ...] = b]\n    if [(a,b)] is the leftmost binding of [a] in list [l].\n    Returns [None] if there is no value associated with [a] in the\n    list [l].\n    @since 4.05"
      ]
    },
    {
      "id": "ListLabels.assq",
      "kind": "value",
      "name": "assq",
      "signature": "let assq: ('a, list<('a, 'b)>) => 'b",
      "docstrings": [
        "Same as {!List.assoc}, but uses physical equality instead of\n   structural equality to compare keys."
      ]
    },
    {
      "id": "ListLabels.assq_opt",
      "kind": "value",
      "name": "assq_opt",
      "signature": "let assq_opt: ('a, list<('a, 'b)>) => option<'b>",
      "docstrings": [
        "Same as {!List.assoc_opt}, but uses physical equality instead of\n   structural equality to compare keys.\n   @since 4.05.0"
      ]
    },
    {
      "id": "ListLabels.mem_assoc",
      "kind": "value",
      "name": "mem_assoc",
      "signature": "let mem_assoc: ('a, ~map: list<('a, 'b)>) => bool",
      "docstrings": [
        "Same as {!List.assoc}, but simply return true if a binding exists,\n   and false if no bindings exist for the given key."
      ]
    },
    {
      "id": "ListLabels.mem_assq",
      "kind": "value",
      "name": "mem_assq",
      "signature": "let mem_assq: ('a, ~map: list<('a, 'b)>) => bool",
      "docstrings": [
        "Same as {!List.mem_assoc}, but uses physical equality instead of\n   structural equality to compare keys."
      ]
    },
    {
      "id": "ListLabels.remove_assoc",
      "kind": "value",
      "name": "remove_assoc",
      "signature": "let remove_assoc: ('a, list<('a, 'b)>) => list<('a, 'b)>",
      "docstrings": [
        "[remove_assoc a l] returns the list of\n   pairs [l] without the first pair with key [a], if any.\n   Not tail-recursive."
      ]
    },
    {
      "id": "ListLabels.remove_assq",
      "kind": "value",
      "name": "remove_assq",
      "signature": "let remove_assq: ('a, list<('a, 'b)>) => list<('a, 'b)>",
      "docstrings": [
        "Same as {!List.remove_assoc}, but uses physical equality instead\n   of structural equality to compare keys.  Not tail-recursive."
      ]
    },
    {
      "id": "ListLabels.split",
      "kind": "value",
      "name": "split",
      "signature": "let split: list<('a, 'b)> => (list<'a>, list<'b>)",
      "docstrings": [
        "Transform a list of pairs into a pair of lists:\n   [split [(a1,b1); ...; (an,bn)]] is [([a1; ...; an], [b1; ...; bn])].\n   Not tail-recursive."
      ]
    },
    {
      "id": "ListLabels.combine",
      "kind": "value",
      "name": "combine",
      "signature": "let combine: (list<'a>, list<'b>) => list<('a, 'b)>",
      "docstrings": [
        "Transform a pair of lists into a list of pairs:\n   [combine [a1; ...; an] [b1; ...; bn]] is\n   [[(a1,b1); ...; (an,bn)]].\n   Raise [Invalid_argument] if the two lists\n   have different lengths.  Not tail-recursive."
      ]
    },
    {
      "id": "ListLabels.sort",
      "kind": "value",
      "name": "sort",
      "signature": "let sort: (~cmp: ('a, 'a) => int, list<'a>) => list<'a>",
      "docstrings": [
        "Sort a list in increasing order according to a comparison\n   function.  The comparison function must return 0 if its arguments\n   compare as equal, a positive integer if the first is greater,\n   and a negative integer if the first is smaller (see Array.sort for\n   a complete specification).  For example,\n   {!Pervasives.compare} is a suitable comparison function.\n   The resulting list is sorted in increasing order.\n   [List.sort] is guaranteed to run in constant heap space\n   (in addition to the size of the result list) and logarithmic\n   stack space.\n\n   The current implementation uses Merge Sort. It runs in constant\n   heap space and logarithmic stack space."
      ]
    },
    {
      "id": "ListLabels.stable_sort",
      "kind": "value",
      "name": "stable_sort",
      "signature": "let stable_sort: (~cmp: ('a, 'a) => int, list<'a>) => list<'a>",
      "docstrings": [
        "Same as {!List.sort}, but the sorting algorithm is guaranteed to\n   be stable (i.e. elements that compare equal are kept in their\n   original order) .\n\n   The current implementation uses Merge Sort. It runs in constant\n   heap space and logarithmic stack space."
      ]
    },
    {
      "id": "ListLabels.fast_sort",
      "kind": "value",
      "name": "fast_sort",
      "signature": "let fast_sort: (~cmp: ('a, 'a) => int, list<'a>) => list<'a>",
      "docstrings": [
        "Same as {!List.sort} or {!List.stable_sort}, whichever is\n    faster on typical input."
      ]
    },
    {
      "id": "ListLabels.sort_uniq",
      "kind": "value",
      "name": "sort_uniq",
      "signature": "let sort_uniq: (~cmp: ('a, 'a) => int, list<'a>) => list<'a>",
      "docstrings": [
        "Same as {!List.sort}, but also remove duplicates.\n    @since 4.03.0"
      ]
    },
    {
      "id": "ListLabels.merge",
      "kind": "value",
      "name": "merge",
      "signature": "let merge: (~cmp: ('a, 'a) => int, list<'a>, list<'a>) => list<'a>",
      "docstrings": [
        "Merge two lists:\n    Assuming that [l1] and [l2] are sorted according to the\n    comparison function [cmp], [merge cmp l1 l2] will return a\n    sorted list containing all the elements of [l1] and [l2].\n    If several elements compare equal, the elements of [l1] will be\n    before the elements of [l2].\n    Not tail-recursive (sum of the lengths of the arguments)."
      ]
    }
  ]
}