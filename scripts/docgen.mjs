// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Pervasives from "rescript/lib/es6/pervasives.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var Schema = {};

function decodeDocstring(item) {
  var j = Js_dict.get(item, "docstrings");
  if (j === undefined) {
    return [];
  }
  var arr = Js_json.classify(Caml_option.valFromOption(j));
  if (typeof arr === "number") {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "docgen.res",
            68,
            11
          ],
          Error: new Error()
        };
  }
  if (arr.TAG === /* JSONArray */3) {
    return arr._0.map(function (s) {
                var s$1 = Js_json.classify(s);
                if (typeof s$1 === "number") {
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "docgen.res",
                          65,
                          15
                        ],
                        Error: new Error()
                      };
                }
                if (s$1.TAG === /* JSONString */0) {
                  return s$1._0;
                }
                throw {
                      RE_EXN_ID: "Assert_failure",
                      _1: [
                        "docgen.res",
                        65,
                        15
                      ],
                      Error: new Error()
                    };
              });
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "docgen.res",
          68,
          11
        ],
        Error: new Error()
      };
}

function decodeStringByField(item, field) {
  var j = Js_dict.get(item, field);
  if (j !== undefined) {
    var s = Js_json.classify(Caml_option.valFromOption(j));
    if (typeof s === "number") {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "docgen.res",
              80,
              11
            ],
            Error: new Error()
          };
    }
    if (s.TAG === /* JSONString */0) {
      return s._0;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "docgen.res",
            80,
            11
          ],
          Error: new Error()
        };
  } else {
    console.log(item);
    return Pervasives.failwith("Not found field: " + field + "");
  }
}

function decodeDepreacted(item) {
  var j = Js_dict.get(item, "deprecated");
  if (j === undefined) {
    return ;
  }
  var j$1 = Js_json.classify(Caml_option.valFromOption(j));
  if (typeof j$1 === "number") {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "docgen.res",
            95,
            11
          ],
          Error: new Error()
        };
  }
  if (j$1.TAG === /* JSONString */0) {
    return j$1._0;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "docgen.res",
          95,
          11
        ],
        Error: new Error()
      };
}

function decodeRecordFields(fields) {
  var fields$1 = fields.map(function (field) {
        var doc = Js_json.classify(field);
        if (typeof doc === "number") {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "docgen.res",
                  124,
                  11
                ],
                Error: new Error()
              };
        }
        if (doc.TAG === /* JSONObject */2) {
          var doc$1 = doc._0;
          var fieldName = decodeStringByField(doc$1, "fieldName");
          var docstrings = decodeDocstring(doc$1);
          var signature = decodeStringByField(doc$1, "signature");
          var deprecated = decodeDepreacted(doc$1);
          var value = Js_dict.get(doc$1, "optional");
          var optional;
          if (value !== undefined) {
            var match = Js_json.classify(Caml_option.valFromOption(value));
            if (typeof match === "number") {
              switch (match) {
                case /* JSONFalse */0 :
                    optional = false;
                    break;
                case /* JSONTrue */1 :
                    optional = true;
                    break;
                case /* JSONNull */2 :
                    throw {
                          RE_EXN_ID: "Assert_failure",
                          _1: [
                            "docgen.res",
                            116,
                            17
                          ],
                          Error: new Error()
                        };
                
              }
            } else {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "docgen.res",
                      116,
                      17
                    ],
                    Error: new Error()
                  };
            }
          } else {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "docgen.res",
                    118,
                    18
                  ],
                  Error: new Error()
                };
          }
          return {
                  fieldName: fieldName,
                  docstrings: docstrings,
                  signature: signature,
                  optional: optional,
                  deprecated: deprecated
                };
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "docgen.res",
                124,
                11
              ],
              Error: new Error()
            };
      });
  return {
          TAG: 0,
          fieldDocs: fields$1,
          [Symbol.for("name")]: "Record"
        };
}

function decodeConstructorFields(fields) {
  var fields$1 = fields.map(function (field) {
        var doc = Js_json.classify(field);
        if (typeof doc === "number") {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "docgen.res",
                  143,
                  11
                ],
                Error: new Error()
              };
        }
        if (doc.TAG === /* JSONObject */2) {
          var doc$1 = doc._0;
          var constructorName = decodeStringByField(doc$1, "constructorName");
          var docstrings = decodeDocstring(doc$1);
          var signature = decodeStringByField(doc$1, "signature");
          var deprecated = decodeDepreacted(doc$1);
          return {
                  constructorName: constructorName,
                  docstrings: docstrings,
                  signature: signature,
                  deprecated: deprecated
                };
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "docgen.res",
                143,
                11
              ],
              Error: new Error()
            };
      });
  return {
          TAG: 1,
          constructorDocs: fields$1,
          [Symbol.for("name")]: "Variant"
        };
}

function decodeDetail(detail) {
  var detail$1 = Js_json.classify(detail);
  if (typeof detail$1 === "number") {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "docgen.res",
            186,
            9
          ],
          Error: new Error()
        };
  }
  if (detail$1.TAG === /* JSONObject */2) {
    var detail$2 = detail$1._0;
    var field = Js_dict.get(detail$2, "kind");
    if (field !== undefined) {
      var kind = Js_json.classify(Caml_option.valFromOption(field));
      if (typeof kind === "number") {
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "docgen.res",
                181,
                13
              ],
              Error: new Error()
            };
      }
      if (kind.TAG === /* JSONString */0) {
        switch (kind._0) {
          case "record" :
              var field$1 = Js_dict.get(detail$2, "fieldDocs");
              if (field$1 !== undefined) {
                var arr = Js_json.classify(Caml_option.valFromOption(field$1));
                if (typeof arr === "number") {
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "docgen.res",
                          164,
                          19
                        ],
                        Error: new Error()
                      };
                }
                if (arr.TAG === /* JSONArray */3) {
                  return decodeRecordFields(arr._0);
                }
                throw {
                      RE_EXN_ID: "Assert_failure",
                      _1: [
                        "docgen.res",
                        164,
                        19
                      ],
                      Error: new Error()
                    };
              } else {
                throw {
                      RE_EXN_ID: "Assert_failure",
                      _1: [
                        "docgen.res",
                        166,
                        20
                      ],
                      Error: new Error()
                    };
              }
          case "variant" :
              var field$2 = Js_dict.get(detail$2, "constructorDocs");
              if (field$2 !== undefined) {
                var arr$1 = Js_json.classify(Caml_option.valFromOption(field$2));
                if (typeof arr$1 === "number") {
                  throw {
                        RE_EXN_ID: "Assert_failure",
                        _1: [
                          "docgen.res",
                          174,
                          19
                        ],
                        Error: new Error()
                      };
                }
                if (arr$1.TAG === /* JSONArray */3) {
                  return decodeConstructorFields(arr$1._0);
                }
                throw {
                      RE_EXN_ID: "Assert_failure",
                      _1: [
                        "docgen.res",
                        174,
                        19
                      ],
                      Error: new Error()
                    };
              } else {
                throw {
                      RE_EXN_ID: "Assert_failure",
                      _1: [
                        "docgen.res",
                        176,
                        20
                      ],
                      Error: new Error()
                    };
              }
          default:
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "docgen.res",
                    178,
                    15
                  ],
                  Error: new Error()
                };
        }
      } else {
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "docgen.res",
                181,
                13
              ],
              Error: new Error()
            };
      }
    } else {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "docgen.res",
              183,
              14
            ],
            Error: new Error()
          };
    }
  } else {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "docgen.res",
            186,
            9
          ],
          Error: new Error()
        };
  }
}

function decodeValue(item) {
  var id = decodeStringByField(item, "id");
  var signature = decodeStringByField(item, "signature");
  var name = decodeStringByField(item, "name");
  var deprecated = decodeDepreacted(item);
  var docstring = decodeDocstring(item);
  return {
          TAG: 0,
          id: id,
          docstring: docstring,
          signature: signature,
          name: name,
          deprecated: deprecated,
          [Symbol.for("name")]: "Value"
        };
}

function decodeModule(item) {
  var id = decodeStringByField(item, "id");
  var name = decodeStringByField(item, "name");
  var deprecated = decodeDepreacted(item);
  var docstring = decodeDocstring(item);
  var items = Js_dict.get(item, "items");
  var items$1;
  if (items !== undefined) {
    var arr = Js_json.classify(Caml_option.valFromOption(items));
    if (typeof arr === "number") {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "docgen.res",
              228,
              11
            ],
            Error: new Error()
          };
    }
    if (arr.TAG === /* JSONArray */3) {
      items$1 = arr._0.map(decodeItem);
    } else {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "docgen.res",
              228,
              11
            ],
            Error: new Error()
          };
    }
  } else {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "docgen.res",
            230,
            12
          ],
          Error: new Error()
        };
  }
  return {
          TAG: 2,
          _0: {
            id: id,
            docstring: docstring,
            deprecated: deprecated,
            name: name,
            items: items$1
          },
          [Symbol.for("name")]: "Module"
        };
}

function decodeType(item) {
  var id = decodeStringByField(item, "id");
  var signature = decodeStringByField(item, "signature");
  var name = decodeStringByField(item, "name");
  var deprecated = decodeDepreacted(item);
  var docstring = decodeDocstring(item);
  var field = Js_dict.get(item, "detail");
  var detail = field !== undefined ? decodeDetail(Caml_option.valFromOption(field)) : undefined;
  return {
          TAG: 1,
          id: id,
          docstring: docstring,
          signature: signature,
          name: name,
          deprecated: deprecated,
          detail: detail,
          [Symbol.for("name")]: "Type"
        };
}

function decodeItem(item) {
  var value = Js_json.classify(item);
  if (typeof value === "number") {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "docgen.res",
            256,
            9
          ],
          Error: new Error()
        };
  }
  if (value.TAG === /* JSONObject */2) {
    var value$1 = value._0;
    var kind = Js_dict.get(value$1, "kind");
    if (kind === undefined) {
      return Pervasives.failwith("Cannot found `kind` field");
    }
    var type_ = Js_json.classify(Caml_option.valFromOption(kind));
    if (typeof type_ === "number") {
      return Pervasives.failwith("Expected string field for `kind`");
    }
    if (type_.TAG !== /* JSONString */0) {
      return Pervasives.failwith("Expected string field for `kind`");
    }
    var type_$1 = type_._0;
    switch (type_$1) {
      case "module" :
      case "moduleAlias" :
          return decodeModule(value$1);
      case "type" :
          return decodeType(value$1);
      case "value" :
          return decodeValue(value$1);
      default:
        return Pervasives.failwith("Not implemented " + type_$1 + "");
    }
  } else {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "docgen.res",
            256,
            9
          ],
          Error: new Error()
        };
  }
}

var decodeModuleAlias = decodeModule;

function decodeFromJson(json) {
  var mod = Js_json.classify(json);
  if (typeof mod === "number") {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "docgen.res",
            287,
            9
          ],
          Error: new Error()
        };
  }
  if (mod.TAG === /* JSONObject */2) {
    var mod$1 = mod._0;
    var name = decodeStringByField(mod$1, "name");
    var deprecated = decodeDepreacted(mod$1);
    var docstring = decodeDocstring(mod$1);
    var items = Js_dict.get(mod$1, "items");
    var items$1;
    if (items !== undefined) {
      var arr = Js_json.classify(Caml_option.valFromOption(items));
      if (typeof arr === "number") {
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "docgen.res",
                278,
                15
              ],
              Error: new Error()
            };
      }
      if (arr.TAG === /* JSONArray */3) {
        items$1 = arr._0.map(decodeItem);
      } else {
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "docgen.res",
                278,
                15
              ],
              Error: new Error()
            };
      }
    } else {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "docgen.res",
              281,
              16
            ],
            Error: new Error()
          };
    }
    return {
            name: name,
            deprecated: deprecated,
            docstring: docstring,
            items: items$1
          };
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "docgen.res",
          287,
          9
        ],
        Error: new Error()
      };
}

export {
  Schema ,
  decodeDocstring ,
  decodeStringByField ,
  decodeDepreacted ,
  decodeRecordFields ,
  decodeConstructorFields ,
  decodeDetail ,
  decodeValue ,
  decodeType ,
  decodeModuleAlias ,
  decodeModule ,
  decodeItem ,
  decodeFromJson ,
}
/* No side effect */
