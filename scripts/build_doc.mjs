// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Path from "path";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Tools_Docgen from "@rescript/tools/src/Tools_Docgen.mjs";
import * as Child_process from "child_process";

var args = process.argv;

var argsLen = args.length;

var analysisExePath = Belt_Array.getExn(args, argsLen - 2 | 0);

var compilerPath = Belt_Array.getExn(args, argsLen - 1 | 0);

var libPath = Path.join(compilerPath, "lib", "ocaml");

var entryPointLibs = [
  "js.ml",
  "belt.res",
  "dom.res"
];

var docsDecoded = entryPointLibs.map(function (libFile) {
      var entryPointFile = Path.join(libPath, libFile);
      var output = Child_process.execSync(analysisExePath + " extractDocs " + entryPointFile).toString().trim();
      return Tools_Docgen.decodeFromJson(JSON.parse(output));
    });

var docs = docsDecoded.map(function (doc) {
      var topLevelItems = Belt_Array.keepMap(doc.items, (function (item) {
              switch (item.kind) {
                case "value" :
                case "type" :
                    return item;
                case "module" :
                case "moduleAlias" :
                    return ;
                
              }
            }));
      var getModules = function (_lst, _moduleNames) {
        while(true) {
          var moduleNames = _moduleNames;
          var lst = _lst;
          if (!lst) {
            return moduleNames;
          }
          var match = lst.hd;
          var id;
          var docstrings;
          var name;
          var items;
          switch (match.kind) {
            case "value" :
            case "type" :
                _lst = lst.tl;
                continue ;
            case "module" :
                id = match.id;
                docstrings = match.docstrings;
                name = match.name;
                items = match.items;
                break;
            case "moduleAlias" :
                id = match.id;
                docstrings = match.docstrings;
                name = match.name;
                items = match.items;
                break;
            
          }
          _moduleNames = {
            hd: {
              id: id,
              docstrings: docstrings,
              name: name,
              items: items
            },
            tl: moduleNames
          };
          _lst = Belt_List.concatMany([
                lst.tl,
                Belt_List.fromArray(items)
              ]);
          continue ;
        };
      };
      var top_id = doc.name;
      var top_docstrings = doc.docstrings;
      var top_name = doc.name;
      var top = {
        id: top_id,
        docstrings: top_docstrings,
        name: top_name,
        items: topLevelItems
      };
      var submodules = Belt_List.toArray(getModules(Belt_List.fromArray(doc.items), /* [] */0));
      var result = [top].concat(submodules);
      return [
              doc.name,
              result
            ];
    });

var allModules = docs.map(function (param) {
      var submodules = Js_dict.fromArray(param[1].map(function (mod) {
                var items = Belt_Array.keepMap(mod.items, (function (item) {
                        switch (item.kind) {
                          case "value" :
                              return Js_dict.fromArray([
                                          [
                                            "id",
                                            item.id
                                          ],
                                          [
                                            "kind",
                                            "value"
                                          ],
                                          [
                                            "name",
                                            item.name
                                          ],
                                          [
                                            "docstrings",
                                            item.docstrings
                                          ],
                                          [
                                            "signature",
                                            item.signature
                                          ]
                                        ]);
                          case "type" :
                              return Js_dict.fromArray([
                                          [
                                            "id",
                                            item.id
                                          ],
                                          [
                                            "kind",
                                            "type"
                                          ],
                                          [
                                            "name",
                                            item.name
                                          ],
                                          [
                                            "docstrings",
                                            item.docstrings
                                          ],
                                          [
                                            "signature",
                                            item.signature
                                          ]
                                        ]);
                          case "module" :
                          case "moduleAlias" :
                              return ;
                          
                        }
                      }));
                var rest = Js_dict.fromArray([
                      [
                        "id",
                        mod.id
                      ],
                      [
                        "name",
                        mod.name
                      ],
                      [
                        "docstrings",
                        mod.docstrings
                      ],
                      [
                        "items",
                        items
                      ]
                    ]);
                return [
                        mod.id.split(".").join("/").toLowerCase(),
                        rest
                      ];
              }));
      return [
              param[0],
              submodules
            ];
    });

allModules.forEach(function (param) {
      Fs.writeFileSync("data/" + param[0].toLowerCase() + ".json", JSON.stringify(param[1]));
    });

var json = allModules.reduce((function (acc, param) {
          return Object.keys(param[1]).concat(acc);
        }), []).map(function (prim) {
      return prim;
    });

Fs.writeFileSync("data/api_module_paths.json", JSON.stringify(json));

var Docgen;

export {
  args ,
  argsLen ,
  analysisExePath ,
  compilerPath ,
  libPath ,
  entryPointLibs ,
  Docgen ,
  docsDecoded ,
  docs ,
  allModules ,
}
/* args Not a pure module */
