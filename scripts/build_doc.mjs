// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Path from "path";
import * as Docgen from "../src/other/Docgen.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Process from "process";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Child_process from "child_process";

var args = Process.argv;

var argsLen = args.length;

var analysisExePath = args[argsLen - 2 | 0];

var compiler_path = args[argsLen - 1 | 0];

var libPath = Path.join(compiler_path, "lib", "ocaml");

var entryPointLibs = [
  "js.ml",
  "belt.res",
  "dom.res"
];

var docs = entryPointLibs.map(function (libFile) {
      var entryPointFile = Path.join(libPath, libFile);
      var output = Child_process.execSync("" + analysisExePath + " extractDocs " + entryPointFile + "", {}).toString().trim();
      var doc = Docgen.decodeFromJson(JSON.parse(output));
      var getModules = function (_lst, _moduleNames) {
        while(true) {
          var moduleNames = _moduleNames;
          var lst = _lst;
          if (!lst) {
            return moduleNames;
          }
          var match = lst.hd;
          var id;
          var docstring;
          var name;
          var items;
          switch (match.TAG | 0) {
            case /* Value */0 :
            case /* Type */1 :
                _lst = lst.tl;
                continue ;
            case /* Module */2 :
                var match$1 = match._0;
                id = match$1.id;
                docstring = match$1.docstring;
                name = match$1.name;
                items = match$1.items;
                break;
            case /* ModuleAlias */3 :
                id = match.id;
                docstring = match.docstring;
                name = match.name;
                items = match.items;
                break;
            
          }
          _moduleNames = {
            hd: {
              id: id,
              docstring: docstring,
              name: name,
              items: items
            },
            tl: moduleNames
          };
          _lst = Belt_List.concatMany([
                lst.tl,
                Belt_List.fromArray(items)
              ]);
          continue ;
        };
      };
      var submodules = Belt_List.toArray(getModules(Belt_List.fromArray(doc.items), /* [] */0));
      return {
              name: doc.name,
              docstring: doc.docstring,
              deprecated: doc.deprecated,
              submodules: submodules
            };
    });

docs.forEach(function (doc) {
      var submodules = doc.submodules.map(function (mod) {
            var items = Belt_Array.keepMap(mod.items, (function (item) {
                    switch (item.TAG | 0) {
                      case /* Value */0 :
                          return Caml_option.some(Js_dict.fromArray([
                                          [
                                            "id",
                                            item.id
                                          ],
                                          [
                                            "name",
                                            item.name
                                          ],
                                          [
                                            "docstring",
                                            item.docstring
                                          ],
                                          [
                                            "signature",
                                            item.signature
                                          ]
                                        ]));
                      case /* Type */1 :
                      case /* Module */2 :
                      case /* ModuleAlias */3 :
                          return ;
                      
                    }
                  }));
            var rest = Js_dict.fromArray([
                  [
                    "name",
                    mod.name
                  ],
                  [
                    "docstring",
                    mod.docstring
                  ],
                  [
                    "items",
                    items
                  ]
                ]);
            return [
                    mod.id.toLowerCase(),
                    rest
                  ];
          });
      var b = Js_dict.fromArray(submodules);
      var json = Js_dict.fromArray([
            [
              "name",
              doc.name
            ],
            [
              "docstring",
              doc.docstring
            ],
            [
              "submodules",
              b
            ]
          ]);
      Fs.writeFileSync("index_data/" + doc.name.toLowerCase() + ".json", JSON.stringify(json, null, 2), "utf8");
    });

var modulePathsIndexData = docs.reduce((function (acc, doc) {
        var paths = doc.submodules.map(function (param) {
              var paths = param.id.split(".");
              return paths.slice(1).map(function (id) {
                          return id.toLowerCase();
                        });
            });
        acc[doc.name.toLowerCase()] = paths;
        return acc;
      }), {});

var json = JSON.stringify(modulePathsIndexData);

Fs.writeFileSync("index_data/modules_paths.json", json, "utf8");

export {
  args ,
  argsLen ,
  analysisExePath ,
  compiler_path ,
  libPath ,
  entryPointLibs ,
  docs ,
}
/* args Not a pure module */
