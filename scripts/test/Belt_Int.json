{
  "name": "Belt_Int",
  "docstrings": [
    "This module includes convenience methods for handling `int` types."
  ],
  "items": [
    {
      "id": "Belt_Int.toFloat",
      "kind": "value",
      "name": "toFloat",
      "signature": "let toFloat: int => float",
      "docstrings": [
        "Converts a given `int` to a `float`.\n\n  ```res example\n  Js.log(Belt.Int.toFloat(1) === 1.0) /* true */\n  ```"
      ]
    },
    {
      "id": "Belt_Int.fromFloat",
      "kind": "value",
      "name": "fromFloat",
      "signature": "let fromFloat: float => int",
      "docstrings": [
        "Converts a given `float` to an `int`.\n\n  ```res example\n  Js.log(Belt.Int.fromFloat(1.0) === 1) /* true */\n  ```"
      ]
    },
    {
      "id": "Belt_Int.fromString",
      "kind": "value",
      "name": "fromString",
      "signature": "let fromString: string => option<int>",
      "docstrings": [
        "Converts a given `string` to an `int`. Returns `Some(int)` when the input is a number, `None` otherwise.\n\n  ```res example\n  Js.log(Belt.Int.fromString(\"1\") === Some(1)) /* true */\n  ```"
      ]
    },
    {
      "id": "Belt_Int.toString",
      "kind": "value",
      "name": "toString",
      "signature": "let toString: int => string",
      "docstrings": [
        "Converts a given `int` to a `string`. Uses the JavaScript `String` constructor under the hood.\n\n  ```res example\n  Js.log(Belt.Int.toString(1) === \"1\") /* true */\n  ```"
      ]
    },
    {
      "id": "Belt_Int.+",
      "kind": "value",
      "name": "+",
      "signature": "let _: %rescript.typehole",
      "docstrings": [
        "Addition of two `int` values. Same as the addition from `Pervasives`.\n\n  ```res example\n  open Belt.Int\n  Js.log(2 + 2 === 4) /* true */\n  ```"
      ]
    },
    {
      "id": "Belt_Int.-",
      "kind": "value",
      "name": "-",
      "signature": "let _: %rescript.typehole",
      "docstrings": [
        "Subtraction of two `int` values. Same as the subtraction from `Pervasives`.\n\n  ```res example\n  open Belt.Int\n  Js.log(2 - 1 === 1) /* true */\n  ```"
      ]
    },
    {
      "id": "Belt_Int.*",
      "kind": "value",
      "name": "*",
      "signature": "let _: %rescript.typehole",
      "docstrings": [
        "Multiplication of two `int` values. Same as the multiplication from `Pervasives`.\n\n  ```res example\n  open Belt.Int\n  Js.log(2 * 2 === 4) /* true */\n  ```"
      ]
    },
    {
      "id": "Belt_Int./",
      "kind": "value",
      "name": "/",
      "signature": "let _: %rescript.typehole",
      "docstrings": [
        "Division of two `int` values. Same as the division from `Pervasives`.\n\n  ```res example\n  open Belt.Int\n  Js.log(4 / 2 === 2); /* true */\n  ```"
      ]
    }
  ]
}
