{
  "name": "Js",
  "docstrings": ["The Js module mostly contains ReScript bindings to _standard JavaScript APIs_\n  like [console.log](https://developer.mozilla.org/en-US/docs/Web/API/Console/log),\n  or the JavaScript\n  [String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String),\n  [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date), and\n  [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n  classes.\n\n  It is meant as a zero-abstraction interop layer and directly exposes JavaScript functions as they are. If you can find your API in this module, prefer this over an equivalent Belt helper. For example, prefer [Js.Array2](js/array-2) over [Belt.Array](belt/array)\n\n  ## Argument Order\n\n  For historical reasons, some APIs in the Js namespace (e.g. [Js.String](js/string)) are\n  using the data-last argument order whereas others (e.g. [Js.Date](js/date)) are using data-first.\n\n  For more information about these argument orders and the trade-offs between them, see\n  [this blog post](https://www.javierchavarri.com/data-first-and-data-last-a-comparison/).\n\n  _Eventually, all modules in the Js namespace are going to be migrated to data-first though._\n\n  In the meantime, there are several options for dealing with the data-last APIs:\n\n  ```rescript\n  /* Js.String (data-last API used with pipe last operator) */\n  Js.log(\"2019-11-10\" |> Js.String.split(\"-\"))\n  Js.log(\"ReScript\" |> Js.String.startsWith(\"Re\"))\n\n  /* Js.String (data-last API used with pipe first operator) */\n  Js.log(\"2019-11-10\"->Js.String.split(\"-\", _))\n  Js.log(\"ReScript\"->Js.String.startsWith(\"Re\", _))\n\n  /* Js.String (data-last API used without any piping) */\n  Js.log(Js.String.split(\"-\", \"2019-11-10\"))\n  Js.log(Js.String.startsWith(\"Re\", \"ReScript\"))\n  ```\n  ## Js.Xxx2 Modules\n\n  Prefer `Js.Array2` over `Js.Array`, `Js.String2` over `Js.String`, etc. The latters are old modules."],
  "items": [
  {
    "id": "Js.t",
    "kind": "type",
    "name": "t",
    "signature": "type t<'a> = 'a constraint 'a = {..}",
    "docstrings": ["JS object type"]
  }, 
  {
    "id": "Js.MapperRt",
    "kind": "moduleAlias",
    "name": "MapperRt",
    "docstrings": [],
    "items": [
    {
      "id": "Js.MapperRt.raiseWhenNotFound",
      "kind": "value",
      "name": "raiseWhenNotFound",
      "signature": "let raiseWhenNotFound: 'a => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.MapperRt.fromInt",
      "kind": "value",
      "name": "fromInt",
      "signature": "let fromInt: (int, array<int>, int) => option<int>",
      "docstrings": ["`fromInt len array int`\n  return the mapped `enum`"]
    }, 
    {
      "id": "Js.MapperRt.fromIntAssert",
      "kind": "value",
      "name": "fromIntAssert",
      "signature": "let fromIntAssert: (int, array<int>, int) => int",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Internal",
    "name": "Internal",
    "kind": "module",
    "items": [
    {
      "id": "Js.Internal.opaqueFullApply",
      "kind": "value",
      "name": "opaqueFullApply",
      "signature": "let opaqueFullApply: 'a => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Internal.run",
      "kind": "value",
      "name": "run",
      "signature": "let run: (. unit) => 'a => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Internal.opaque",
      "kind": "value",
      "name": "opaque",
      "signature": "let opaque: 'a => 'a",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.null",
    "kind": "type",
    "name": "null",
    "signature": "type null<'a> = Value('a) | Null",
    "docstrings": ["Nullable value of this type can be either null or 'a. This type is equivalent to Js.Null.t."],
    "detail": 
    {
      "kind": "variant",
      "items": [
      {
        "name": "Value",
        "docstrings": [],
        "signature": "Value('a)"
      }, 
      {
        "name": "Null",
        "docstrings": [],
        "signature": "Null"
      }]
    }
  }, 
  {
    "id": "Js.undefined",
    "kind": "type",
    "name": "undefined",
    "signature": "type undefined<+'a>",
    "docstrings": ["A value of this type can be either undefined or 'a. This type is equivalent to Js.Undefined.t."]
  }, 
  {
    "id": "Js.nullable",
    "kind": "type",
    "name": "nullable",
    "signature": "type nullable<'a> = Value('a) | Null | Undefined",
    "docstrings": [],
    "detail": 
    {
      "kind": "variant",
      "items": [
      {
        "name": "Value",
        "docstrings": [],
        "signature": "Value('a)"
      }, 
      {
        "name": "Null",
        "docstrings": [],
        "signature": "Null"
      }, 
      {
        "name": "Undefined",
        "docstrings": [],
        "signature": "Undefined"
      }]
    }
  }, 
  {
    "id": "Js.null_undefined",
    "kind": "type",
    "name": "null_undefined",
    "signature": "type null_undefined<'a> = nullable<'a>",
    "docstrings": [],
    "detail": 
    {
      "kind": "variant",
      "items": [
      {
        "name": "Value",
        "docstrings": [],
        "signature": "Value('a)"
      }, 
      {
        "name": "Null",
        "docstrings": [],
        "signature": "Null"
      }, 
      {
        "name": "Undefined",
        "docstrings": [],
        "signature": "Undefined"
      }]
    }
  }, 
  {
    "id": "Js.toOption",
    "kind": "value",
    "name": "toOption",
    "signature": "let toOption: nullable<'a> => option<'a>",
    "docstrings": []
  }, 
  {
    "id": "Js.undefinedToOption",
    "kind": "value",
    "name": "undefinedToOption",
    "signature": "let undefinedToOption: undefined<'a> => option<'a>",
    "docstrings": []
  }, 
  {
    "id": "Js.nullToOption",
    "kind": "value",
    "name": "nullToOption",
    "signature": "let nullToOption: null<'a> => option<'a>",
    "docstrings": []
  }, 
  {
    "id": "Js.isNullable",
    "kind": "value",
    "name": "isNullable",
    "signature": "let isNullable: nullable<'a> => bool",
    "docstrings": []
  }, 
  {
    "id": "Js.import",
    "kind": "value",
    "name": "import",
    "signature": "let import: 'a => promise<'a>",
    "docstrings": []
  }, 
  {
    "id": "Js.testAny",
    "kind": "value",
    "name": "testAny",
    "signature": "let testAny: 'a => bool",
    "docstrings": ["The same as {!test} except that it is more permissive on the types of input"]
  }, 
  {
    "id": "Js.promise",
    "kind": "type",
    "name": "promise",
    "signature": "type promise<+'a, +'e>",
    "docstrings": ["The promise type, defined here for interoperation across packages.\n  @deprecated please use `Js.Promise`."]
  }, 
  {
    "id": "Js.null",
    "kind": "value",
    "name": "null",
    "signature": "let null: null<'a>",
    "docstrings": ["The same as empty in `Js.Null`. Compiles to `null`."]
  }, 
  {
    "id": "Js.undefined",
    "kind": "value",
    "name": "undefined",
    "signature": "let undefined: undefined<'a>",
    "docstrings": ["The same as empty `Js.Undefined`. Compiles to `undefined`."]
  }, 
  {
    "id": "Js.typeof",
    "kind": "value",
    "name": "typeof",
    "signature": "let typeof: 'a => string",
    "docstrings": ["`typeof x` will be compiled as `typeof x` in JS. Please consider functions in\n`Js.Types` for a type safe way of reflection."]
  }, 
  {
    "id": "Js.log",
    "kind": "value",
    "name": "log",
    "signature": "let log: 'a => unit",
    "docstrings": ["Equivalent to console.log any value."]
  }, 
  {
    "id": "Js.log2",
    "kind": "value",
    "name": "log2",
    "signature": "let log2: ('a, 'b) => unit",
    "docstrings": []
  }, 
  {
    "id": "Js.log3",
    "kind": "value",
    "name": "log3",
    "signature": "let log3: ('a, 'b, 'c) => unit",
    "docstrings": []
  }, 
  {
    "id": "Js.log4",
    "kind": "value",
    "name": "log4",
    "signature": "let log4: ('a, 'b, 'c, 'd) => unit",
    "docstrings": []
  }, 
  {
    "id": "Js.logMany",
    "kind": "value",
    "name": "logMany",
    "signature": "let logMany: array<'a> => unit",
    "docstrings": ["A convenience function to console.log more than 4 arguments"]
  }, 
  {
    "id": "Js.eqNull",
    "kind": "value",
    "name": "eqNull",
    "signature": "let eqNull: ('a, null<'a>) => bool",
    "docstrings": []
  }, 
  {
    "id": "Js.eqUndefined",
    "kind": "value",
    "name": "eqUndefined",
    "signature": "let eqUndefined: ('a, undefined<'a>) => bool",
    "docstrings": []
  }, 
  {
    "id": "Js.eqNullable",
    "kind": "value",
    "name": "eqNullable",
    "signature": "let eqNullable: ('a, nullable<'a>) => bool",
    "docstrings": []
  }, 
  {
    "id": "Js.unsafe_lt",
    "kind": "value",
    "name": "unsafe_lt",
    "signature": "let unsafe_lt: ('a, 'a) => bool",
    "docstrings": ["`unsafe_lt(a, b)` will be compiled as `a < b`.\n    It is marked as unsafe, since it is impossible\n    to give a proper semantics for comparision which applies to any type"]
  }, 
  {
    "id": "Js.unsafe_le",
    "kind": "value",
    "name": "unsafe_le",
    "signature": "let unsafe_le: ('a, 'a) => bool",
    "docstrings": ["`unsafe_le(a, b) will be compiled as `a <= b`.\n   See also `Js.unsafe_lt`."]
  }, 
  {
    "id": "Js.unsafe_gt",
    "kind": "value",
    "name": "unsafe_gt",
    "signature": "let unsafe_gt: ('a, 'a) => bool",
    "docstrings": ["`unsafe_gt(a, b)` will be compiled as `a > b`.\n    See also `Js.unsafe_lt`."]
  }, 
  {
    "id": "Js.unsafe_ge",
    "kind": "value",
    "name": "unsafe_ge",
    "signature": "let unsafe_ge: ('a, 'a) => bool",
    "docstrings": ["`unsafe_ge(a, b)` will be compiled as `a >= b`.\n   See also `Js.unsafe_lt`."]
  }, 
  {
    "id": "Js.Null",
    "kind": "moduleAlias",
    "name": "Null",
    "docstrings": ["Provide utilities for `Js.null<'a>`"],
    "items": [
    {
      "id": "Js.Null.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a> = Js.null<'a> = Value('a) | Null",
      "docstrings": ["Local alias for `Js.null('a)`"],
      "detail": 
      {
        "kind": "variant",
        "items": [
        {
          "name": "Value",
          "docstrings": [],
          "signature": "Value('a)"
        }, 
        {
          "name": "Null",
          "docstrings": [],
          "signature": "Null"
        }]
      }
    }, 
    {
      "id": "Js.Null.return",
      "kind": "value",
      "name": "return",
      "signature": "let return: 'a => t<'a>",
      "docstrings": ["Constructs a value of `Js.null('a)` containing a value of `'a`."]
    }, 
    {
      "id": "Js.Null.test",
      "kind": "value",
      "name": "test",
      "deprecated": "Use = Js.null directly ",
      "signature": "let test: t<'a> => bool",
      "docstrings": ["Returns `true` if the given value is empty (`null`), `false` otherwise."]
    }, 
    {
      "id": "Js.Null.empty",
      "kind": "value",
      "name": "empty",
      "signature": "let empty: t<'a>",
      "docstrings": ["The empty value, `null`"]
    }, 
    {
      "id": "Js.Null.getUnsafe",
      "kind": "value",
      "name": "getUnsafe",
      "signature": "let getUnsafe: t<'a> => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Null.getExn",
      "kind": "value",
      "name": "getExn",
      "signature": "let getExn: t<'a> => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Null.bind",
      "kind": "value",
      "name": "bind",
      "signature": "let bind: (t<'a>, (. 'a) => 'b) => t<'b>",
      "docstrings": ["Maps the contained value using the given function.\n\nIf `Js.null('a)` contains a value, that value is unwrapped, mapped to a `'b`\nusing the given function `'a => 'b`, then wrapped back up and returned as\n`Js.null('b)`.\n\n```rescript\nlet maybeGreetWorld = (maybeGreeting: Js.null<string>) =>\n  Js.Null.bind(maybeGreeting, (. greeting) => greeting ++ \" world!\")\n```"]
    }, 
    {
      "id": "Js.Null.iter",
      "kind": "value",
      "name": "iter",
      "signature": "let iter: (t<'a>, (. 'a) => unit) => unit",
      "docstrings": ["Iterates over the contained value with the given function.\nIf `Js.null('a)` contains a value, that value is unwrapped and applied to the given function.\n\n```rescript\nlet maybeSay = (maybeMessage: Js.null<string>) =>\n  Js.Null.iter(maybeMessage, (. message) => Js.log(message))\n```"]
    }, 
    {
      "id": "Js.Null.fromOption",
      "kind": "value",
      "name": "fromOption",
      "signature": "let fromOption: option<'a> => t<'a>",
      "docstrings": ["Maps `option('a)` to `Js.null('a)`.\n`Some(a)` => `a`\n`None` => `empty`"]
    }, 
    {
      "id": "Js.Null.from_opt",
      "kind": "value",
      "name": "from_opt",
      "deprecated": "Use fromOption instead",
      "signature": "let from_opt: option<'a> => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Null.toOption",
      "kind": "value",
      "name": "toOption",
      "signature": "let toOption: t<'a> => option<'a>",
      "docstrings": ["Maps `Js.null('a)` to `option('a)`.\n`a` => `Some(a)`\n`empty` => `None`"]
    }, 
    {
      "id": "Js.Null.to_opt",
      "kind": "value",
      "name": "to_opt",
      "deprecated": "Use toOption instead",
      "signature": "let to_opt: t<'a> => option<'a>",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Undefined",
    "kind": "moduleAlias",
    "name": "Undefined",
    "docstrings": ["Provide utilities for `Js.undefined<'a>`"],
    "items": [
    {
      "id": "Js.Undefined.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a> = Js.undefined<'a>",
      "docstrings": ["Local alias for `Js.undefined('a)`"]
    }, 
    {
      "id": "Js.Undefined.return",
      "kind": "value",
      "name": "return",
      "signature": "let return: 'a => t<'a>",
      "docstrings": ["Constructs a value of `Js.undefined('a)` containing a value of `'a`."]
    }, 
    {
      "id": "Js.Undefined.test",
      "kind": "value",
      "name": "test",
      "deprecated": "Use = Js.undefined directly",
      "signature": "let test: t<'a> => bool",
      "docstrings": ["Returns `true` if the given value is empty (undefined), `false` otherwise."]
    }, 
    {
      "id": "Js.Undefined.testAny",
      "kind": "value",
      "name": "testAny",
      "signature": "let testAny: 'a => bool",
      "docstrings": ["Returns `true` if the given value is empty (undefined).\n\n**since 1.6.1**"]
    }, 
    {
      "id": "Js.Undefined.empty",
      "kind": "value",
      "name": "empty",
      "signature": "let empty: t<'a>",
      "docstrings": ["The empty value, `undefined`"]
    }, 
    {
      "id": "Js.Undefined.getUnsafe",
      "kind": "value",
      "name": "getUnsafe",
      "signature": "let getUnsafe: t<'a> => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Undefined.getExn",
      "kind": "value",
      "name": "getExn",
      "signature": "let getExn: t<'a> => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Undefined.bind",
      "kind": "value",
      "name": "bind",
      "signature": "let bind: (t<'a>, (. 'a) => 'b) => t<'b>",
      "docstrings": ["Maps the contained value using the given function.\nIf `Js.undefined('a)` contains a value, that value is unwrapped, mapped to a\n`'b` using the given function `a' => 'b`, then wrapped back up and returned as\n`Js.undefined('b)`.\n\n```rescript\nlet maybeGreetWorld = (maybeGreeting: Js.undefined<string>) =>\n  Js.Undefined.bind(maybeGreeting, (. greeting) => greeting ++ \" world!\")\n```"]
    }, 
    {
      "id": "Js.Undefined.iter",
      "kind": "value",
      "name": "iter",
      "signature": "let iter: (t<'a>, (. 'a) => unit) => unit",
      "docstrings": ["Iterates over the contained value with the given function. If\n`Js.undefined('a)` contains a value, that value is unwrapped and applied to the\ngiven function.\n\n```rescript\nlet maybeSay = (maybeMessage: Js.undefined<string>) =>\n  Js.Undefined.iter(maybeMessage, (. message) => Js.log(message))\n```"]
    }, 
    {
      "id": "Js.Undefined.fromOption",
      "kind": "value",
      "name": "fromOption",
      "signature": "let fromOption: option<'a> => t<'a>",
      "docstrings": ["Maps `option('a)` to `Js.undefined('a)`.\n`Some(a)` => `a`\n`None` => `empty`"]
    }, 
    {
      "id": "Js.Undefined.from_opt",
      "kind": "value",
      "name": "from_opt",
      "deprecated": "Use fromOption instead",
      "signature": "let from_opt: option<'a> => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Undefined.toOption",
      "kind": "value",
      "name": "toOption",
      "signature": "let toOption: t<'a> => option<'a>",
      "docstrings": ["Maps `Js.undefined('a)` to `option('a)`\n`a` => `Some(a)`\n`empty` => `None`"]
    }, 
    {
      "id": "Js.Undefined.to_opt",
      "kind": "value",
      "name": "to_opt",
      "deprecated": "use toOption instead",
      "signature": "let to_opt: t<'a> => option<'a>",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Nullable",
    "kind": "moduleAlias",
    "name": "Nullable",
    "docstrings": ["Provide utilities for `Js.null_undefined`"],
    "items": [
    {
      "id": "Js.Nullable.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a> = Js.nullable<'a> = Value('a) | Null | Undefined",
      "docstrings": ["Local alias for `Js.null_undefined('a)`."],
      "detail": 
      {
        "kind": "variant",
        "items": [
        {
          "name": "Value",
          "docstrings": [],
          "signature": "Value('a)"
        }, 
        {
          "name": "Null",
          "docstrings": [],
          "signature": "Null"
        }, 
        {
          "name": "Undefined",
          "docstrings": [],
          "signature": "Undefined"
        }]
      }
    }, 
    {
      "id": "Js.Nullable.return",
      "kind": "value",
      "name": "return",
      "signature": "let return: 'a => t<'a>",
      "docstrings": ["Constructs a value of `Js.null_undefined('a)` containing a value of `'a`."]
    }, 
    {
      "id": "Js.Nullable.isNullable",
      "kind": "value",
      "name": "isNullable",
      "signature": "let isNullable: t<'a> => bool",
      "docstrings": ["Returns `true` if the given value is null or undefined, `false` otherwise."]
    }, 
    {
      "id": "Js.Nullable.null",
      "kind": "value",
      "name": "null",
      "signature": "let null: t<'a>",
      "docstrings": ["The null value of type `Js.null_undefined('a)`."]
    }, 
    {
      "id": "Js.Nullable.undefined",
      "kind": "value",
      "name": "undefined",
      "signature": "let undefined: t<'a>",
      "docstrings": ["The undefined value of type `Js.null_undefined('a)`."]
    }, 
    {
      "id": "Js.Nullable.bind",
      "kind": "value",
      "name": "bind",
      "signature": "let bind: (t<'a>, (. 'a) => 'b) => t<'b>",
      "docstrings": ["Maps the contained value using the given function.\n\nIf `Js.null_undefined('a)` contains a value, that value is unwrapped, mapped to\na `'b` using the given function `a' => 'b`, then wrapped back up and returned\nas `Js.null_undefined('b)`.\n\n```rescript\nlet maybeGreetWorld = (maybeGreeting: Js.null_undefined<string>) =>\n  Js.Null_undefined.bind(maybeGreeting, (. greeting) => greeting ++ \" world!\")\n```"]
    }, 
    {
      "id": "Js.Nullable.iter",
      "kind": "value",
      "name": "iter",
      "signature": "let iter: (t<'a>, (. 'a) => unit) => unit",
      "docstrings": ["Iterates over the contained value with the given function.\nIf `Js.null_undefined('a)` contains a value, that value is unwrapped and applied to the given function.\n\n```rescript\nlet maybeSay = (maybeMessage: Js.null_undefined<string>) =>\n  Js.Null_undefined.iter(maybeMessage, (. message) => Js.log(message))\n```"]
    }, 
    {
      "id": "Js.Nullable.fromOption",
      "kind": "value",
      "name": "fromOption",
      "signature": "let fromOption: option<'a> => t<'a>",
      "docstrings": ["Maps `option('a)` to `Js.null_undefined('a)`.\n`Some(a)` => `a`\n`None` => `undefined`"]
    }, 
    {
      "id": "Js.Nullable.from_opt",
      "kind": "value",
      "name": "from_opt",
      "deprecated": "Use fromOption instead",
      "signature": "let from_opt: option<'a> => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Nullable.toOption",
      "kind": "value",
      "name": "toOption",
      "signature": "let toOption: t<'a> => option<'a>",
      "docstrings": ["Maps `Js.null_undefined('a)` to `option('a)`.\n`a` => `Some(a)`\n`undefined` => `None`\n`null` => `None`"]
    }, 
    {
      "id": "Js.Nullable.to_opt",
      "kind": "value",
      "name": "to_opt",
      "deprecated": "Use toOption instead",
      "signature": "let to_opt: t<'a> => option<'a>",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Null_undefined",
    "kind": "moduleAlias",
    "name": "Null_undefined",
    "docstrings": ["@deprecated please use `Js.Nullable`"],
    "items": [
    {
      "id": "Js.Null_undefined.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a> = Js.nullable<'a> = Value('a) | Null | Undefined",
      "docstrings": ["Local alias for `Js.null_undefined('a)`."],
      "detail": 
      {
        "kind": "variant",
        "items": [
        {
          "name": "Value",
          "docstrings": [],
          "signature": "Value('a)"
        }, 
        {
          "name": "Null",
          "docstrings": [],
          "signature": "Null"
        }, 
        {
          "name": "Undefined",
          "docstrings": [],
          "signature": "Undefined"
        }]
      }
    }, 
    {
      "id": "Js.Null_undefined.return",
      "kind": "value",
      "name": "return",
      "signature": "let return: 'a => t<'a>",
      "docstrings": ["Constructs a value of `Js.null_undefined('a)` containing a value of `'a`."]
    }, 
    {
      "id": "Js.Null_undefined.isNullable",
      "kind": "value",
      "name": "isNullable",
      "signature": "let isNullable: t<'a> => bool",
      "docstrings": ["Returns `true` if the given value is null or undefined, `false` otherwise."]
    }, 
    {
      "id": "Js.Null_undefined.null",
      "kind": "value",
      "name": "null",
      "signature": "let null: t<'a>",
      "docstrings": ["The null value of type `Js.null_undefined('a)`."]
    }, 
    {
      "id": "Js.Null_undefined.undefined",
      "kind": "value",
      "name": "undefined",
      "signature": "let undefined: t<'a>",
      "docstrings": ["The undefined value of type `Js.null_undefined('a)`."]
    }, 
    {
      "id": "Js.Null_undefined.bind",
      "kind": "value",
      "name": "bind",
      "signature": "let bind: (t<'a>, (. 'a) => 'b) => t<'b>",
      "docstrings": ["Maps the contained value using the given function.\n\nIf `Js.null_undefined('a)` contains a value, that value is unwrapped, mapped to\na `'b` using the given function `a' => 'b`, then wrapped back up and returned\nas `Js.null_undefined('b)`.\n\n```rescript\nlet maybeGreetWorld = (maybeGreeting: Js.null_undefined<string>) =>\n  Js.Null_undefined.bind(maybeGreeting, (. greeting) => greeting ++ \" world!\")\n```"]
    }, 
    {
      "id": "Js.Null_undefined.iter",
      "kind": "value",
      "name": "iter",
      "signature": "let iter: (t<'a>, (. 'a) => unit) => unit",
      "docstrings": ["Iterates over the contained value with the given function.\nIf `Js.null_undefined('a)` contains a value, that value is unwrapped and applied to the given function.\n\n```rescript\nlet maybeSay = (maybeMessage: Js.null_undefined<string>) =>\n  Js.Null_undefined.iter(maybeMessage, (. message) => Js.log(message))\n```"]
    }, 
    {
      "id": "Js.Null_undefined.fromOption",
      "kind": "value",
      "name": "fromOption",
      "signature": "let fromOption: option<'a> => t<'a>",
      "docstrings": ["Maps `option('a)` to `Js.null_undefined('a)`.\n`Some(a)` => `a`\n`None` => `undefined`"]
    }, 
    {
      "id": "Js.Null_undefined.from_opt",
      "kind": "value",
      "name": "from_opt",
      "deprecated": "Use fromOption instead",
      "signature": "let from_opt: option<'a> => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Null_undefined.toOption",
      "kind": "value",
      "name": "toOption",
      "signature": "let toOption: t<'a> => option<'a>",
      "docstrings": ["Maps `Js.null_undefined('a)` to `option('a)`.\n`a` => `Some(a)`\n`undefined` => `None`\n`null` => `None`"]
    }, 
    {
      "id": "Js.Null_undefined.to_opt",
      "kind": "value",
      "name": "to_opt",
      "deprecated": "Use toOption instead",
      "signature": "let to_opt: t<'a> => option<'a>",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Exn",
    "kind": "moduleAlias",
    "name": "Exn",
    "docstrings": ["Provide utilities for dealing with Js exceptions"],
    "items": [
    {
      "id": "Js.Exn.t",
      "kind": "type",
      "name": "t",
      "signature": "type t",
      "docstrings": ["Represents a JS exception"]
    }, 
    {
      "id": "Js.Exn.asJsExn",
      "kind": "value",
      "name": "asJsExn",
      "signature": "let asJsExn: exn => option<t>",
      "docstrings": []
    }, 
    {
      "id": "Js.Exn.stack",
      "kind": "value",
      "name": "stack",
      "signature": "let stack: t => option<string>",
      "docstrings": []
    }, 
    {
      "id": "Js.Exn.message",
      "kind": "value",
      "name": "message",
      "signature": "let message: t => option<string>",
      "docstrings": []
    }, 
    {
      "id": "Js.Exn.name",
      "kind": "value",
      "name": "name",
      "signature": "let name: t => option<string>",
      "docstrings": []
    }, 
    {
      "id": "Js.Exn.fileName",
      "kind": "value",
      "name": "fileName",
      "signature": "let fileName: t => option<string>",
      "docstrings": []
    }, 
    {
      "id": "Js.Exn.isCamlExceptionOrOpenVariant",
      "kind": "value",
      "name": "isCamlExceptionOrOpenVariant",
      "signature": "let isCamlExceptionOrOpenVariant: 'a => bool",
      "docstrings": ["internal use only"]
    }, 
    {
      "id": "Js.Exn.anyToExnInternal",
      "kind": "value",
      "name": "anyToExnInternal",
      "signature": "let anyToExnInternal: 'a => exn",
      "docstrings": ["`anyToExnInternal obj` will take any value `obj` and wrap it\n  in a Js.Exn.Error if given value is not an exn already. If\n  `obj` is an exn, it will return `obj` without any changes.\n\n  This function is mostly useful for cases where you want to unify a type of a value\n  that potentially is either exn, a JS error, or any other JS value really (e.g. for\n  a value passed to a Promise.catch callback)\n\n  **IMPORTANT**: This is an internal API and may be changed / removed any time in the future.\n\n  ```rescript\n  switch (Js.Exn.unsafeAnyToExn(\"test\")) {\n  | Js.Exn.Error(v) =>\n    switch(Js.Exn.message(v)) {\n    | Some(str) => Js.log(\"We won't end up here\")\n    | None => Js.log2(\"We will land here: \", v)\n    }\n  }\n  ```"]
    }, 
    {
      "id": "Js.Exn.raiseError",
      "kind": "value",
      "name": "raiseError",
      "signature": "let raiseError: string => 'a",
      "docstrings": ["Raise Js exception Error object with stacktrace"]
    }, 
    {
      "id": "Js.Exn.raiseEvalError",
      "kind": "value",
      "name": "raiseEvalError",
      "signature": "let raiseEvalError: string => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Exn.raiseRangeError",
      "kind": "value",
      "name": "raiseRangeError",
      "signature": "let raiseRangeError: string => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Exn.raiseReferenceError",
      "kind": "value",
      "name": "raiseReferenceError",
      "signature": "let raiseReferenceError: string => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Exn.raiseSyntaxError",
      "kind": "value",
      "name": "raiseSyntaxError",
      "signature": "let raiseSyntaxError: string => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Exn.raiseTypeError",
      "kind": "value",
      "name": "raiseTypeError",
      "signature": "let raiseTypeError: string => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Exn.raiseUriError",
      "kind": "value",
      "name": "raiseUriError",
      "signature": "let raiseUriError: string => 'a",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Array",
    "kind": "moduleAlias",
    "name": "Array",
    "docstrings": ["Provide bindings to JS array"],
    "items": [
    {
      "id": "Js.Array.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a> = array<'a>",
      "docstrings": ["The type used to describe a JavaScript array."]
    }, 
    {
      "id": "Js.Array.array_like",
      "kind": "type",
      "name": "array_like",
      "signature": "type array_like<'a> = Js_array2.array_like<'a>",
      "docstrings": ["A type used to describe JavaScript objects that are like an array or are iterable."]
    }, 
    {
      "id": "Js.Array.from",
      "kind": "value",
      "name": "from",
      "signature": "let from: array_like<'a> => array<'a>",
      "docstrings": ["Creates a shallow copy of an array from an array-like object. See [`Array.from`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) on MDN.\n\n  ```rescript\n  let strArr = Js.String.castToArrayLike(\"abcd\")\n  Js.Array.from(strArr) == [\"a\", \"b\", \"c\", \"d\"]\n  ```"]
    }, 
    {
      "id": "Js.Array.fromMap",
      "kind": "value",
      "name": "fromMap",
      "signature": "let fromMap: (array_like<'a>, 'a => 'b) => array<'b>",
      "docstrings": ["Creates a new array by applying a function (the second argument) to each item\n  in the `array_like` first argument.  See\n  [`Array.from`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\n  on MDN.\n\n  ```rescript\n  let strArr = Js.String.castToArrayLike(\"abcd\")\n  let code = s => Js.String.charCodeAt(0, s)\n  Js.Array.fromMap(strArr, code) == [97.0, 98.0, 99.0, 100.0]\n  ```"]
    }, 
    {
      "id": "Js.Array.isArray",
      "kind": "value",
      "name": "isArray",
      "signature": "let isArray: 'a => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.length",
      "kind": "value",
      "name": "length",
      "signature": "let length: array<'a> => int",
      "docstrings": ["Returns the number of elements in the array. See [`Array.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) on MDN."]
    }, 
    {
      "id": "Js.Array.copyWithin",
      "kind": "value",
      "name": "copyWithin",
      "signature": "let copyWithin: (~to_: int, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.copyWithinFrom",
      "kind": "value",
      "name": "copyWithinFrom",
      "signature": "let copyWithinFrom: (~to_: int, ~from: int, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.copyWithinFromRange",
      "kind": "value",
      "name": "copyWithinFromRange",
      "signature": "let copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.fillInPlace",
      "kind": "value",
      "name": "fillInPlace",
      "signature": "let fillInPlace: ('a, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.fillFromInPlace",
      "kind": "value",
      "name": "fillFromInPlace",
      "signature": "let fillFromInPlace: ('a, ~from: int, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.fillRangeInPlace",
      "kind": "value",
      "name": "fillRangeInPlace",
      "signature": "let fillRangeInPlace: ('a, ~start: int, ~end_: int, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.pop",
      "kind": "value",
      "name": "pop",
      "signature": "let pop: t<'a> => option<'a>",
      "docstrings": ["If the array is not empty, removes the last element and returns it as `Some(value)`; returns `None` if the array is empty. *This function modifies the original array.* See [`Array.pop`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop) on MDN.\n\n  ```rescript\n  let arr = [100, 101, 102, 103, 104]\n  Js.Array.pop(arr) == Some(104)\n  arr == [100, 101, 102, 103]\n\n  let empty: array<int> = []\n  Js.Array.pop(empty) == None\n  ```"]
    }, 
    {
      "id": "Js.Array.push",
      "kind": "value",
      "name": "push",
      "signature": "let push: ('a, t<'a>) => int",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.pushMany",
      "kind": "value",
      "name": "pushMany",
      "signature": "let pushMany: (array<'a>, t<'a>) => int",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.reverseInPlace",
      "kind": "value",
      "name": "reverseInPlace",
      "signature": "let reverseInPlace: t<'a> => t<'a>",
      "docstrings": ["Returns an array with the elements of the input array in reverse order. *This function modifies the original array.* See [`Array.reverse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse) on MDN.\n\n  ```rescript\n  let arr = [\"ant\", \"bee\", \"cat\"]\n  Js.Array.reverseInPlace(arr) == [\"cat\", \"bee\", \"ant\"]\n  arr == [\"cat\", \"bee\", \"ant\"]\n  ```"]
    }, 
    {
      "id": "Js.Array.shift",
      "kind": "value",
      "name": "shift",
      "signature": "let shift: t<'a> => option<'a>",
      "docstrings": ["If the array is not empty, removes the first element and returns it as `Some(value)`; returns `None` if the array is empty. *This function modifies the original array.* See [`Array.shift`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift) on MDN.\n\n  ```rescript\n  let arr = [100, 101, 102, 103, 104]\n  Js.Array.shift(arr) == Some(100)\n  arr == [101, 102, 103, 104]\n\n  let empty: array<int> = []\n  Js.Array.shift(empty) == None\n  ```"]
    }, 
    {
      "id": "Js.Array.sortInPlace",
      "kind": "value",
      "name": "sortInPlace",
      "signature": "let sortInPlace: t<'a> => t<'a>",
      "docstrings": ["Sorts the given array in place and returns the sorted array. JavaScript sorts the array by converting the arguments to UTF-16 strings and sorting them. See the second example with sorting numbers, which does not do a numeric sort. *This function modifies the original array.* See [`Array.sort`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) on MDN.\n\n  ```rescript\n  let words = [\"bee\", \"dog\", \"ant\", \"cat\"]\n  Js.Array.sortInPlace(words) == [\"ant\", \"bee\", \"cat\", \"dog\"]\n  words == [\"ant\", \"bee\", \"cat\", \"dog\"]\n\n  let numbers = [3, 30, 10, 1, 20, 2]\n  Js.Array.sortInPlace(numbers) == [1, 10, 2, 20, 3, 30]\n  numbers == [1, 10, 2, 20, 3, 30]\n  ```"]
    }, 
    {
      "id": "Js.Array.sortInPlaceWith",
      "kind": "value",
      "name": "sortInPlaceWith",
      "signature": "let sortInPlaceWith: (('a, 'a) => int, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.spliceInPlace",
      "kind": "value",
      "name": "spliceInPlace",
      "signature": "let spliceInPlace: (~pos: int, ~remove: int, ~add: array<'a>, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.removeFromInPlace",
      "kind": "value",
      "name": "removeFromInPlace",
      "signature": "let removeFromInPlace: (~pos: int, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.removeCountInPlace",
      "kind": "value",
      "name": "removeCountInPlace",
      "signature": "let removeCountInPlace: (~pos: int, ~count: int, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.unshift",
      "kind": "value",
      "name": "unshift",
      "signature": "let unshift: ('a, t<'a>) => int",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.unshiftMany",
      "kind": "value",
      "name": "unshiftMany",
      "signature": "let unshiftMany: (array<'a>, t<'a>) => int",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.concat",
      "kind": "value",
      "name": "concat",
      "signature": "let concat: (t<'a>, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.concatMany",
      "kind": "value",
      "name": "concatMany",
      "signature": "let concatMany: (array<t<'a>>, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.includes",
      "kind": "value",
      "name": "includes",
      "signature": "let includes: ('a, t<'a>) => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.indexOf",
      "kind": "value",
      "name": "indexOf",
      "signature": "let indexOf: ('a, t<'a>) => int",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.indexOfFrom",
      "kind": "value",
      "name": "indexOfFrom",
      "signature": "let indexOfFrom: ('a, ~from: int, t<'a>) => int",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.join",
      "kind": "value",
      "name": "join",
      "deprecated": "please use joinWith instead",
      "signature": "let join: t<'a> => string",
      "docstrings": ["@deprecated: Use `joinWith` instead."]
    }, 
    {
      "id": "Js.Array.joinWith",
      "kind": "value",
      "name": "joinWith",
      "signature": "let joinWith: (string, t<'a>) => string",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.lastIndexOf",
      "kind": "value",
      "name": "lastIndexOf",
      "signature": "let lastIndexOf: ('a, t<'a>) => int",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.lastIndexOfFrom",
      "kind": "value",
      "name": "lastIndexOfFrom",
      "signature": "let lastIndexOfFrom: ('a, ~from: int, t<'a>) => int",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.slice",
      "kind": "value",
      "name": "slice",
      "signature": "let slice: (~start: int, ~end_: int, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.copy",
      "kind": "value",
      "name": "copy",
      "signature": "let copy: t<'a> => t<'a>",
      "docstrings": ["Returns a copy of the entire array. Same as `Js.Array.Slice(~start=0,\n  ~end_=Js.Array.length(arr), arr)`. See\n  [`Array.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)\n  on MDN."]
    }, 
    {
      "id": "Js.Array.sliceFrom",
      "kind": "value",
      "name": "sliceFrom",
      "signature": "let sliceFrom: (int, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.toString",
      "kind": "value",
      "name": "toString",
      "signature": "let toString: t<'a> => string",
      "docstrings": ["Converts the array to a string. Each element is converted to a string using\n  JavaScript. Unlike the JavaScript `Array.toString()`, all elements in a\n  ReasonML array must have the same type. See\n  [`Array.toString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString)\n  on MDN.\n\n  ```rescript\n  Js.Array.toString([3.5, 4.6, 7.8]) == \"3.5,4.6,7.8\"\n  Js.Array.toString([\"a\", \"b\", \"c\"]) == \"a,b,c\"\n  ```"]
    }, 
    {
      "id": "Js.Array.toLocaleString",
      "kind": "value",
      "name": "toLocaleString",
      "signature": "let toLocaleString: t<'a> => string",
      "docstrings": ["Converts the array to a string using the conventions of the current locale.\n  Each element is converted to a string using JavaScript. Unlike the JavaScript\n  `Array.toLocaleString()`, all elements in a ReasonML array must have the same\ntype. See\n[`Array.toLocaleString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString)\non MDN.\n\n  ```rescript\n  Js.Array.toLocaleString([Js.Date.make()])\n  // returns \"3/19/2020, 10:52:11 AM\" for locale en_US.utf8\n  // returns \"2020-3-19 10:52:11\" for locale de_DE.utf8\n  ```"]
    }, 
    {
      "id": "Js.Array.every",
      "kind": "value",
      "name": "every",
      "signature": "let every: ('a => bool, t<'a>) => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.everyi",
      "kind": "value",
      "name": "everyi",
      "signature": "let everyi: (('a, int) => bool, t<'a>) => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.filter",
      "kind": "value",
      "name": "filter",
      "signature": "let filter: ('a => bool, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.filteri",
      "kind": "value",
      "name": "filteri",
      "signature": "let filteri: (('a, int) => bool, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.find",
      "kind": "value",
      "name": "find",
      "signature": "let find: ('a => bool, t<'a>) => option<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.findi",
      "kind": "value",
      "name": "findi",
      "signature": "let findi: (('a, int) => bool, t<'a>) => option<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.findIndex",
      "kind": "value",
      "name": "findIndex",
      "signature": "let findIndex: ('a => bool, t<'a>) => int",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.findIndexi",
      "kind": "value",
      "name": "findIndexi",
      "signature": "let findIndexi: (('a, int) => bool, t<'a>) => int",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.forEach",
      "kind": "value",
      "name": "forEach",
      "signature": "let forEach: ('a => unit, t<'a>) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.forEachi",
      "kind": "value",
      "name": "forEachi",
      "signature": "let forEachi: (('a, int) => unit, t<'a>) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.map",
      "kind": "value",
      "name": "map",
      "signature": "let map: ('a => 'b, t<'a>) => t<'b>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.mapi",
      "kind": "value",
      "name": "mapi",
      "signature": "let mapi: (('a, int) => 'b, t<'a>) => t<'b>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.reduce",
      "kind": "value",
      "name": "reduce",
      "signature": "let reduce: (('a, 'b) => 'a, 'a, t<'b>) => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.reducei",
      "kind": "value",
      "name": "reducei",
      "signature": "let reducei: (('a, 'b, int) => 'a, 'a, t<'b>) => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.reduceRight",
      "kind": "value",
      "name": "reduceRight",
      "signature": "let reduceRight: (('a, 'b) => 'a, 'a, t<'b>) => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.reduceRighti",
      "kind": "value",
      "name": "reduceRighti",
      "signature": "let reduceRighti: (('a, 'b, int) => 'a, 'a, t<'b>) => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.some",
      "kind": "value",
      "name": "some",
      "signature": "let some: ('a => bool, t<'a>) => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.somei",
      "kind": "value",
      "name": "somei",
      "signature": "let somei: (('a, int) => bool, t<'a>) => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.Array.unsafe_get",
      "kind": "value",
      "name": "unsafe_get",
      "signature": "let unsafe_get: (array<'a>, int) => 'a",
      "docstrings": ["Returns the value at the given position in the array if the position is in\nbounds; returns the JavaScript value `undefined` otherwise.\n\n```rescript\nlet arr = [100, 101, 102, 103]\nJs.Array.unsafe_get(arr, 3) == 103\nJs.Array.unsafe_get(arr, 4) // returns undefined\n```"]
    }, 
    {
      "id": "Js.Array.unsafe_set",
      "kind": "value",
      "name": "unsafe_set",
      "signature": "let unsafe_set: (array<'a>, int, 'a) => unit",
      "docstrings": ["Sets the value at the given position in the array if the position is in bounds.\nIf the index is out of bounds, well, “here there be dragons.“ *This function\n  modifies the original array.*\n\n```rescript\nlet arr = [100, 101, 102, 103]\nJs.Array.unsafe_set(arr, 3, 99)\n// result is [100, 101, 102, 99]\n\nJs.Array.unsafe_set(arr, 4, 88)\n// result is [100, 101, 102, 99, 88]\n\nJs.Array.unsafe_set(arr, 6, 77)\n// result is [100, 101, 102, 99, 88, <1 empty item>, 77]\n\nJs.Array.unsafe_set(arr, -1, 66)\n// you don't want to know.\n```"]
    }]
  }, 
  {
    "id": "Js.Array2",
    "kind": "moduleAlias",
    "name": "Array2",
    "docstrings": ["Provide bindings to JS array"],
    "items": [
    {
      "id": "Js.Array2.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a> = array<'a>",
      "docstrings": ["The type used to describe a JavaScript array."]
    }, 
    {
      "id": "Js.Array2.array_like",
      "kind": "type",
      "name": "array_like",
      "signature": "type array_like<'a>",
      "docstrings": ["A type used to describe JavaScript objects that are like an array or are iterable."]
    }, 
    {
      "id": "Js.Array2.from",
      "kind": "value",
      "name": "from",
      "signature": "let from: array_like<'a> => array<'a>",
      "docstrings": ["Creates a shallow copy of an array from an array-like object. See\n[`Array.from`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\non MDN.\n\n```rescript\nlet strArr = Js.String.castToArrayLike(\"abcd\")\nJs.Array2.from(strArr) == [\"a\", \"b\", \"c\", \"d\"]\n```"]
    }, 
    {
      "id": "Js.Array2.fromMap",
      "kind": "value",
      "name": "fromMap",
      "signature": "let fromMap: (array_like<'a>, 'a => 'b) => array<'b>",
      "docstrings": ["Creates a new array by applying a function (the second argument) to each item\nin the `array_like` first argument.  See\n[`Array.from`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\non MDN.\n\n```rescript\nlet strArr = Js.String.castToArrayLike(\"abcd\")\nlet code = s => Js.String.charCodeAt(0, s)\nJs.Array2.fromMap(strArr, code) == [97.0, 98.0, 99.0, 100.0]\n```"]
    }, 
    {
      "id": "Js.Array2.isArray",
      "kind": "value",
      "name": "isArray",
      "signature": "let isArray: 'a => bool",
      "docstrings": ["Returns `true` if its argument is an array; `false` otherwise. This is a runtime check, which is why the second example returns `true`---a list is internally represented as a nested JavaScript array.\n\n```rescript\nJs.Array2.isArray([5, 2, 3, 1, 4]) == true\nJs.Array2.isArray(list{5, 2, 3, 1, 4}) == true\nJs.Array2.isArray(\"abcd\") == false\n```"]
    }, 
    {
      "id": "Js.Array2.length",
      "kind": "value",
      "name": "length",
      "signature": "let length: array<'a> => int",
      "docstrings": ["Returns the number of elements in the array. See\n[`Array.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length)\non MDN."]
    }, 
    {
      "id": "Js.Array2.copyWithin",
      "kind": "value",
      "name": "copyWithin",
      "signature": "let copyWithin: (t<'a>, ~to_: int) => t<'a>",
      "docstrings": ["Copies from the first element in the given array to the designated `~to_`\nposition, returning the resulting array. *This function modifies the original\narray.* See\n[`Array.copyWithin`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin)\non MDN.\n\n```rescript\nlet arr = [100, 101, 102, 103, 104]\nJs.Array2.copyWithin(arr, ~to_=2) == [100, 101, 100, 101, 102]\narr == [100, 101, 100, 101, 102]\n```"]
    }, 
    {
      "id": "Js.Array2.copyWithinFrom",
      "kind": "value",
      "name": "copyWithinFrom",
      "signature": "let copyWithinFrom: (t<'a>, ~to_: int, ~from: int) => t<'a>",
      "docstrings": ["Copies starting at element `~from` in the given array to the designated `~to_`\nposition, returning the resulting array. *This function modifies the original\narray.* See\n[`Array.copyWithin`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin)\non MDN.\n\n```rescript\nlet arr = [100, 101, 102, 103, 104]\nJs.Array2.copyWithinFrom(arr, ~from=2, ~to_=0) == [102, 103, 104, 103, 104]\narr == [102, 103, 104, 103, 104]\n```"]
    }, 
    {
      "id": "Js.Array2.copyWithinFromRange",
      "kind": "value",
      "name": "copyWithinFromRange",
      "signature": "let copyWithinFromRange: (t<'a>, ~to_: int, ~start: int, ~end_: int) => t<'a>",
      "docstrings": ["Copies starting at element `~start` in the given array up to but not including\n`~end_` to the designated `~to_` position, returning the resulting array. *This\nfunction modifies the original array.* See\n[`Array.copyWithin`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin)\non MDN.\n\n```rescript\nlet arr = [100, 101, 102, 103, 104, 105]\nJs.Array2.copyWithinFromRange(arr, ~start=2, ~end_=5, ~to_=1) == [100, 102, 103, 104, 104, 105]\narr == [100, 102, 103, 104, 104, 105]\n```"]
    }, 
    {
      "id": "Js.Array2.fillInPlace",
      "kind": "value",
      "name": "fillInPlace",
      "signature": "let fillInPlace: (t<'a>, 'a) => t<'a>",
      "docstrings": ["Sets all elements of the given array (the first arumgent) to the designated\nvalue (the secon argument), returning the resulting array. *This function\n  modifies the original array.*\n\nSee\n[`Array.fill`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)\non MDN.\n\n```rescript\nlet arr = [100, 101, 102, 103, 104]\nJs.Array2.fillInPlace(arr, 99) == [99, 99, 99, 99, 99]\narr == [99, 99, 99, 99, 99]\n```"]
    }, 
    {
      "id": "Js.Array2.fillFromInPlace",
      "kind": "value",
      "name": "fillFromInPlace",
      "signature": "let fillFromInPlace: (t<'a>, 'a, ~from: int) => t<'a>",
      "docstrings": ["Sets all elements of the given array (the first arumgent) from position `~from`\nto the end to the designated value (the second argument), returning the\nresulting array. *This function modifies the original array.* See\n[`Array.fill`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)\non MDN.\n\n```rescript\nlet arr = [100, 101, 102, 103, 104]\nJs.Array2.fillFromInPlace(arr, 99, ~from=2) == [100, 101, 99, 99, 99]\narr == [100, 101, 99, 99, 99]\n```"]
    }, 
    {
      "id": "Js.Array2.fillRangeInPlace",
      "kind": "value",
      "name": "fillRangeInPlace",
      "signature": "let fillRangeInPlace: (t<'a>, 'a, ~start: int, ~end_: int) => t<'a>",
      "docstrings": ["Sets the elements of the given array (the first arumgent) from position\n`~start` up to but not including position `~end_` to the designated value (the\nsecond argument), returning the resulting array. *This function modifies the\noriginal array.* See\n[`Array.fill`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)\non MDN.\n\n```rescript\nlet arr = [100, 101, 102, 103, 104]\nJs.Array2.fillRangeInPlace(arr, 99, ~start=1, ~end_=4) == [100, 99, 99, 99, 104]\narr == [100, 99, 99, 99, 104]\n```"]
    }, 
    {
      "id": "Js.Array2.pop",
      "kind": "value",
      "name": "pop",
      "signature": "let pop: t<'a> => option<'a>",
      "docstrings": ["If the array is not empty, removes the last element and returns it as\n`Some(value)`; returns `None` if the array is empty. *This function modifies\nthe original array.* See\n[`Array.pop`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop)\non MDN.\n\n```rescript\nlet arr = [100, 101, 102, 103, 104]\nJs.Array2.pop(arr) == Some(104)\narr == [100, 101, 102, 103]\n\nlet empty: array<int> = []\nJs.Array2.pop(empty) == None\n```"]
    }, 
    {
      "id": "Js.Array2.push",
      "kind": "value",
      "name": "push",
      "signature": "let push: (t<'a>, 'a) => int",
      "docstrings": ["Appends the given value to the array, returning the number of elements in the\nupdated array. *This function modifies the original array.* See\n[`Array.push`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push)\non MDN.\n\n```rescript\nlet arr = [\"ant\", \"bee\", \"cat\"]\nJs.Array2.push(arr, \"dog\") == 4\narr == [\"ant\", \"bee\", \"cat\", \"dog\"]\n```"]
    }, 
    {
      "id": "Js.Array2.pushMany",
      "kind": "value",
      "name": "pushMany",
      "signature": "let pushMany: (t<'a>, array<'a>) => int",
      "docstrings": ["Appends the values from one array (the second argument) to another (the first\nargument), returning the number of elements in the updated array. *This\nfunction modifies the original array.* See\n[`Array.push`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push)\non MDN.\n\n```rescript\nlet arr = [\"ant\", \"bee\", \"cat\"]\nJs.Array2.pushMany(arr, [\"dog\", \"elk\"]) == 5\narr == [\"ant\", \"bee\", \"cat\", \"dog\", \"elk\"]\n```"]
    }, 
    {
      "id": "Js.Array2.reverseInPlace",
      "kind": "value",
      "name": "reverseInPlace",
      "signature": "let reverseInPlace: t<'a> => t<'a>",
      "docstrings": ["Returns an array with the elements of the input array in reverse order. *This\nfunction modifies the original array.* See\n[`Array.reverse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)\non MDN.\n\n```rescript\nlet arr = [\"ant\", \"bee\", \"cat\"]\nJs.Array2.reverseInPlace(arr) == [\"cat\", \"bee\", \"ant\"]\narr == [\"cat\", \"bee\", \"ant\"]\n```"]
    }, 
    {
      "id": "Js.Array2.shift",
      "kind": "value",
      "name": "shift",
      "signature": "let shift: t<'a> => option<'a>",
      "docstrings": ["If the array is not empty, removes the first element and returns it as\n`Some(value)`; returns `None` if the array is empty. *This function modifies\nthe original array.* See\n[`Array.shift`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift)\non MDN.\n\n```rescript\nlet arr = [100, 101, 102, 103, 104]\nJs.Array2.shift(arr) == Some(100)\narr == [101, 102, 103, 104]\n\nlet empty: array<int> = []\nJs.Array2.shift(empty) == None\n```"]
    }, 
    {
      "id": "Js.Array2.sortInPlace",
      "kind": "value",
      "name": "sortInPlace",
      "signature": "let sortInPlace: t<'a> => t<'a>",
      "docstrings": ["Sorts the given array in place and returns the sorted array. JavaScript sorts\nthe array by converting the arguments to UTF-16 strings and sorting them. See\nthe second example with sorting numbers, which does not do a numeric sort.\n*This function modifies the original array.* See\n[`Array.sort`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\non MDN.\n\n```rescript\nlet words = [\"bee\", \"dog\", \"ant\", \"cat\"]\nJs.Array2.sortInPlace(words) == [\"ant\", \"bee\", \"cat\", \"dog\"]\nwords == [\"ant\", \"bee\", \"cat\", \"dog\"]\n\nlet numbers = [3, 30, 10, 1, 20, 2]\nJs.Array2.sortInPlace(numbers) == [1, 10, 2, 20, 3, 30]\nnumbers == [1, 10, 2, 20, 3, 30]\n```"]
    }, 
    {
      "id": "Js.Array2.sortInPlaceWith",
      "kind": "value",
      "name": "sortInPlaceWith",
      "signature": "let sortInPlaceWith: (t<'a>, ('a, 'a) => int) => t<'a>",
      "docstrings": ["Sorts the given array in place and returns the sorted array. *This function\n  modifies the original array.*\n\nThe first argument to `sortInPlaceWith()` is a function that compares two items\nfrom the array and returns:\n\n* an integer less than zero if the first item is less than the second item *\nzero if the items are equal * an integer greater than zero if the first item is\ngreater than the second item\n\nSee\n[`Array.sort`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\non MDN.\n\n```rescript\n// sort by word length\nlet words = [\"horse\", \"aardvark\", \"dog\", \"camel\"]\nlet byLength = (s1, s2) => Js.String.length(s1) - Js.String.length(s2)\n\nJs.Array2.sortInPlaceWith(words, byLength) == [\"dog\", \"horse\", \"camel\", \"aardvark\"]\n\n// sort in reverse numeric order\nlet numbers = [3, 30, 10, 1, 20, 2]\nlet reverseNumeric = (n1, n2) => n2 - n1\nJs.Array2.sortInPlaceWith(numbers, reverseNumeric) == [30, 20, 10, 3, 2, 1]\n```"]
    }, 
    {
      "id": "Js.Array2.spliceInPlace",
      "kind": "value",
      "name": "spliceInPlace",
      "signature": "let spliceInPlace: (t<'a>, ~pos: int, ~remove: int, ~add: array<'a>) => t<'a>",
      "docstrings": ["Starting at position `~pos`, remove `~remove` elements and then add the\nelements from the `~add` array. Returns an array consisting of the removed\nitems. *This function modifies the original array.* See\n[`Array.splice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)\non MDN.\n\n```rescript\nlet arr = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nJs.Array2.spliceInPlace(arr, ~pos=2, ~remove=2, ~add=[\"x\", \"y\", \"z\"]) == [\"c\", \"d\"]\narr == [\"a\", \"b\", \"x\", \"y\", \"z\", \"e\", \"f\"]\n\nlet arr2 = [\"a\", \"b\", \"c\", \"d\"]\nJs.Array2.spliceInPlace(arr2, ~pos=3, ~remove=0, ~add=[\"x\", \"y\"]) == []\narr2 == [\"a\", \"b\", \"c\", \"x\", \"y\", \"d\"]\n\nlet arr3 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nJs.Array2.spliceInPlace(arr3, ~pos=9, ~remove=2, ~add=[\"x\", \"y\", \"z\"]) == []\narr3 == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"x\", \"y\", \"z\"]\n```"]
    }, 
    {
      "id": "Js.Array2.removeFromInPlace",
      "kind": "value",
      "name": "removeFromInPlace",
      "signature": "let removeFromInPlace: (t<'a>, ~pos: int) => t<'a>",
      "docstrings": ["Removes elements from the given array starting at position `~pos` to the end of\nthe array, returning the removed elements. *This function modifies the original\narray.* See\n[`Array.splice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)\non MDN.\n\n```rescript\nlet arr = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nJs.Array2.removeFromInPlace(arr, ~pos=4) == [\"e\", \"f\"]\narr == [\"a\", \"b\", \"c\", \"d\"]\n```"]
    }, 
    {
      "id": "Js.Array2.removeCountInPlace",
      "kind": "value",
      "name": "removeCountInPlace",
      "signature": "let removeCountInPlace: (t<'a>, ~pos: int, ~count: int) => t<'a>",
      "docstrings": ["Removes `~count` elements from the given array starting at position `~pos`,\nreturning the removed elements. *This function modifies the original array.*\nSee\n[`Array.splice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)\non MDN.\n\n```rescript\nlet arr = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nJs.Array2.removeCountInPlace(arr, ~pos=2, ~count=3) == [\"c\", \"d\", \"e\"]\narr == [\"a\", \"b\", \"f\"]\n```"]
    }, 
    {
      "id": "Js.Array2.unshift",
      "kind": "value",
      "name": "unshift",
      "signature": "let unshift: (t<'a>, 'a) => int",
      "docstrings": ["Adds the given element to the array, returning the new number of elements in\nthe array. *This function modifies the original array.* See\n[`Array.unshift`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift)\non MDN.\n\n```rescript\nlet arr = [\"b\", \"c\", \"d\"]\nJs.Array2.unshift(arr, \"a\") == 4\narr == [\"a\", \"b\", \"c\", \"d\"]\n```"]
    }, 
    {
      "id": "Js.Array2.unshiftMany",
      "kind": "value",
      "name": "unshiftMany",
      "signature": "let unshiftMany: (t<'a>, array<'a>) => int",
      "docstrings": ["Adds the elements in the second array argument at the beginning of the first\narray argument, returning the new number of elements in the array. *This\nfunction modifies the original array.* See\n[`Array.unshift`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift)\non MDN.\n\n```rescript\nlet arr = [\"d\", \"e\"]\nJs.Array2.unshiftMany(arr, [\"a\", \"b\", \"c\"]) == 5\narr == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```"]
    }, 
    {
      "id": "Js.Array2.append",
      "kind": "value",
      "name": "append",
      "deprecated": "`append` is not type-safe. Use `concat` instead.",
      "signature": "let append: (t<'a>, 'a) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Array2.concat",
      "kind": "value",
      "name": "concat",
      "signature": "let concat: (t<'a>, t<'a>) => t<'a>",
      "docstrings": ["Concatenates the second array argument to the first array argument, returning a\nnew array. The original arrays are not modified. See\n[`Array.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)\non MDN.\n\n```rescript\nJs.Array2.concat([\"a\", \"b\"], [\"c\", \"d\", \"e\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```"]
    }, 
    {
      "id": "Js.Array2.concatMany",
      "kind": "value",
      "name": "concatMany",
      "signature": "let concatMany: (t<'a>, array<t<'a>>) => t<'a>",
      "docstrings": ["The second argument to `concatMany()` is an array of arrays; these are added at\nthe end of the first argument, returning a new array. See\n[`Array.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)\non MDN.\n\n```rescript\nJs.Array2.concatMany([\"a\", \"b\", \"c\"], [[\"d\", \"e\"], [\"f\", \"g\", \"h\"]]) == [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n  ]\n```"]
    }, 
    {
      "id": "Js.Array2.includes",
      "kind": "value",
      "name": "includes",
      "signature": "let includes: (t<'a>, 'a) => bool",
      "docstrings": ["Returns true if the given value is in the array, `false` otherwise. See\n[`Array.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)\non MDN.\n\n```rescript\nJs.Array2.includes([\"a\", \"b\", \"c\"], \"b\") == true\nJs.Array2.includes([\"a\", \"b\", \"c\"], \"x\") == false\n```"]
    }, 
    {
      "id": "Js.Array2.indexOf",
      "kind": "value",
      "name": "indexOf",
      "signature": "let indexOf: (t<'a>, 'a) => int",
      "docstrings": ["Returns the index of the first element in the array that has the given value.\nIf the value is not in the array, returns -1. See\n[`Array.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)\non MDN.\n\n```rescript\nJs.Array2.indexOf([100, 101, 102, 103], 102) == 2\nJs.Array2.indexOf([100, 101, 102, 103], 999) == -1\n```"]
    }, 
    {
      "id": "Js.Array2.indexOfFrom",
      "kind": "value",
      "name": "indexOfFrom",
      "signature": "let indexOfFrom: (t<'a>, 'a, ~from: int) => int",
      "docstrings": ["Returns the index of the first element in the array with the given value. The\nsearch starts at position `~from`. See\n[`Array.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)\non MDN.\n\n```rescript\nJs.Array2.indexOfFrom([\"a\", \"b\", \"a\", \"c\", \"a\"], \"a\", ~from=2) == 2\nJs.Array2.indexOfFrom([\"a\", \"b\", \"a\", \"c\", \"a\"], \"a\", ~from=3) == 4\nJs.Array2.indexOfFrom([\"a\", \"b\", \"a\", \"c\", \"a\"], \"b\", ~from=2) == -1\n```"]
    }, 
    {
      "id": "Js.Array2.joinWith",
      "kind": "value",
      "name": "joinWith",
      "signature": "let joinWith: (t<'a>, string) => string",
      "docstrings": ["This function converts each element of the array to a string (via JavaScript)\nand concatenates them, separated by the string given in the first argument,\ninto a single string. See\n[`Array.join`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join)\non MDN.\n\n```rescript\nJs.Array2.joinWith([\"ant\", \"bee\", \"cat\"], \"--\") == \"ant--bee--cat\"\nJs.Array2.joinWith([\"door\", \"bell\"], \"\") == \"doorbell\"\nJs.Array2.joinWith([2020, 9, 4], \"/\") == \"2020/9/4\"\nJs.Array2.joinWith([2.5, 3.6, 3e-2], \";\") == \"2.5;3.6;0.03\"\n```"]
    }, 
    {
      "id": "Js.Array2.lastIndexOf",
      "kind": "value",
      "name": "lastIndexOf",
      "signature": "let lastIndexOf: (t<'a>, 'a) => int",
      "docstrings": ["Returns the index of the last element in the array that has the given value. If\nthe value is not in the array, returns -1. See\n[`Array.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf)\non MDN.\n\n```rescript\nJs.Array2.lastIndexOf([\"a\", \"b\", \"a\", \"c\"], \"a\") == 2\nJs.Array2.lastIndexOf([\"a\", \"b\", \"a\", \"c\"], \"x\") == -1\n```"]
    }, 
    {
      "id": "Js.Array2.lastIndexOfFrom",
      "kind": "value",
      "name": "lastIndexOfFrom",
      "signature": "let lastIndexOfFrom: (t<'a>, 'a, ~from: int) => int",
      "docstrings": ["Returns the index of the last element in the array that has the given value,\nsearching from position `~from` down to the start of the array. If the value is\nnot in the array, returns -1. See\n[`Array.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf)\non MDN.\n\n```rescript\nJs.Array2.lastIndexOfFrom([\"a\", \"b\", \"a\", \"c\", \"a\", \"d\"], \"a\", ~from=3) == 2\nJs.Array2.lastIndexOfFrom([\"a\", \"b\", \"a\", \"c\", \"a\", \"d\"], \"c\", ~from=2) == -1\n```"]
    }, 
    {
      "id": "Js.Array2.slice",
      "kind": "value",
      "name": "slice",
      "signature": "let slice: (t<'a>, ~start: int, ~end_: int) => t<'a>",
      "docstrings": ["Returns a shallow copy of the given array from the `~start` index up to but not\nincluding the `~end_` position. Negative numbers indicate an offset from the\nend of the array. See\n[`Array.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)\non MDN.\n\n```rescript\nlet arr = [100, 101, 102, 103, 104, 105, 106]\nJs.Array2.slice(arr, ~start=2, ~end_=5) == [102, 103, 104]\nJs.Array2.slice(arr, ~start=-3, ~end_=-1) == [104, 105]\nJs.Array2.slice(arr, ~start=9, ~end_=10) == []\n```"]
    }, 
    {
      "id": "Js.Array2.copy",
      "kind": "value",
      "name": "copy",
      "signature": "let copy: t<'a> => t<'a>",
      "docstrings": ["Returns a copy of the entire array. Same as `Js.Array2.Slice(arr, ~start=0,\n~end_=Js.Array2.length(arr))`. See\n[`Array.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)\non MDN."]
    }, 
    {
      "id": "Js.Array2.sliceFrom",
      "kind": "value",
      "name": "sliceFrom",
      "signature": "let sliceFrom: (t<'a>, int) => t<'a>",
      "docstrings": ["Returns a shallow copy of the given array from the given index to the end. See\n[`Array.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)\non MDN."]
    }, 
    {
      "id": "Js.Array2.toString",
      "kind": "value",
      "name": "toString",
      "signature": "let toString: t<'a> => string",
      "docstrings": ["Converts the array to a string. Each element is converted to a string using\nJavaScript. Unlike the JavaScript `Array.toString()`, all elements in a\nReasonML array must have the same type. See\n[`Array.toString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString)\non MDN.\n\n```rescript\nJs.Array2.toString([3.5, 4.6, 7.8]) == \"3.5,4.6,7.8\"\nJs.Array2.toString([\"a\", \"b\", \"c\"]) == \"a,b,c\"\n```"]
    }, 
    {
      "id": "Js.Array2.toLocaleString",
      "kind": "value",
      "name": "toLocaleString",
      "signature": "let toLocaleString: t<'a> => string",
      "docstrings": ["Converts the array to a string using the conventions of the current locale.\nEach element is converted to a string using JavaScript. Unlike the JavaScript\n`Array.toLocaleString()`, all elements in a ReasonML array must have the same\ntype. See\n[`Array.toLocaleString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString)\non MDN.\n\n```rescript\nJs.Array2.toLocaleString([Js.Date.make()])\n// returns \"3/19/2020, 10:52:11 AM\" for locale en_US.utf8\n// returns \"2020-3-19 10:52:11\" for locale de_DE.utf8\n```"]
    }, 
    {
      "id": "Js.Array2.every",
      "kind": "value",
      "name": "every",
      "signature": "let every: (t<'a>, 'a => bool) => bool",
      "docstrings": ["The first argument to `every()` is an array. The second argument is a predicate\nfunction that returns a boolean. The `every()` function returns `true` if the\npredicate function is true for all items in the given array. If given an empty\narray, returns `true`. See\n[`Array.every`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every)\non MDN.\n\n```rescript\nlet isEven = x => mod(x, 2) == 0\nJs.Array2.every([6, 22, 8, 4], isEven) == true\nJs.Array2.every([6, 22, 7, 4], isEven) == false\n```"]
    }, 
    {
      "id": "Js.Array2.everyi",
      "kind": "value",
      "name": "everyi",
      "signature": "let everyi: (t<'a>, ('a, int) => bool) => bool",
      "docstrings": ["The first argument to `everyi()` is an array. The second argument is a\npredicate function with two arguments: an array element and that element’s\nindex; it returns a boolean. The `everyi()` function returns `true` if the\npredicate function is true for all items in the given array. If given an empty\narray, returns `true`. See\n[`Array.every`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every)\non MDN.\n\n```rescript\n// determine if all even-index items are positive\nlet evenIndexPositive = (item, index) => mod(index, 2) == 0 ? item > 0 : true\n\nJs.Array2.everyi([6, -3, 5, 8], evenIndexPositive) == true\nJs.Array2.everyi([6, 3, -5, 8], evenIndexPositive) == false\n```"]
    }, 
    {
      "id": "Js.Array2.filter",
      "kind": "value",
      "name": "filter",
      "signature": "let filter: (t<'a>, 'a => bool) => t<'a>",
      "docstrings": ["Applies the given predicate function (the second argument) to each element in\nthe array; the result is an array of those elements for which the predicate\nfunction returned `true`. See\n[`Array.filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\non MDN.\n\n```rescript\nlet nonEmpty = s => s != \"\"\nJs.Array2.filter([\"abc\", \"\", \"\", \"def\", \"ghi\"], nonEmpty) == [\"abc\", \"def\", \"ghi\"]\n```"]
    }, 
    {
      "id": "Js.Array2.filteri",
      "kind": "value",
      "name": "filteri",
      "signature": "let filteri: (t<'a>, ('a, int) => bool) => t<'a>",
      "docstrings": ["Each element of the given array are passed to the predicate function. The\nreturn value is an array of all those elements for which the predicate function\nreturned `true`.\n\nSee\n[`Array.filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\non MDN.\n\n```rescript\n// keep only positive elements at odd indices\nlet positiveOddElement = (item, index) => mod(index, 2) == 1 && item > 0\n\nJs.Array2.filteri([6, 3, 5, 8, 7, -4, 1], positiveOddElement) == [3, 8]\n```"]
    }, 
    {
      "id": "Js.Array2.find",
      "kind": "value",
      "name": "find",
      "signature": "let find: (t<'a>, 'a => bool) => option<'a>",
      "docstrings": ["Returns `Some(value)` for the first element in the array that satisifies the\ngiven predicate function, or `None` if no element satisifies the predicate. See\n[`Array.find`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\non MDN.\n\n```rescript\n// find first negative element\nJs.Array2.find([33, 22, -55, 77, -44], x => x < 0) == Some(-55)\nJs.Array2.find([33, 22, 55, 77, 44], x => x < 0) == None\n```"]
    }, 
    {
      "id": "Js.Array2.findi",
      "kind": "value",
      "name": "findi",
      "signature": "let findi: (t<'a>, ('a, int) => bool) => option<'a>",
      "docstrings": ["Returns `Some(value)` for the first element in the array that satisifies the\ngiven predicate function, or `None` if no element satisifies the predicate. The\npredicate function takes an array element and an index as its parameters. See\n[`Array.find`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\non MDN.\n\n```rescript\n// find first positive item at an odd index\nlet positiveOddElement = (item, index) => mod(index, 2) == 1 && item > 0\n\nJs.Array2.findi([66, -33, 55, 88, 22], positiveOddElement) == Some(88)\nJs.Array2.findi([66, -33, 55, -88, 22], positiveOddElement) == None\n```"]
    }, 
    {
      "id": "Js.Array2.findIndex",
      "kind": "value",
      "name": "findIndex",
      "signature": "let findIndex: (t<'a>, 'a => bool) => int",
      "docstrings": ["Returns the index of the first element in the array that satisifies the given\npredicate function, or -1 if no element satisifies the predicate. See\n[`Array.find`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\non MDN.\n\n```rescript\nJs.Array2.findIndex([33, 22, -55, 77, -44], x => x < 0) == 2\nJs.Array2.findIndex([33, 22, 55, 77, 44], x => x < 0) == -1\n```"]
    }, 
    {
      "id": "Js.Array2.findIndexi",
      "kind": "value",
      "name": "findIndexi",
      "signature": "let findIndexi: (t<'a>, ('a, int) => bool) => int",
      "docstrings": ["Returns `Some(value)` for the first element in the array that satisifies the\ngiven predicate function, or `None` if no element satisifies the predicate. The\npredicate function takes an array element and an index as its parameters. See\n[`Array.find`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\non MDN.\n\n```rescript\n// find index of first positive item at an odd index\nlet positiveOddElement = (item, index) => mod(index, 2) == 1 && item > 0\n\nJs.Array2.findIndexi([66, -33, 55, 88, 22], positiveOddElement) == 3\nJs.Array2.findIndexi([66, -33, 55, -88, 22], positiveOddElement) == -1\n```"]
    }, 
    {
      "id": "Js.Array2.forEach",
      "kind": "value",
      "name": "forEach",
      "signature": "let forEach: (t<'a>, 'a => unit) => unit",
      "docstrings": ["The `forEach()` function applies the function given as the second argument to\neach element in the array. The function you provide returns `unit`, and the\n`forEach()` function also returns `unit`. You use `forEach()` when you need to\nprocess each element in the array but not return any new array or value; for\nexample, to print the items in an array. See\n[`Array.forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\non MDN.\n\n```rescript\n// display all elements in an array\nJs.Array2.forEach([\"a\", \"b\", \"c\"], x => Js.log(x)) == ()\n```"]
    }, 
    {
      "id": "Js.Array2.forEachi",
      "kind": "value",
      "name": "forEachi",
      "signature": "let forEachi: (t<'a>, ('a, int) => unit) => unit",
      "docstrings": ["The `forEachi()` function applies the function given as the second argument to\neach element in the array. The function you provide takes an item in the array\nand its index number, and returns `unit`. The `forEachi()` function also\nreturns `unit`. You use `forEachi()` when you need to process each element in\nthe array but not return any new array or value; for example, to print the\nitems in an array. See\n[`Array.forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\non MDN.\n\n```rescript\n// display all elements in an array as a numbered list\nJs.Array2.forEachi([\"a\", \"b\", \"c\"], (item, index) => Js.log2(index + 1, item)) == ()\n```"]
    }, 
    {
      "id": "Js.Array2.map",
      "kind": "value",
      "name": "map",
      "signature": "let map: (t<'a>, 'a => 'b) => t<'b>",
      "docstrings": ["Applies the function (the second argument) to each item in the array, returning\na new array. The result array does not have to have elements of the same type\nas the input array. See\n[`Array.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\non MDN.\n\n```rescript\nJs.Array2.map([12, 4, 8], x => x * x) == [144, 16, 64]\nJs.Array2.map([\"animal\", \"vegetable\", \"mineral\"], Js.String.length) == [6, 9, 7]\n```"]
    }, 
    {
      "id": "Js.Array2.mapi",
      "kind": "value",
      "name": "mapi",
      "signature": "let mapi: (t<'a>, ('a, int) => 'b) => t<'b>",
      "docstrings": ["Applies the function (the second argument) to each item in the array, returning\na new array. The function acceps two arguments: an item from the array and its\nindex number. The result array does not have to have elements of the same type\nas the input array. See\n[`Array.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\non MDN.\n\n```rescript\n// multiply each item in array by its position\nlet product = (item, index) => item * index\nJs.Array2.mapi([10, 11, 12], product) == [0, 11, 24]\n```"]
    }, 
    {
      "id": "Js.Array2.reduce",
      "kind": "value",
      "name": "reduce",
      "signature": "let reduce: (t<'a>, ('b, 'a) => 'b, 'b) => 'b",
      "docstrings": ["The `reduce()` function takes three parameters: an array, a *reducer function*,\nand a beginning accumulator value. The reducer function has two parameters: an\naccumulated value and an element of the array.\n\n`reduce()` first calls the reducer function with the beginning value and the\nfirst element in the array. The result becomes the new accumulator value, which\nis passed in to the reducer function along with the second element in the\narray. `reduce()` proceeds through the array, passing in the result of each\nstage as the accumulator to the reducer function.\n\nWhen all array elements are processed, the final value of the accumulator\nbecomes the return value of `reduce()`. See\n[`Array.reduce`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\non MDN.\n\n```rescript\nlet sumOfSquares = (accumulator, item) => accumulator + item * item\n\nJs.Array2.reduce([10, 2, 4], sumOfSquares, 0) == 120\nJs.Array2.reduce([10, 2, 4], \"*\", 1) == 80\nJs.Array2.reduce(\n  [\"animal\", \"vegetable\", \"mineral\"],\n  (acc, item) => acc + Js.String.length(item),\n  0,\n) == 22 // 6 + 9 + 7\nJs.Array2.reduce([2.0, 4.0], (acc, item) => item /. acc, 1.0) == 2.0 // 4.0 / (2.0 / 1.0)\n```"]
    }, 
    {
      "id": "Js.Array2.reducei",
      "kind": "value",
      "name": "reducei",
      "signature": "let reducei: (t<'a>, ('b, 'a, int) => 'b, 'b) => 'b",
      "docstrings": ["The `reducei()` function takes three parameters: an array, a *reducer\nfunction*, and a beginning accumulator value. The reducer function has three\nparameters: an accumulated value, an element of the array, and the index of\nthat element.\n\n`reducei()` first calls the reducer function with the beginning value, the\nfirst element in the array, and zero (its index). The result becomes the new\naccumulator value, which is passed to the reducer function along with the\nsecond element in the array and one (its index). `reducei()` proceeds from left\nto right through the array, passing in the result of each stage as the\naccumulator to the reducer function.\n\nWhen all array elements are processed, the final value of the accumulator\nbecomes the return value of `reducei()`. See\n[`Array.reduce`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\non MDN.\n\n```rescript\n// find sum of even-index elements in array\nlet sumOfEvens = (accumulator, item, index) =>\n  if mod(index, 2) == 0 {\n    accumulator + item\n  } else {\n    accumulator\n  }\n\nJs.Array2.reducei([2, 5, 1, 4, 3], sumOfEvens, 0) == 6\n```"]
    }, 
    {
      "id": "Js.Array2.reduceRight",
      "kind": "value",
      "name": "reduceRight",
      "signature": "let reduceRight: (t<'a>, ('b, 'a) => 'b, 'b) => 'b",
      "docstrings": ["The `reduceRight()` function takes three parameters: an array, a *reducer\nfunction*, and a beginning accumulator value. The reducer function has two\nparameters: an accumulated value and an element of the array.\n\n`reduceRight()` first calls the reducer function with the beginning value and\nthe last element in the array. The result becomes the new accumulator value,\nwhich is passed in to the reducer function along with the next-to-last element\nin the array. `reduceRight()` proceeds from right to left through the array,\npassing in the result of each stage as the accumulator to the reducer function.\n\nWhen all array elements are processed, the final value of the accumulator\nbecomes the return value of `reduceRight()`.  See\n[`Array.reduceRight`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight)\non MDN.\n\n**NOTE:** In many cases, `reduce()` and `reduceRight()` give the same result.\nHowever, see the last example here and compare it to the example from\n`reduce()`, where order makes a difference.\n\n```rescript\nlet sumOfSquares = (accumulator, item) => accumulator + item * item\n\nJs.Array2.reduceRight([10, 2, 4], sumOfSquares, 0) == 120\nJs.Array2.reduceRight([2.0, 4.0], (acc, item) => item /. acc, 1.0) == 0.5 // 2.0 / (4.0 / 1.0)\n```"]
    }, 
    {
      "id": "Js.Array2.reduceRighti",
      "kind": "value",
      "name": "reduceRighti",
      "signature": "let reduceRighti: (t<'a>, ('b, 'a, int) => 'b, 'b) => 'b",
      "docstrings": ["The `reduceRighti()` function takes three parameters: an array, a *reducer\nfunction*, and a beginning accumulator value. The reducer function has three\nparameters: an accumulated value, an element of the array, and the index of\nthat element. `reduceRighti()` first calls the reducer function with the\nbeginning value, the last element in the array, and its index (length of array\nminus one). The result becomes the new accumulator value, which is passed in to\nthe reducer function along with the second element in the array and one (its\nindex). `reduceRighti()` proceeds from right to left through the array, passing\nin the result of each stage as the accumulator to the reducer function.\n\nWhen all array elements are processed, the final value of the accumulator\nbecomes the return value of `reduceRighti()`. See\n[`Array.reduceRight`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight)\non MDN.\n\n**NOTE:** In many cases, `reducei()` and `reduceRighti()` give the same result.\nHowever, there are cases where the order in which items are processed makes a\ndifference.\n\n```rescript\n// find sum of even-index elements in array\nlet sumOfEvens = (accumulator, item, index) =>\n  if mod(index, 2) == 0 {\n    accumulator + item\n  } else {\n    accumulator\n  }\n\nJs.Array2.reduceRighti([2, 5, 1, 4, 3], sumOfEvens, 0) == 6\n```"]
    }, 
    {
      "id": "Js.Array2.some",
      "kind": "value",
      "name": "some",
      "signature": "let some: (t<'a>, 'a => bool) => bool",
      "docstrings": ["Returns `true` if the predicate function given as the second argument to\n`some()` returns `true` for any element in the array; `false` otherwise.\n\n```rescript\nlet isEven = x => mod(x, 2) == 0\n\nJs.Array2.some([3, 7, 5, 2, 9], isEven) == true\nJs.Array2.some([3, 7, 5, 1, 9], isEven) == false\n```"]
    }, 
    {
      "id": "Js.Array2.somei",
      "kind": "value",
      "name": "somei",
      "signature": "let somei: (t<'a>, ('a, int) => bool) => bool",
      "docstrings": ["Returns `true` if the predicate function given as the second argument to\n`somei()` returns `true` for any element in the array; `false` otherwise. The\npredicate function has two arguments: an item from the array and the index\nvalue\n\n```rescript\n// Does any string in the array\n// have the same length as its index?\n\nlet sameLength = (str, index) => Js.String.length(str) == index\n\n// \"ef\" has length 2 and is it at index 2\nJs.Array2.somei([\"ab\", \"cd\", \"ef\", \"gh\"], sameLength) == true\n// no item has the same length as its index\nJs.Array2.somei([\"a\", \"bc\", \"def\", \"gh\"], sameLength) == false\n```"]
    }, 
    {
      "id": "Js.Array2.unsafe_get",
      "kind": "value",
      "name": "unsafe_get",
      "signature": "let unsafe_get: (array<'a>, int) => 'a",
      "docstrings": ["Returns the value at the given position in the array if the position is in\nbounds; returns the JavaScript value `undefined` otherwise.\n\n```rescript\nlet arr = [100, 101, 102, 103]\nJs.Array2.unsafe_get(arr, 3) == 103\nJs.Array2.unsafe_get(arr, 4) // returns undefined\n```"]
    }, 
    {
      "id": "Js.Array2.unsafe_set",
      "kind": "value",
      "name": "unsafe_set",
      "signature": "let unsafe_set: (array<'a>, int, 'a) => unit",
      "docstrings": ["Sets the value at the given position in the array if the position is in bounds.\nIf the index is out of bounds, well, “here there be dragons.“\n\n*This function modifies the original array.*\n\n```rescript\nlet arr = [100, 101, 102, 103]\nJs.Array2.unsafe_set(arr, 3, 99)\n// result is [100, 101, 102, 99];\n\nJs.Array2.unsafe_set(arr, 4, 88)\n// result is [100, 101, 102, 99, 88]\n\nJs.Array2.unsafe_set(arr, 6, 77)\n// result is [100, 101, 102, 99, 88, <1 empty item>, 77]\n\nJs.Array2.unsafe_set(arr, -1, 66)\n// you don't want to know.\n```"]
    }]
  }, 
  {
    "id": "Js.String",
    "kind": "moduleAlias",
    "name": "String",
    "docstrings": ["Provide bindings to JS string"],
    "items": [
    {
      "id": "Js.String.t",
      "kind": "type",
      "name": "t",
      "signature": "type t = string",
      "docstrings": []
    }, 
    {
      "id": "Js.String.make",
      "kind": "value",
      "name": "make",
      "signature": "let make: 'a => t",
      "docstrings": ["`make(value)` converts the given value to a `string`.\n\n```rescript\nJs.String2.make(3.5) == \"3.5\"\nJs.String2.make([1, 2, 3]) == \"1,2,3\"\n```"]
    }, 
    {
      "id": "Js.String.fromCharCode",
      "kind": "value",
      "name": "fromCharCode",
      "signature": "let fromCharCode: int => t",
      "docstrings": ["`fromCharCode(n)` creates a `string` containing the character corresponding to that number; `n` ranges from 0 to 65535.\nIf out of range, the lower 16 bits of the value are used. Thus, `fromCharCode(0x1F63A)` gives the same result as `fromCharCode(0xF63A)`. See [`String.fromCharCode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode) on MDN.\n\n```rescript\nJs.String2.fromCharCode(65) == \"A\"\nJs.String2.fromCharCode(0x3c8) == `ψ`\nJs.String2.fromCharCode(0xd55c) == `한`\nJs.String2.fromCharCode(-64568) == `ψ`\n```"]
    }, 
    {
      "id": "Js.String.fromCharCodeMany",
      "kind": "value",
      "name": "fromCharCodeMany",
      "signature": "let fromCharCodeMany: array<int> => t",
      "docstrings": ["`fromCharCodeMany([n1, n2, n3])` creates a `string` from the characters\ncorresponding to the given numbers, using the same rules as `fromCharCode`. See\n[`String.fromCharCode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\non MDN."]
    }, 
    {
      "id": "Js.String.fromCodePoint",
      "kind": "value",
      "name": "fromCodePoint",
      "signature": "let fromCodePoint: int => t",
      "docstrings": ["`fromCodePoint(n)` creates a `string` containing the character corresponding to\nthat numeric code point. If the number is not a valid code point, it raises\n`RangeError`.Thus, `fromCodePoint(0x1F63A)` will produce a correct value,\nunlike `fromCharCode(0x1F63A)`, and `fromCodePoint(-5)` will raise a\n`RangeError`.\n\nSee [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\non MDN.\n\n```rescript\nJs.String2.fromCodePoint(65) == \"A\"\nJs.String2.fromCodePoint(0x3c8) == `ψ`\nJs.String2.fromCodePoint(0xd55c) == `한`\nJs.String2.fromCodePoint(0x1f63a) == `😺`\n```"]
    }, 
    {
      "id": "Js.String.fromCodePointMany",
      "kind": "value",
      "name": "fromCodePointMany",
      "signature": "let fromCodePointMany: array<int> => t",
      "docstrings": ["`fromCodePointMany([n1, n2, n3])` creates a `string` from the characters\ncorresponding to the given code point numbers, using the same rules as\n`fromCodePoint`.\n\nSee [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\non MDN.\n\n```rescript\nJs.String2.fromCodePointMany([0xd55c, 0xae00, 0x1f63a]) == `한글😺`\n```"]
    }, 
    {
      "id": "Js.String.length",
      "kind": "value",
      "name": "length",
      "signature": "let length: t => int",
      "docstrings": ["`length(s)` returns the length of the given `string`. See\n[`String.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length)\non MDN.\n\n```rescript\nJs.String2.length(\"abcd\") == 4\n```"]
    }, 
    {
      "id": "Js.String.get",
      "kind": "value",
      "name": "get",
      "signature": "let get: (t, int) => t",
      "docstrings": ["`get(s, n)` returns as a `string` the character at the given index number. If\n`n` is out of range, this function returns `undefined`, so at some point this\nfunction may be modified to return `option(string)`.\n\n```rescript\nJs.String2.get(\"Reason\", 0) == \"R\"\nJs.String2.get(\"Reason\", 4) == \"o\"\nJs.String2.get(`Rẽasöń`, 5) == `ń`\n```"]
    }, 
    {
      "id": "Js.String.charAt",
      "kind": "value",
      "name": "charAt",
      "signature": "let charAt: (int, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.charCodeAt",
      "kind": "value",
      "name": "charCodeAt",
      "signature": "let charCodeAt: (int, t) => float",
      "docstrings": []
    }, 
    {
      "id": "Js.String.codePointAt",
      "kind": "value",
      "name": "codePointAt",
      "signature": "let codePointAt: (int, t) => option<int>",
      "docstrings": []
    }, 
    {
      "id": "Js.String.concat",
      "kind": "value",
      "name": "concat",
      "signature": "let concat: (t, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.concatMany",
      "kind": "value",
      "name": "concatMany",
      "signature": "let concatMany: (array<t>, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.endsWith",
      "kind": "value",
      "name": "endsWith",
      "signature": "let endsWith: (t, t) => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.String.endsWithFrom",
      "kind": "value",
      "name": "endsWithFrom",
      "signature": "let endsWithFrom: (t, int, t) => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.String.includes",
      "kind": "value",
      "name": "includes",
      "signature": "let includes: (t, t) => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.String.includesFrom",
      "kind": "value",
      "name": "includesFrom",
      "signature": "let includesFrom: (t, int, t) => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.String.indexOf",
      "kind": "value",
      "name": "indexOf",
      "signature": "let indexOf: (t, t) => int",
      "docstrings": []
    }, 
    {
      "id": "Js.String.indexOfFrom",
      "kind": "value",
      "name": "indexOfFrom",
      "signature": "let indexOfFrom: (t, int, t) => int",
      "docstrings": []
    }, 
    {
      "id": "Js.String.lastIndexOf",
      "kind": "value",
      "name": "lastIndexOf",
      "signature": "let lastIndexOf: (t, t) => int",
      "docstrings": []
    }, 
    {
      "id": "Js.String.lastIndexOfFrom",
      "kind": "value",
      "name": "lastIndexOfFrom",
      "signature": "let lastIndexOfFrom: (t, int, t) => int",
      "docstrings": []
    }, 
    {
      "id": "Js.String.localeCompare",
      "kind": "value",
      "name": "localeCompare",
      "signature": "let localeCompare: (t, t) => float",
      "docstrings": []
    }, 
    {
      "id": "Js.String.match_",
      "kind": "value",
      "name": "match_",
      "signature": "let match_: (Js_re.t, t) => option<array<option<t>>>",
      "docstrings": []
    }, 
    {
      "id": "Js.String.normalize",
      "kind": "value",
      "name": "normalize",
      "signature": "let normalize: t => t",
      "docstrings": ["`normalize(str)` returns the normalized Unicode string using Normalization Form\nCanonical (NFC) Composition. Consider the character ã, which can be represented\nas the single codepoint \\u00e3 or the combination of a lower case letter A\n\\u0061 and a combining tilde \\u0303. Normalization ensures that both can be\nstored in an equivalent binary representation.\n\nSee [`String.normalize`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\non MDN.\n\nSee also [Unicode technical report #15](https://unicode.org/reports/tr15/) for\ndetails."]
    }, 
    {
      "id": "Js.String.normalizeByForm",
      "kind": "value",
      "name": "normalizeByForm",
      "signature": "let normalizeByForm: (t, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.repeat",
      "kind": "value",
      "name": "repeat",
      "signature": "let repeat: (int, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.replace",
      "kind": "value",
      "name": "replace",
      "signature": "let replace: (t, t, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.replaceByRe",
      "kind": "value",
      "name": "replaceByRe",
      "signature": "let replaceByRe: (Js_re.t, t, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.unsafeReplaceBy0",
      "kind": "value",
      "name": "unsafeReplaceBy0",
      "signature": "let unsafeReplaceBy0: (Js_re.t, (t, int, t) => t, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.unsafeReplaceBy1",
      "kind": "value",
      "name": "unsafeReplaceBy1",
      "signature": "let unsafeReplaceBy1: (Js_re.t, (t, t, int, t) => t, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.unsafeReplaceBy2",
      "kind": "value",
      "name": "unsafeReplaceBy2",
      "signature": "let unsafeReplaceBy2: (Js_re.t, (t, t, t, int, t) => t, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.unsafeReplaceBy3",
      "kind": "value",
      "name": "unsafeReplaceBy3",
      "signature": "let unsafeReplaceBy3: (Js_re.t, (t, t, t, t, int, t) => t, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.search",
      "kind": "value",
      "name": "search",
      "signature": "let search: (Js_re.t, t) => int",
      "docstrings": []
    }, 
    {
      "id": "Js.String.slice",
      "kind": "value",
      "name": "slice",
      "signature": "let slice: (~from: int, ~to_: int, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.sliceToEnd",
      "kind": "value",
      "name": "sliceToEnd",
      "signature": "let sliceToEnd: (~from: int, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.split",
      "kind": "value",
      "name": "split",
      "signature": "let split: (t, t) => array<t>",
      "docstrings": []
    }, 
    {
      "id": "Js.String.splitAtMost",
      "kind": "value",
      "name": "splitAtMost",
      "signature": "let splitAtMost: (t, ~limit: int, t) => array<t>",
      "docstrings": []
    }, 
    {
      "id": "Js.String.splitByRe",
      "kind": "value",
      "name": "splitByRe",
      "signature": "let splitByRe: (Js_re.t, t) => array<option<t>>",
      "docstrings": []
    }, 
    {
      "id": "Js.String.splitByReAtMost",
      "kind": "value",
      "name": "splitByReAtMost",
      "signature": "let splitByReAtMost: (Js_re.t, ~limit: int, t) => array<option<t>>",
      "docstrings": []
    }, 
    {
      "id": "Js.String.startsWith",
      "kind": "value",
      "name": "startsWith",
      "signature": "let startsWith: (t, t) => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.String.startsWithFrom",
      "kind": "value",
      "name": "startsWithFrom",
      "signature": "let startsWithFrom: (t, int, t) => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.String.substr",
      "kind": "value",
      "name": "substr",
      "signature": "let substr: (~from: int, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.substrAtMost",
      "kind": "value",
      "name": "substrAtMost",
      "signature": "let substrAtMost: (~from: int, ~length: int, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.substring",
      "kind": "value",
      "name": "substring",
      "signature": "let substring: (~from: int, ~to_: int, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.substringToEnd",
      "kind": "value",
      "name": "substringToEnd",
      "signature": "let substringToEnd: (~from: int, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.toLowerCase",
      "kind": "value",
      "name": "toLowerCase",
      "signature": "let toLowerCase: t => t",
      "docstrings": ["`toLowerCase(str)` converts `str` to lower case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\ngive different results depending upon context, for example with the Greek\nletter sigma, which has two different lower case forms; one when it is the last\ncharacter in a string and another when it is not.\n\nSee [`String.toLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)\non MDN.\n\n```rescript\nJs.String.toLowerCase(\"ABC\") == \"abc\"\nJs.String.toLowerCase(`ΣΠ`) == `σπ`\nJs.String.toLowerCase(`ΠΣ`) == `πς`\n```"]
    }, 
    {
      "id": "Js.String.toLocaleLowerCase",
      "kind": "value",
      "name": "toLocaleLowerCase",
      "signature": "let toLocaleLowerCase: t => t",
      "docstrings": ["`toLocaleLowerCase(str)` converts `str` to lower case using the current locale.\n\nSee [`String.toLocaleLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase)\non MDN."]
    }, 
    {
      "id": "Js.String.toUpperCase",
      "kind": "value",
      "name": "toUpperCase",
      "signature": "let toUpperCase: t => t",
      "docstrings": ["`toUpperCase(str)` converts `str` to upper case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\nexpand the number of letters in the result; for example the German ß\ncapitalizes to two Ses in a row.\n\nSee [`String.toUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase)\non MDN.\n\n```rescript\nJs.String.toUpperCase(\"abc\") == \"ABC\"\nJs.String.toUpperCase(`Straße`) == `STRASSE`\nJs.String.toUpperCase(`πς`) == `ΠΣ`\n```"]
    }, 
    {
      "id": "Js.String.toLocaleUpperCase",
      "kind": "value",
      "name": "toLocaleUpperCase",
      "signature": "let toLocaleUpperCase: t => t",
      "docstrings": ["`toLocaleUpperCase(str)` converts `str` to upper case using the current locale.\n\nSee [`String.to:LocaleUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase)\non MDN."]
    }, 
    {
      "id": "Js.String.trim",
      "kind": "value",
      "name": "trim",
      "signature": "let trim: t => t",
      "docstrings": ["`trim(str)` returns a string that is `str` with whitespace stripped from both\nends. Internal whitespace is not removed.\n\nSee [`String.trim`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim)\non MDN.\n\n```rescript\nJs.String.trim(\"   abc def   \") == \"abc def\"\nJs.String.trim(\"\\n\\r\\t abc def \\n\\n\\t\\r \") == \"abc def\"\n```"]
    }, 
    {
      "id": "Js.String.anchor",
      "kind": "value",
      "name": "anchor",
      "signature": "let anchor: (t, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.link",
      "kind": "value",
      "name": "link",
      "signature": "let link: (t, t) => t",
      "docstrings": []
    }, 
    {
      "id": "Js.String.castToArrayLike",
      "kind": "value",
      "name": "castToArrayLike",
      "signature": "let castToArrayLike: t => Js_array2.array_like<t>",
      "docstrings": ["Casts its argument to an `array_like` entity that can be processed by functions\nsuch as `Js.Array2.fromMap()`\n\n```rescript\nlet s = \"abcde\"\nlet arr = Js.Array2.fromMap(Js.String.castToArrayLike(s), x => x)\narr == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```"]
    }]
  }, 
  {
    "id": "Js.String2",
    "kind": "moduleAlias",
    "name": "String2",
    "docstrings": ["Provide bindings to JS string"],
    "items": [
    {
      "id": "Js.String2.t",
      "kind": "type",
      "name": "t",
      "signature": "type t = string",
      "docstrings": []
    }, 
    {
      "id": "Js.String2.make",
      "kind": "value",
      "name": "make",
      "signature": "let make: 'a => t",
      "docstrings": ["`make(value)` converts the given value to a `string`.\n\n```rescript\nJs.String2.make(3.5) == \"3.5\"\nJs.String2.make([1, 2, 3]) == \"1,2,3\"\n```"]
    }, 
    {
      "id": "Js.String2.fromCharCode",
      "kind": "value",
      "name": "fromCharCode",
      "signature": "let fromCharCode: int => t",
      "docstrings": ["`fromCharCode(n)` creates a `string` containing the character corresponding to\nthat number; `n` ranges from 0 to 65535.If out of range, the lower 16 bits of\nthe value are used. Thus, `fromCharCode(0x1F63A)` gives the same result as\n`fromCharCode(0xF63A)`.\n\nSee [`String.fromCharCode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\non MDN.\n\n```rescript\nJs.String2.fromCharCode(65) == \"A\"\nJs.String2.fromCharCode(0x3c8) == `ψ`\nJs.String2.fromCharCode(0xd55c) == `한`\nJs.String2.fromCharCode(-64568) == `ψ`\n```"]
    }, 
    {
      "id": "Js.String2.fromCharCodeMany",
      "kind": "value",
      "name": "fromCharCodeMany",
      "signature": "let fromCharCodeMany: array<int> => t",
      "docstrings": ["`fromCharCodeMany([n1, n2, n3])` creates a `string` from the characters\ncorresponding to the given numbers, using the same rules as `fromCharCode`.\n\nSee [`String.fromCharCode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\non MDN."]
    }, 
    {
      "id": "Js.String2.fromCodePoint",
      "kind": "value",
      "name": "fromCodePoint",
      "signature": "let fromCodePoint: int => t",
      "docstrings": ["`fromCodePoint(n)` creates a `string` containing the character corresponding to\nthat numeric code point. If the number is not a valid code point, it raises\n`RangeError`. Thus, `fromCodePoint(0x1F63A)` will produce a correct value,\nunlike `fromCharCode(0x1F63A)`, and `fromCodePoint(-5)` will raise a\n`RangeError`.\n\nSee [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\non MDN.\n\n```rescript\nJs.String2.fromCodePoint(65) == \"A\"\nJs.String2.fromCodePoint(0x3c8) == `ψ`\nJs.String2.fromCodePoint(0xd55c) == `한`\nJs.String2.fromCodePoint(0x1f63a) == `😺`\n```"]
    }, 
    {
      "id": "Js.String2.fromCodePointMany",
      "kind": "value",
      "name": "fromCodePointMany",
      "signature": "let fromCodePointMany: array<int> => t",
      "docstrings": ["`fromCodePointMany([n1, n2, n3])` creates a `string` from the characters\ncorresponding to the given code point numbers, using the same rules as\n`fromCodePoint`.\n\nSee [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\non MDN.\n\n```rescript\nJs.String2.fromCodePointMany([0xd55c, 0xae00, 0x1f63a]) == `한글😺`\n```"]
    }, 
    {
      "id": "Js.String2.length",
      "kind": "value",
      "name": "length",
      "signature": "let length: t => int",
      "docstrings": ["`length(s)` returns the length of the given `string`.\n\nSee [`String.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length)\non MDN.\n\n```rescript\nJs.String2.length(\"abcd\") == 4\n```"]
    }, 
    {
      "id": "Js.String2.get",
      "kind": "value",
      "name": "get",
      "signature": "let get: (t, int) => t",
      "docstrings": ["`get(s, n)` returns as a `string` the character at the given index number. If\n`n` is out of range, this function returns `undefined`,so at some point this\nfunction may be modified to return `option(string)`.\n\n```rescript\nJs.String2.get(\"Reason\", 0) == \"R\"\nJs.String2.get(\"Reason\", 4) == \"o\"\nJs.String2.get(`Rẽasöń`, 5) == `ń`\n```"]
    }, 
    {
      "id": "Js.String2.charAt",
      "kind": "value",
      "name": "charAt",
      "signature": "let charAt: (t, int) => t",
      "docstrings": ["`charAt(s, n)` gets the character at index `n` within string `s`. If `n` is\nnegative or greater than the length of `s`, it returns the empty string. If the\nstring contains characters outside the range \\u0000-\\uffff, it will return the\nfirst 16-bit value at that position in the string.\n\nSee [`String.charAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt)\non MDN.\n\n```rescript\nJs.String2.charAt(\"Reason\", 0) == \"R\"\nJs.String2.charAt(\"Reason\", 12) == \"\"\nJs.String2.charAt(`Rẽasöń`, 5) == `ń`\n```"]
    }, 
    {
      "id": "Js.String2.charCodeAt",
      "kind": "value",
      "name": "charCodeAt",
      "signature": "let charCodeAt: (t, int) => float",
      "docstrings": ["`charCodeAt(s, n)` returns the character code at position `n` in string `s`;\nthe result is in the range 0-65535, unlke `codePointAt`, so it will not work\ncorrectly for characters with code points greater than or equal to 0x10000. The\nreturn type is `float` because this function returns NaN if `n` is less than\nzero or greater than the length of the string.\n\nSee [`String.charCodeAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt)\non MDN.\n\n```rescript\nJs.String2.charCodeAt(`😺`, 0) == 0xd83d->Belt.Int.toFloat\nJs.String2.codePointAt(`😺`, 0) == Some(0x1f63a)\n```"]
    }, 
    {
      "id": "Js.String2.codePointAt",
      "kind": "value",
      "name": "codePointAt",
      "signature": "let codePointAt: (t, int) => option<int>",
      "docstrings": ["`codePointAt(s, n)` returns the code point at position `n` within string `s` as\na `Some(value)`. The return value handles code points greater than or equal to\n0x10000. If there is no code point at the given position, the function returns\n`None`.\n\nSee [`String.codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)\non MDN.\n\n```rescript\nJs.String2.codePointAt(`¿😺?`, 1) == Some(0x1f63a)\nJs.String2.codePointAt(\"abc\", 5) == None\n```"]
    }, 
    {
      "id": "Js.String2.concat",
      "kind": "value",
      "name": "concat",
      "signature": "let concat: (t, t) => t",
      "docstrings": ["`concat(original, append)` returns a new `string` with `append` added after\n`original`.\n\nSee [`String.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)\non MDN.\n\n```rescript\nJs.String2.concat(\"cow\", \"bell\") == \"cowbell\"\n```"]
    }, 
    {
      "id": "Js.String2.concatMany",
      "kind": "value",
      "name": "concatMany",
      "signature": "let concatMany: (t, array<t>) => t",
      "docstrings": ["`concatMany(original, arr)` returns a new `string` consisting of each item of an\narray of strings added to the `original` string.\n\nSee [`String.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)\non MDN.\n\n```rescript\nJs.String2.concatMany(\"1st\", [\"2nd\", \"3rd\", \"4th\"]) == \"1st2nd3rd4th\"\n```"]
    }, 
    {
      "id": "Js.String2.endsWith",
      "kind": "value",
      "name": "endsWith",
      "signature": "let endsWith: (t, t) => bool",
      "docstrings": ["ES2015: `endsWith(str, substr)` returns `true` if the `str` ends with `substr`,\n`false` otherwise.\n\nSee [`String.endsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith)\non MDN.\n\n```rescript\nJs.String2.endsWith(\"ReScript\", \"Script\") == true\nJs.String2.endsWith(\"C++\", \"Script\") == false\n```"]
    }, 
    {
      "id": "Js.String2.endsWithFrom",
      "kind": "value",
      "name": "endsWithFrom",
      "signature": "let endsWithFrom: (t, t, int) => bool",
      "docstrings": ["`endsWithFrom(str, ending, len)` returns `true` if the first len characters of\n`str` end with `ending`, `false` otherwise. If `len` is greater than or equal\nto the length of `str`, then it works like `endsWith`. (Honestly, this should\nhave been named endsWithAt, but oh well).\n\nSee [`String.endsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith)\non MDN.\n\n```rescript\nJs.String2.endsWithFrom(\"abcd\", \"cd\", 4) == true\nJs.String2.endsWithFrom(\"abcde\", \"cd\", 3) == false\nJs.String2.endsWithFrom(\"abcde\", \"cde\", 99) == true\nJs.String2.endsWithFrom(\"example.dat\", \"ple\", 7) == true\n```"]
    }, 
    {
      "id": "Js.String2.includes",
      "kind": "value",
      "name": "includes",
      "signature": "let includes: (t, t) => bool",
      "docstrings": ["ES2015: `includes(str, searchValue)` returns `true` if `searchValue` is found\nanywhere within `str`, false otherwise.\n\nSee [`String.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)\non MDN.\n\n```rescript\nJs.String2.includes(\"programmer\", \"gram\") == true\nJs.String2.includes(\"programmer\", \"er\") == true\nJs.String2.includes(\"programmer\", \"pro\") == true\nJs.String2.includes(\"programmer.dat\", \"xyz\") == false\n```"]
    }, 
    {
      "id": "Js.String2.includesFrom",
      "kind": "value",
      "name": "includesFrom",
      "signature": "let includesFrom: (t, t, int) => bool",
      "docstrings": ["ES2015: `includes(str, searchValue start)` returns `true` if `searchValue` is\nfound anywhere within `str` starting at character number `start` (where 0 is\nthe first character), `false` otherwise.\n\nSee [`String.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)\non MDN.\n\n```rescript\nJs.String2.includesFrom(\"programmer\", \"gram\", 1) == true\nJs.String2.includesFrom(\"programmer\", \"gram\", 4) == false\nJs.String2.includesFrom(`대한민국`, `한`, 1) == true\n```"]
    }, 
    {
      "id": "Js.String2.indexOf",
      "kind": "value",
      "name": "indexOf",
      "signature": "let indexOf: (t, t) => int",
      "docstrings": ["ES2015: `indexOf(str, searchValue)` returns the position at which `searchValue`\nwas first found within `str`, or -1 if `searchValue` is not in `str`.\n\nSee [`String.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)\non MDN.\n\n```rescript\nJs.String2.indexOf(\"bookseller\", \"ok\") == 2\nJs.String2.indexOf(\"bookseller\", \"sell\") == 4\nJs.String2.indexOf(\"beekeeper\", \"ee\") == 1\nJs.String2.indexOf(\"bookseller\", \"xyz\") == -1\n```"]
    }, 
    {
      "id": "Js.String2.indexOfFrom",
      "kind": "value",
      "name": "indexOfFrom",
      "signature": "let indexOfFrom: (t, t, int) => int",
      "docstrings": ["`indexOfFrom(str, searchValue, start)` returns the position at which\n`searchValue` was found within `str` starting at character position `start`, or\n-1 if `searchValue` is not found in that portion of `str`. The return value is\nrelative to the beginning of the string, no matter where the search started\nfrom.\n\nSee [`String.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)\non MDN.\n\n```rescript\nJs.String2.indexOfFrom(\"bookseller\", \"ok\", 1) == 2\nJs.String2.indexOfFrom(\"bookseller\", \"sell\", 2) == 4\nJs.String2.indexOfFrom(\"bookseller\", \"sell\", 5) == -1\n```"]
    }, 
    {
      "id": "Js.String2.lastIndexOf",
      "kind": "value",
      "name": "lastIndexOf",
      "signature": "let lastIndexOf: (t, t) => int",
      "docstrings": ["`lastIndexOf(str, searchValue)` returns the position of the last occurrence of\n`searchValue` within `str`, searching backwards from the end of the string.\nReturns -1 if `searchValue` is not in `str`. The return value is always\nrelative to the beginning of the string.\n\nSee [`String.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf)\non MDN.\n\n```rescript\nJs.String2.lastIndexOf(\"bookseller\", \"ok\") == 2\nJs.String2.lastIndexOf(\"beekeeper\", \"ee\") == 4\nJs.String2.lastIndexOf(\"abcdefg\", \"xyz\") == -1\n```"]
    }, 
    {
      "id": "Js.String2.lastIndexOfFrom",
      "kind": "value",
      "name": "lastIndexOfFrom",
      "signature": "let lastIndexOfFrom: (t, t, int) => int",
      "docstrings": ["`lastIndexOfFrom(str, searchValue, start)` returns the position of the last\noccurrence of `searchValue` within `str`, searching backwards from the given\nstart position. Returns -1 if `searchValue` is not in `str`. The return value\nis always relative to the beginning of the string.\n\nSee [`String.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf)\non MDN.\n\n```rescript\nJs.String2.lastIndexOfFrom(\"bookseller\", \"ok\", 6) == 2\nJs.String2.lastIndexOfFrom(\"beekeeper\", \"ee\", 8) == 4\nJs.String2.lastIndexOfFrom(\"beekeeper\", \"ee\", 3) == 1\nJs.String2.lastIndexOfFrom(\"abcdefg\", \"xyz\", 4) == -1\n```"]
    }, 
    {
      "id": "Js.String2.localeCompare",
      "kind": "value",
      "name": "localeCompare",
      "signature": "let localeCompare: (t, t) => float",
      "docstrings": ["`localeCompare(reference, comparison)` returns\n- a negative value if reference comes before comparison in sort order\n- zero if reference and comparison have the same sort order\n- a positive value if reference comes after comparison in sort order\n\nSee [`String.localeCompare`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare) on MDN.\n\n```rescript\nJs.String2.localeCompare(\"zebra\", \"ant\") > 0.0\nJs.String2.localeCompare(\"ant\", \"zebra\") < 0.0\nJs.String2.localeCompare(\"cat\", \"cat\") == 0.0\nJs.String2.localeCompare(\"CAT\", \"cat\") > 0.0\n```"]
    }, 
    {
      "id": "Js.String2.match_",
      "kind": "value",
      "name": "match_",
      "signature": "let match_: (t, Js_re.t) => option<array<option<t>>>",
      "docstrings": ["`match(str, regexp)` matches a `string` against the given `regexp`. If there is\nno match, it returns `None`. For regular expressions without the g modifier, if\n  there is a match, the return value is `Some(array)` where the array contains:\n- The entire matched string\n- Any capture groups if the regexp had parentheses\nFor regular expressions with the g modifier, a matched expression returns\n`Some(array)` with all the matched substrings and no capture groups.\n\nSee [`String.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\non MDN.\n\n```rescript\nJs.String2.match_(\"The better bats\", %re(\"/b[aeiou]t/\")) == Some([\"bet\"])\nJs.String2.match_(\"The better bats\", %re(\"/b[aeiou]t/g\")) == Some([\"bet\", \"bat\"])\nJs.String2.match_(\"Today is 2018-04-05.\", %re(\"/(\\d+)-(\\d+)-(\\d+)/\")) ==\n  Some([\"2018-04-05\", \"2018\", \"04\", \"05\"])\nJs.String2.match_(\"The large container.\", %re(\"/b[aeiou]g/\")) == None\n```"]
    }, 
    {
      "id": "Js.String2.normalize",
      "kind": "value",
      "name": "normalize",
      "signature": "let normalize: t => t",
      "docstrings": ["`normalize(str)` returns the normalized Unicode string using Normalization Form\nCanonical (NFC) Composition. Consider the character ã, which can be represented\nas the single codepoint \\u00e3 or the combination of a lower case letter A\n\\u0061 and a combining tilde \\u0303. Normalization ensures that both can be\nstored in an equivalent binary representation.\n\nSee [`String.normalize`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\non MDN. See also [Unicode technical report\n#15](https://unicode.org/reports/tr15/) for details."]
    }, 
    {
      "id": "Js.String2.normalizeByForm",
      "kind": "value",
      "name": "normalizeByForm",
      "signature": "let normalizeByForm: (t, t) => t",
      "docstrings": ["ES2015: `normalize(str, form)` returns the normalized Unicode string using the\nspecified form of normalization, which may be one of:\n- \"NFC\" — Normalization Form Canonical Composition.\n- \"NFD\" — Normalization Form Canonical Decomposition.\n- \"NFKC\" — Normalization Form Compatibility Composition.\n- \"NFKD\" — Normalization Form Compatibility Decomposition.\n\nSee [`String.normalize`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize) on MDN.\nSee also [Unicode technical report #15](https://unicode.org/reports/tr15/) for details."]
    }, 
    {
      "id": "Js.String2.repeat",
      "kind": "value",
      "name": "repeat",
      "signature": "let repeat: (t, int) => t",
      "docstrings": ["`repeat(str, n)` returns a `string` that consists of `n` repetitions of `str`.\nRaises `RangeError` if `n` is negative.\n\nSee [`String.repeat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat)\non MDN.\n\n```rescript\nJs.String2.repeat(\"ha\", 3) == \"hahaha\"\nJs.String2.repeat(\"empty\", 0) == \"\"\n```"]
    }, 
    {
      "id": "Js.String2.replace",
      "kind": "value",
      "name": "replace",
      "signature": "let replace: (t, t, t) => t",
      "docstrings": ["ES2015: `replace(str, substr, newSubstr)` returns a new `string` which is\nidentical to `str` except with the first matching instance of `substr` replaced\nby `newSubstr`. `substr` is treated as a verbatim string to match, not a\nregular expression.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```rescript\nJs.String2.replace(\"old string\", \"old\", \"new\") == \"new string\"\nJs.String2.replace(\"the cat and the dog\", \"the\", \"this\") == \"this cat and the dog\"\n```"]
    }, 
    {
      "id": "Js.String2.replaceByRe",
      "kind": "value",
      "name": "replaceByRe",
      "signature": "let replaceByRe: (t, Js_re.t, t) => t",
      "docstrings": ["`replaceByRe(str, regex, replacement)` returns a new `string` where occurrences\nmatching regex have been replaced by `replacement`.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```rescript\nJs.String2.replaceByRe(\"vowels be gone\", %re(\"/[aeiou]/g\"), \"x\") == \"vxwxls bx gxnx\"\nJs.String2.replaceByRe(\"Juan Fulano\", %re(\"/(\\w+) (\\w+)/\"), \"$2, $1\") == \"Fulano, Juan\"\n```"]
    }, 
    {
      "id": "Js.String2.unsafeReplaceBy0",
      "kind": "value",
      "name": "unsafeReplaceBy0",
      "signature": "let unsafeReplaceBy0: (t, Js_re.t, (t, int, t) => t) => t",
      "docstrings": ["Returns a new `string` with some or all matches of a pattern with no capturing\nparentheses replaced by the value returned from the given function. The\nfunction receives as its parameters the matched string, the offset at which the\nmatch begins, and the whole string being matched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```rescript\nlet str = \"beautiful vowels\"\nlet re = %re(\"/[aeiou]/g\")\nlet matchFn = (matchPart, _offset, _wholeString) => Js.String2.toUpperCase(matchPart)\n\nJs.String2.unsafeReplaceBy0(str, re, matchFn) == \"bEAUtIfUl vOwEls\"\n```"]
    }, 
    {
      "id": "Js.String2.unsafeReplaceBy1",
      "kind": "value",
      "name": "unsafeReplaceBy1",
      "signature": "let unsafeReplaceBy1: (t, Js_re.t, (t, t, int, t) => t) => t",
      "docstrings": ["Returns a new `string` with some or all matches of a pattern with one set of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstring, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```rescript\nlet str = \"Jony is 40\"\nlet re = %re(\"/(Jony is )\\d+/g\")\nlet matchFn = (_match, part1, _offset, _wholeString) => {\n  part1 ++ \"41\"\n}\n\nJs.String2.unsafeReplaceBy1(str, re, matchFn) == \"Jony is 41\"\n```"]
    }, 
    {
      "id": "Js.String2.unsafeReplaceBy2",
      "kind": "value",
      "name": "unsafeReplaceBy2",
      "signature": "let unsafeReplaceBy2: (t, Js_re.t, (t, t, t, int, t) => t) => t",
      "docstrings": ["Returns a new `string` with some or all matches of a pattern with two sets of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstrings, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```rescript\nlet str = \"7 times 6\"\nlet re = %re(\"/(\\d+) times (\\d+)/\")\nlet matchFn = (_match, p1, p2, _offset, _wholeString) => {\n  switch (Belt.Int.fromString(p1), Belt.Int.fromString(p2)) {\n  | (Some(x), Some(y)) => Belt.Int.toString(x * y)\n  | _ => \"???\"\n  }\n}\n\nJs.String2.unsafeReplaceBy2(str, re, matchFn) == \"42\"\n```"]
    }, 
    {
      "id": "Js.String2.unsafeReplaceBy3",
      "kind": "value",
      "name": "unsafeReplaceBy3",
      "signature": "let unsafeReplaceBy3: (t, Js_re.t, (t, t, t, t, int, t) => t) => t",
      "docstrings": ["Returns a new `string` with some or all matches of a pattern with three sets of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstrings, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN."]
    }, 
    {
      "id": "Js.String2.search",
      "kind": "value",
      "name": "search",
      "signature": "let search: (t, Js_re.t) => int",
      "docstrings": ["`search(str, regexp)` returns the starting position of the first match of\n`regexp` in the given `str`, or -1 if there is no match.\n\nSee [`String.search`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search)\non MDN.\n\n```rescript\nJs.String2.search(\"testing 1 2 3\", %re(\"/\\d+/\")) == 8\nJs.String2.search(\"no numbers\", %re(\"/\\d+/\")) == -1\n```"]
    }, 
    {
      "id": "Js.String2.slice",
      "kind": "value",
      "name": "slice",
      "signature": "let slice: (t, ~from: int, ~to_: int) => t",
      "docstrings": ["`slice(str, from:n1, to_:n2)` returns the substring of `str` starting at\ncharacter `n1` up to but not including `n2`.\n- If either `n1` or `n2` is negative, then it is evaluated as `length(str - n1)` or `length(str - n2)`.\n- If `n2` is greater than the length of `str`, then it is treated as `length(str)`.\n- If `n1` is greater than `n2`, slice returns the empty string.\n\nSee [`String.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) on MDN.\n\n```rescript\nJs.String2.slice(\"abcdefg\", ~from=2, ~to_=5) == \"cde\"\nJs.String2.slice(\"abcdefg\", ~from=2, ~to_=9) == \"cdefg\"\nJs.String2.slice(\"abcdefg\", ~from=-4, ~to_=-2) == \"de\"\nJs.String2.slice(\"abcdefg\", ~from=5, ~to_=1) == \"\"\n```"]
    }, 
    {
      "id": "Js.String2.sliceToEnd",
      "kind": "value",
      "name": "sliceToEnd",
      "signature": "let sliceToEnd: (t, ~from: int) => t",
      "docstrings": ["`sliceToEnd(str, from:n)` returns the substring of `str` starting at character\n`n` to the end of the string.\n- If `n` is negative, then it is evaluated as `length(str - n)`.\n- If `n` is greater than the length of `str`, then sliceToEnd returns the empty string.\n\nSee [`String.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) on MDN.\n\n```rescript\nJs.String2.sliceToEnd(\"abcdefg\", ~from=4) == \"efg\"\nJs.String2.sliceToEnd(\"abcdefg\", ~from=-2) == \"fg\"\nJs.String2.sliceToEnd(\"abcdefg\", ~from=7) == \"\"\n```"]
    }, 
    {
      "id": "Js.String2.split",
      "kind": "value",
      "name": "split",
      "signature": "let split: (t, t) => array<t>",
      "docstrings": ["`split(str, delimiter)` splits the given `str` at every occurrence of\n`delimiter` and returns an array of the resulting substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```rescript\nJs.String2.split(\"2018-01-02\", \"-\") == [\"2018\", \"01\", \"02\"]\nJs.String2.split(\"a,b,,c\", \",\") == [\"a\", \"b\", \"\", \"c\"]\nJs.String2.split(\"good::bad as great::awful\", \"::\") == [\"good\", \"bad as great\", \"awful\"]\nJs.String2.split(\"has-no-delimiter\", \";\") == [\"has-no-delimiter\"]\n```"]
    }, 
    {
      "id": "Js.String2.splitAtMost",
      "kind": "value",
      "name": "splitAtMost",
      "signature": "let splitAtMost: (t, t, ~limit: int) => array<t>",
      "docstrings": ["`splitAtMost delimiter ~limit: n str` splits the given `str` at every occurrence of `delimiter` and returns an array of the first `n` resulting substrings. If `n` is negative or greater than the number of substrings, the array will contain all the substrings.\n\n```\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 3 = [|\"ant\"; \"bee\"; \"cat\"|];;\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 0 = [| |];;\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 9 = [|\"ant\"; \"bee\"; \"cat\"; \"dog\"; \"elk\"|];;\n```"]
    }, 
    {
      "id": "Js.String2.splitByRe",
      "kind": "value",
      "name": "splitByRe",
      "signature": "let splitByRe: (t, Js_re.t) => array<option<t>>",
      "docstrings": ["`splitByRe(str, regex)` splits the given `str` at every occurrence of `regex`\nand returns an array of the resulting substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```rescript\nJs.String2.splitByRe(\"art; bed , cog ;dad\", %re(\"/\\s*[,;]\\s*TODO/\")) == [\n    Some(\"art\"),\n    Some(\"bed\"),\n    Some(\"cog\"),\n    Some(\"dad\"),\n  ]\n```"]
    }, 
    {
      "id": "Js.String2.splitByReAtMost",
      "kind": "value",
      "name": "splitByReAtMost",
      "signature": "let splitByReAtMost: (t, Js_re.t, ~limit: int) => array<option<t>>",
      "docstrings": ["`splitByReAtMost(str, regex, ~limit:n)` splits the given `str` at every\noccurrence of `regex` and returns an array of the first `n` resulting\nsubstrings. If `n` is negative or greater than the number of substrings, the\narray will contain all the substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```rescript\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*TODO/\"), ~limit=3) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n  ]\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*TODO/\"), ~limit=0) == []\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*TODO/\"), ~limit=8) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n    Some(\"four\"),\n  ]\n```"]
    }, 
    {
      "id": "Js.String2.startsWith",
      "kind": "value",
      "name": "startsWith",
      "signature": "let startsWith: (t, t) => bool",
      "docstrings": ["ES2015: `startsWith(str, substr)` returns `true` if the `str` starts with\n`substr`, `false` otherwise.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```rescript\nJs.String2.startsWith(\"ReScript\", \"Re\") == true\nJs.String2.startsWith(\"ReScript\", \"\") == true\nJs.String2.startsWith(\"JavaScript\", \"Re\") == false\n```"]
    }, 
    {
      "id": "Js.String2.startsWithFrom",
      "kind": "value",
      "name": "startsWithFrom",
      "signature": "let startsWithFrom: (t, t, int) => bool",
      "docstrings": ["ES2015: `startsWithFrom(str, substr, n)` returns `true` if the `str` starts\nwith `substr` starting at position `n`, false otherwise. If `n` is negative,\nthe search starts at the beginning of `str`.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```rescript\nJs.String2.startsWithFrom(\"ReScript\", \"Scri\", 2) == true\nJs.String2.startsWithFrom(\"ReScript\", \"\", 2) == true\nJs.String2.startsWithFrom(\"JavaScript\", \"Scri\", 2) == false\n```"]
    }, 
    {
      "id": "Js.String2.substr",
      "kind": "value",
      "name": "substr",
      "signature": "let substr: (t, ~from: int) => t",
      "docstrings": ["`substr(str, ~from:n)` returns the substring of `str` from position `n` to the\nend of the string.\n- If `n` is less than zero, the starting position is the length of `str - n`.\n- If `n` is greater than or equal to the length of `str`, returns the empty string.\n\nJavaScript’s `String.substr()` is a legacy function. When possible, use\n`substring()` instead.\n\nSee [`String.substr`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr)\non MDN.\n\n```rescript\nJs.String2.substr(\"abcdefghij\", ~from=3) == \"defghij\"\nJs.String2.substr(\"abcdefghij\", ~from=-3) == \"hij\"\nJs.String2.substr(\"abcdefghij\", ~from=12) == \"\"\n```"]
    }, 
    {
      "id": "Js.String2.substrAtMost",
      "kind": "value",
      "name": "substrAtMost",
      "signature": "let substrAtMost: (t, ~from: int, ~length: int) => t",
      "docstrings": ["`substrAtMost(str, ~from: pos, ~length: n)` returns the substring of `str` of\nlength `n` starting at position `pos`.\n- If `pos` is less than zero, the starting position is the length of `str - pos`.\n- If `pos` is greater than or equal to the length of `str`, returns the empty string.\n- If `n` is less than or equal to zero, returns the empty string.\n\nJavaScript’s `String.substr()` is a legacy function. When possible, use\n`substring()` instead.\n\nSee [`String.substr`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr)\non MDN.\n\n```rescript\nJs.String2.substrAtMost(\"abcdefghij\", ~from=3, ~length=4) == \"defg\"\nJs.String2.substrAtMost(\"abcdefghij\", ~from=-3, ~length=4) == \"hij\"\nJs.String2.substrAtMost(\"abcdefghij\", ~from=12, ~length=2) == \"\"\n```"]
    }, 
    {
      "id": "Js.String2.substring",
      "kind": "value",
      "name": "substring",
      "signature": "let substring: (t, ~from: int, ~to_: int) => t",
      "docstrings": ["`substring(str, ~from: start, ~to_: finish)` returns characters `start` up to\nbut not including finish from `str`.\n- If `start` is less than zero, it is treated as zero.\n- If `finish` is zero or negative, the empty string is returned.\n- If `start` is greater than `finish`, the `start` and `finish` points are swapped.\n\nSee [`String.substring`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) on MDN.\n\n```rescript\nJs.String2.substring(\"playground\", ~from=3, ~to_=6) == \"ygr\"\nJs.String2.substring(\"playground\", ~from=6, ~to_=3) == \"ygr\"\nJs.String2.substring(\"playground\", ~from=4, ~to_=12) == \"ground\"\n```"]
    }, 
    {
      "id": "Js.String2.substringToEnd",
      "kind": "value",
      "name": "substringToEnd",
      "signature": "let substringToEnd: (t, ~from: int) => t",
      "docstrings": ["`substringToEnd(str, ~from: start)` returns the substring of `str` from\nposition `start` to the end.\n- If `start` is less than or equal to zero, the entire string is returned.\n- If `start` is greater than or equal to the length of `str`, the empty string is returned.\n\nSee [`String.substring`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) on MDN.\n\n```rescript\nJs.String2.substringToEnd(\"playground\", ~from=4) == \"ground\"\nJs.String2.substringToEnd(\"playground\", ~from=-3) == \"playground\"\nJs.String2.substringToEnd(\"playground\", ~from=12) == \"\"\n```"]
    }, 
    {
      "id": "Js.String2.toLowerCase",
      "kind": "value",
      "name": "toLowerCase",
      "signature": "let toLowerCase: t => t",
      "docstrings": ["`toLowerCase(str)` converts `str` to lower case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\ngive different results depending upon context, for example with the Greek\nletter sigma, which has two different lower case forms; one when it is the last\ncharacter in a string and another when it is not.\n\nSee [`String.toLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)\non MDN.\n\n```rescript\nJs.String2.toLowerCase(\"ABC\") == \"abc\"\nJs.String2.toLowerCase(`ΣΠ`) == `σπ`\nJs.String2.toLowerCase(`ΠΣ`) == `πς`\n```"]
    }, 
    {
      "id": "Js.String2.toLocaleLowerCase",
      "kind": "value",
      "name": "toLocaleLowerCase",
      "signature": "let toLocaleLowerCase: t => t",
      "docstrings": ["`toLocaleLowerCase(str)` converts `str` to lower case using the current locale.\nSee [`String.toLocaleLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase)\non MDN."]
    }, 
    {
      "id": "Js.String2.toUpperCase",
      "kind": "value",
      "name": "toUpperCase",
      "signature": "let toUpperCase: t => t",
      "docstrings": ["`toUpperCase(str)` converts `str` to upper case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\nexpand the number of letters in the result; for example the German ß\ncapitalizes to two Ses in a row.\n\nSee [`String.toUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase)\non MDN.\n\n```rescript\nJs.String2.toUpperCase(\"abc\") == \"ABC\"\nJs.String2.toUpperCase(`Straße`) == `STRASSE`\nJs.String2.toUpperCase(`πς`) == `ΠΣ`\n```"]
    }, 
    {
      "id": "Js.String2.toLocaleUpperCase",
      "kind": "value",
      "name": "toLocaleUpperCase",
      "signature": "let toLocaleUpperCase: t => t",
      "docstrings": ["`toLocaleUpperCase(str)` converts `str` to upper case using the current locale.\nSee [`String.to:LocaleUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase)\non MDN."]
    }, 
    {
      "id": "Js.String2.trim",
      "kind": "value",
      "name": "trim",
      "signature": "let trim: t => t",
      "docstrings": ["`trim(str)` returns a string that is `str` with whitespace stripped from both\nends. Internal whitespace is not removed.\n\nSee [`String.trim`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim)\non MDN.\n\n```rescript\nJs.String2.trim(\"   abc def   \") == \"abc def\"\nJs.String2.trim(\"\\n\\r\\t abc def \\n\\n\\t\\r \") == \"abc def\"\n```"]
    }, 
    {
      "id": "Js.String2.anchor",
      "kind": "value",
      "name": "anchor",
      "signature": "let anchor: (t, t) => t",
      "docstrings": ["`anchor(anchorText, anchorName)` creates a string with an HTML `<a>` element\nwith name attribute of `anchorName` and `anchorText` as its content. Please do\nnot use this method, as it has been removed from the relevant web standards.\n\nSee [`String.anchor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor)\non MDN.\n\n```rescript\nJs.String2.anchor(\"Page One\", \"page1\") == \"<a name=\"page1\">Page One</a>\"\n```"]
    }, 
    {
      "id": "Js.String2.link",
      "kind": "value",
      "name": "link",
      "signature": "let link: (t, t) => t",
      "docstrings": ["ES2015: `link(linkText, urlText)` creates a string with an HTML `<a>` element\nwith href attribute of `urlText` and `linkText` as its content. Please do not\nuse this method, as it has been removed from the relevant web standards. See\n[`String.link`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link)\non MDN.\n\n```rescript\nJs.String2.link(\"Go to page two\", \"page2.html\") == \"<a href=\"page2.html\">Go to page two</a>\"\n```"]
    }, 
    {
      "id": "Js.String2.castToArrayLike",
      "kind": "value",
      "name": "castToArrayLike",
      "signature": "let castToArrayLike: t => Js_array2.array_like<t>",
      "docstrings": ["Casts its argument to an `array_like` entity that can be processed by functions\nsuch as `Js.Array2.fromMap()`\n\n```rescript\nlet s = \"abcde\"\nlet arr = Js.Array2.fromMap(Js.String2.castToArrayLike(s), x => x)\narr == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```"]
    }]
  }, 
  {
    "id": "Js.Re",
    "kind": "moduleAlias",
    "name": "Re",
    "docstrings": ["Provide bindings to JS regex expression"],
    "items": [
    {
      "id": "Js.Re.t",
      "kind": "type",
      "name": "t",
      "signature": "type t",
      "docstrings": ["The RegExp object."]
    }, 
    {
      "id": "Js.Re.result",
      "kind": "type",
      "name": "result",
      "signature": "type result",
      "docstrings": ["The result of a executing a RegExp on a string."]
    }, 
    {
      "id": "Js.Re.captures",
      "kind": "value",
      "name": "captures",
      "signature": "let captures: result => array<Js.nullable<string>>",
      "docstrings": ["An `array` of the match and captures, the first is the full match and the\n  remaining are the substring captures."]
    }, 
    {
      "id": "Js.Re.matches",
      "kind": "value",
      "name": "matches",
      "deprecated": "Use Js.Re.captures instead",
      "signature": "let matches: result => array<string>",
      "docstrings": ["Deprecated. Use `captures` instead."]
    }, 
    {
      "id": "Js.Re.index",
      "kind": "value",
      "name": "index",
      "signature": "let index: result => int",
      "docstrings": ["0-based index of the match in the input string."]
    }, 
    {
      "id": "Js.Re.input",
      "kind": "value",
      "name": "input",
      "signature": "let input: result => string",
      "docstrings": ["The original input string."]
    }, 
    {
      "id": "Js.Re.fromString",
      "kind": "value",
      "name": "fromString",
      "signature": "let fromString: string => t",
      "docstrings": ["Constructs a RegExp object (Js.Re.t) from a `string`.\n  Regex literals `%re(\"/.../\")` should generally be preferred, but `fromString`\n  is useful when you need to dynamically construct a regex using strings,\n  exactly like when you do so in JavaScript.\n\n  ```rescript\n  let firstReScriptFileExtension = (filename, content) => {\n    let result = Js.Re.fromString(filename ++ \"\\.(res|resi)\")->Js.Re.exec_(content)\n    switch result {\n    | Some(r) => Js.Nullable.toOption(Js.Re.captures(r)[1])\n    | None => None\n    }\n  }\n\n  // outputs \"res\"\n  firstReScriptFileExtension(\"School\", \"School.res School.resi Main.js School.bs.js\")\n  ```"]
    }, 
    {
      "id": "Js.Re.fromStringWithFlags",
      "kind": "value",
      "name": "fromStringWithFlags",
      "signature": "let fromStringWithFlags: (string, ~flags: string) => t",
      "docstrings": ["Constructs a RegExp object (`Js.Re.t`) from a string with the given flags.\n  See `Js.Re.fromString`.\n\n  Valid flags:\n\n  - **g** global\n  - **i** ignore case\n  - **m** multiline\n  - **u** unicode (es2015)\n  - **y** sticky (es2015)"]
    }, 
    {
      "id": "Js.Re.flags",
      "kind": "value",
      "name": "flags",
      "signature": "let flags: t => string",
      "docstrings": ["Returns the enabled flags as a string."]
    }, 
    {
      "id": "Js.Re.global",
      "kind": "value",
      "name": "global",
      "signature": "let global: t => bool",
      "docstrings": ["Returns a `bool` indicating whether the global flag is set."]
    }, 
    {
      "id": "Js.Re.ignoreCase",
      "kind": "value",
      "name": "ignoreCase",
      "signature": "let ignoreCase: t => bool",
      "docstrings": ["Returns a `bool` indicating whether the ignoreCase flag is set."]
    }, 
    {
      "id": "Js.Re.lastIndex",
      "kind": "value",
      "name": "lastIndex",
      "signature": "let lastIndex: t => int",
      "docstrings": ["Returns the index where the next match will start its search. This property\n  will be modified when the RegExp object is used, if the global (\"g\") flag is\n  set.\n\n  ```rescript\n  let re = %re(\"/ab*TODO/g\")\n  let str = \"abbcdefabh\"\n\n  let break = ref(false)\n  while !break.contents {\n    switch Js.Re.exec_(re, str) {\n    | Some(result) => Js.Nullable.iter(Js.Re.captures(result)[0], (. match_) => {\n        let next = Belt.Int.toString(Js.Re.lastIndex(re))\n        Js.log(\"Found \" ++ (match_ ++ (\". Next match starts at \" ++ next)))\n      })\n    | None => break := true\n    }\n  }\n  ```\n\n  See\n  [`RegExp: lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex)\n  on MDN."]
    }, 
    {
      "id": "Js.Re.setLastIndex",
      "kind": "value",
      "name": "setLastIndex",
      "signature": "let setLastIndex: (t, int) => unit",
      "docstrings": ["Sets the index at which the next match will start its search from."]
    }, 
    {
      "id": "Js.Re.multiline",
      "kind": "value",
      "name": "multiline",
      "signature": "let multiline: t => bool",
      "docstrings": ["Returns a `bool` indicating whether the multiline flag is set."]
    }, 
    {
      "id": "Js.Re.source",
      "kind": "value",
      "name": "source",
      "signature": "let source: t => string",
      "docstrings": ["Returns the pattern as a `string`."]
    }, 
    {
      "id": "Js.Re.sticky",
      "kind": "value",
      "name": "sticky",
      "signature": "let sticky: t => bool",
      "docstrings": ["Returns a `bool` indicating whether the sticky flag is set."]
    }, 
    {
      "id": "Js.Re.unicode",
      "kind": "value",
      "name": "unicode",
      "signature": "let unicode: t => bool",
      "docstrings": ["Returns a `bool` indicating whether the unicode flag is set."]
    }, 
    {
      "id": "Js.Re.exec_",
      "kind": "value",
      "name": "exec_",
      "signature": "let exec_: (t, string) => option<result>",
      "docstrings": ["Executes a search on a given string using the given RegExp object.\n  Returns `Some(Js.Re.result)` if a match is found, `None` otherwise.\n\n  ```rescript\n  /* Match \"quick brown\" followed by \"jumps\", ignoring characters in between\n   * Remember \"brown\" and \"jumps\"\n   * Ignore case\n   */\n\n  let re = %re(\"/quick\\s(brown).+?(jumps)/ig\")\n  let result = Js.Re.exec_(re, \"The Quick Brown Fox Jumps Over The Lazy Dog\")\n  ```\n\n  See\n  [`RegExp.prototype.exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec)\n  on MDN."]
    }, 
    {
      "id": "Js.Re.test_",
      "kind": "value",
      "name": "test_",
      "signature": "let test_: (t, string) => bool",
      "docstrings": ["Tests whether the given RegExp object will match a given `string`.\n  Returns true if a match is found, false otherwise.\n\n  ```rescript\n  /* A simple implementation of Js.String.startsWith */\n\n  let str = \"hello world!\"\n\n  let startsWith = (target, substring) =>\n    Js.Re.fromString(\"^\" ++ substring)->Js.Re.test_(target)\n\n  Js.log(str->startsWith(\"hello\")) /* prints \"true\" */\n  ```\n\n  See\n  [`RegExp.prototype.test()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test)\n  on MDN."]
    }]
  }, 
  {
    "id": "Js.Promise",
    "kind": "moduleAlias",
    "name": "Promise",
    "docstrings": ["Provide bindings to JS Promise"],
    "items": [
    {
      "id": "Js.Promise.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a> = promise<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise.error",
      "kind": "type",
      "name": "error",
      "signature": "type error = Js_promise2.error",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise.make",
      "kind": "value",
      "name": "make",
      "signature": "let make: ((~resolve: (. 'a) => unit, ~reject: (. exn) => unit) => unit) => promise<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise.resolve",
      "kind": "value",
      "name": "resolve",
      "signature": "let resolve: 'a => promise<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise.reject",
      "kind": "value",
      "name": "reject",
      "signature": "let reject: exn => promise<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise.all",
      "kind": "value",
      "name": "all",
      "signature": "let all: array<promise<'a>> => promise<array<'a>>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise.all2",
      "kind": "value",
      "name": "all2",
      "signature": "let all2: ((promise<'a0>, promise<'a1>)) => promise<('a0, 'a1)>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise.all3",
      "kind": "value",
      "name": "all3",
      "signature": "let all3: ((promise<'a0>, promise<'a1>, promise<'a2>)) => promise<('a0, 'a1, 'a2)>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise.all4",
      "kind": "value",
      "name": "all4",
      "signature": "let all4: ((promise<'a0>, promise<'a1>, promise<'a2>, promise<'a3>)) => promise<(\\n  'a0,\\n  'a1,\\n  'a2,\\n  'a3,\\n)>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise.all5",
      "kind": "value",
      "name": "all5",
      "signature": "let all5: ((promise<'a0>, promise<'a1>, promise<'a2>, promise<'a3>, promise<'a4>)) => promise<(\\n  'a0,\\n  'a1,\\n  'a2,\\n  'a3,\\n  'a4,\\n)>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise.all6",
      "kind": "value",
      "name": "all6",
      "signature": "let all6: (\\n  (promise<'a0>, promise<'a1>, promise<'a2>, promise<'a3>, promise<'a4>, promise<'a5>)\\n) => promise<('a0, 'a1, 'a2, 'a3, 'a4, 'a5)>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise.race",
      "kind": "value",
      "name": "race",
      "signature": "let race: array<promise<'a>> => promise<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise.then_",
      "kind": "value",
      "name": "then_",
      "signature": "let then_: ('a => promise<'b>, promise<'a>) => promise<'b>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise.catch",
      "kind": "value",
      "name": "catch",
      "signature": "let catch: (error => promise<'a>, promise<'a>) => promise<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise.unsafe_async",
      "kind": "value",
      "name": "unsafe_async",
      "signature": "let unsafe_async: 'a => promise<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise.unsafe_await",
      "kind": "value",
      "name": "unsafe_await",
      "signature": "let unsafe_await: promise<'a> => 'a",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Promise2",
    "kind": "moduleAlias",
    "name": "Promise2",
    "docstrings": ["Provide bindings to JS Promise"],
    "items": [
    {
      "id": "Js.Promise2.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a> = promise<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise2.error",
      "kind": "type",
      "name": "error",
      "signature": "type error",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise2.then",
      "kind": "value",
      "name": "then",
      "signature": "let then: (promise<'a>, 'a => promise<'b>) => promise<'b>",
      "docstrings": ["Type-safe t-first then"]
    }, 
    {
      "id": "Js.Promise2.catch",
      "kind": "value",
      "name": "catch",
      "signature": "let catch: (promise<'a>, error => promise<'a>) => promise<'a>",
      "docstrings": ["Type-safe t-first catch"]
    }, 
    {
      "id": "Js.Promise2.make",
      "kind": "value",
      "name": "make",
      "signature": "let make: ((~resolve: (. 'a) => unit, ~reject: (. exn) => unit) => unit) => promise<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise2.resolve",
      "kind": "value",
      "name": "resolve",
      "signature": "let resolve: 'a => promise<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise2.reject",
      "kind": "value",
      "name": "reject",
      "signature": "let reject: exn => promise<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise2.all",
      "kind": "value",
      "name": "all",
      "signature": "let all: array<promise<'a>> => promise<array<'a>>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise2.all2",
      "kind": "value",
      "name": "all2",
      "signature": "let all2: ((promise<'a0>, promise<'a1>)) => promise<('a0, 'a1)>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise2.all3",
      "kind": "value",
      "name": "all3",
      "signature": "let all3: ((promise<'a0>, promise<'a1>, promise<'a2>)) => promise<('a0, 'a1, 'a2)>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise2.all4",
      "kind": "value",
      "name": "all4",
      "signature": "let all4: ((promise<'a0>, promise<'a1>, promise<'a2>, promise<'a3>)) => promise<(\\n  'a0,\\n  'a1,\\n  'a2,\\n  'a3,\\n)>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise2.all5",
      "kind": "value",
      "name": "all5",
      "signature": "let all5: ((promise<'a0>, promise<'a1>, promise<'a2>, promise<'a3>, promise<'a4>)) => promise<(\\n  'a0,\\n  'a1,\\n  'a2,\\n  'a3,\\n  'a4,\\n)>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise2.all6",
      "kind": "value",
      "name": "all6",
      "signature": "let all6: (\\n  (promise<'a0>, promise<'a1>, promise<'a2>, promise<'a3>, promise<'a4>, promise<'a5>)\\n) => promise<('a0, 'a1, 'a2, 'a3, 'a4, 'a5)>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise2.race",
      "kind": "value",
      "name": "race",
      "signature": "let race: array<promise<'a>> => promise<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise2.unsafe_async",
      "kind": "value",
      "name": "unsafe_async",
      "signature": "let unsafe_async: 'a => promise<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Promise2.unsafe_await",
      "kind": "value",
      "name": "unsafe_await",
      "signature": "let unsafe_await: promise<'a> => 'a",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Date",
    "kind": "moduleAlias",
    "name": "Date",
    "docstrings": ["Provide bindings for JS Date"],
    "items": [
    {
      "id": "Js.Date.t",
      "kind": "type",
      "name": "t",
      "signature": "type t",
      "docstrings": []
    }, 
    {
      "id": "Js.Date.valueOf",
      "kind": "value",
      "name": "valueOf",
      "signature": "let valueOf: t => float",
      "docstrings": ["Returns the primitive value of this date, equivalent to `getTime()`. (See\n[`Date.valueOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf)\non MDN.)\n\n```rescript\nJs.Date.valueOf(exampleDate) == 123456654321.0\n```"]
    }, 
    {
      "id": "Js.Date.make",
      "kind": "value",
      "name": "make",
      "signature": "let make: unit => t",
      "docstrings": ["Returns a date representing the current time. See [`Date()`\nConstructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date)\non MDN.\n\n```rescript\nlet now = Js.Date.make()\n```"]
    }, 
    {
      "id": "Js.Date.fromFloat",
      "kind": "value",
      "name": "fromFloat",
      "signature": "let fromFloat: float => t",
      "docstrings": ["Returns a date representing the given argument, which is a number of\nmilliseconds since the epoch. See [`Date()`\nConstructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date)\non MDN.\n\n```rescript\nJs.Date.fromFloat(123456654321.0) == exampleDate\n```"]
    }, 
    {
      "id": "Js.Date.fromString",
      "kind": "value",
      "name": "fromString",
      "signature": "let fromString: string => t",
      "docstrings": ["Returns a `Js.Date.t` represented by the given string. The string can be in\n“IETF-compliant RFC 2822 timestamps, and also strings in a version of ISO8601.”\nReturns `NaN` if given an invalid date string. According to the [`Date()`\nConstructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date)\ndocumentation on MDN, its use is discouraged.\n\n```rescript\nJs.Date.fromString(\"Thu, 29 Nov 1973 21:30:54.321 GMT\") == exampleDate\nJs.Date.fromString(\"1973-11-29T21:30:54.321Z00:00\") == exampleDate\nJs.Date.fromString(\"Thor, 32 Lok -19 60:70:80 XYZ\") // returns NaN\n```"]
    }, 
    {
      "id": "Js.Date.makeWithYM",
      "kind": "value",
      "name": "makeWithYM",
      "signature": "let makeWithYM: (~year: float, ~month: float, unit) => t",
      "docstrings": ["Returns a date representing midnight of the first day of the given month and\nyear in the current time zone. Fractional parts of arguments are ignored. See\n[`Date()`\nConstructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date)\non MDN.\n\n```rescript\nlet november1 = Js.Date.makeWithYM(~year=2020.0, ~month=10.0, ())\n```"]
    }, 
    {
      "id": "Js.Date.makeWithYMD",
      "kind": "value",
      "name": "makeWithYMD",
      "signature": "let makeWithYMD: (~year: float, ~month: float, ~date: float, unit) => t",
      "docstrings": ["Returns a date representing midnight of the given date of the given month and\nyear in the current time zone. Fractional parts of arguments are ignored. See\n[`Date()`\nConstructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date)\non MDN."]
    }, 
    {
      "id": "Js.Date.makeWithYMDH",
      "kind": "value",
      "name": "makeWithYMDH",
      "signature": "let makeWithYMDH: (~year: float, ~month: float, ~date: float, ~hours: float, unit) => t",
      "docstrings": ["Returns a date representing the given date of the given month and year, at zero\nminutes and zero seconds past the given `hours`, in the current time zone.\nFractional parts of arguments are ignored. See [`Date()`\nConstructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date)\non MDN. Fractional parts of the arguments are ignored."]
    }, 
    {
      "id": "Js.Date.makeWithYMDHM",
      "kind": "value",
      "name": "makeWithYMDHM",
      "signature": "let makeWithYMDHM: (\\n  ~year: float,\\n  ~month: float,\\n  ~date: float,\\n  ~hours: float,\\n  ~minutes: float,\\n  unit,\\n) => t",
      "docstrings": ["Returns a date representing the given date of the given month and year, at zero\nseconds past the given time in hours and minutes in the current time zone.\nFractional parts of arguments are ignored. See [`Date()`\nConstructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date)\non MDN."]
    }, 
    {
      "id": "Js.Date.makeWithYMDHMS",
      "kind": "value",
      "name": "makeWithYMDHMS",
      "signature": "let makeWithYMDHMS: (\\n  ~year: float,\\n  ~month: float,\\n  ~date: float,\\n  ~hours: float,\\n  ~minutes: float,\\n  ~seconds: float,\\n  unit,\\n) => t",
      "docstrings": ["Returns a date representing the given date of the given month and year, at the\ngiven time in hours, minutes, and seconds in the current time zone. Fractional\nparts of arguments are ignored. See [`Date()`\nConstructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date)\non MDN.\n\n```rescript\nJs.Date.makeWithYMDHMS(\n  ~year=1973.0,\n  ~month=11.0,\n  ~date=29.0,\n  ~hours=21.0,\n  ~minutes=30.0,\n  ~seconds=54.321,\n  (),\n) == exampleDate\n```"]
    }, 
    {
      "id": "Js.Date.utcWithYM",
      "kind": "value",
      "name": "utcWithYM",
      "signature": "let utcWithYM: (~year: float, ~month: float, unit) => float",
      "docstrings": ["Returns a float representing the number of milliseconds past the epoch for\nmidnight of the first day of the given month and year in UTC. Fractional parts\nof arguments are ignored. See\n[`Date.UTC`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC)\non MDN.\n\n```rescript\nlet november1 = Js.Date.utcWithYM(~year=2020.0, ~month=10.0, ())\n```"]
    }, 
    {
      "id": "Js.Date.utcWithYMD",
      "kind": "value",
      "name": "utcWithYMD",
      "signature": "let utcWithYMD: (~year: float, ~month: float, ~date: float, unit) => float",
      "docstrings": ["Returns a float representing the number of milliseconds past the epoch for\nmidnight of the given date of the given month and year in UTC. Fractional parts\nof arguments are ignored. See\n[`Date.UTC`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC)\non MDN."]
    }, 
    {
      "id": "Js.Date.utcWithYMDH",
      "kind": "value",
      "name": "utcWithYMDH",
      "signature": "let utcWithYMDH: (~year: float, ~month: float, ~date: float, ~hours: float, unit) => float",
      "docstrings": ["Returns a float representing the number of milliseconds past the epoch for\nmidnight of the given date of the given month and year, at zero minutes and\nseconds past the given hours in UTC. Fractional parts of arguments are ignored.\nSee\n[`Date.UTC`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC)\non MDN."]
    }, 
    {
      "id": "Js.Date.utcWithYMDHM",
      "kind": "value",
      "name": "utcWithYMDHM",
      "signature": "let utcWithYMDHM: (\\n  ~year: float,\\n  ~month: float,\\n  ~date: float,\\n  ~hours: float,\\n  ~minutes: float,\\n  unit,\\n) => float",
      "docstrings": ["Returns a float representing the number of milliseconds past the epoch for\nmidnight of the given date of the given month and year, at zero seconds past\nthe given number of minutes past the given hours in UTC. Fractional parts of\narguments are ignored. See\n[`Date.UTC`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC)\non MDN."]
    }, 
    {
      "id": "Js.Date.utcWithYMDHMS",
      "kind": "value",
      "name": "utcWithYMDHMS",
      "signature": "let utcWithYMDHMS: (\\n  ~year: float,\\n  ~month: float,\\n  ~date: float,\\n  ~hours: float,\\n  ~minutes: float,\\n  ~seconds: float,\\n  unit,\\n) => float",
      "docstrings": ["Returns a float representing the number of milliseconds past the epoch for\nmidnight of the given date of the given month and year, at the given time in\nhours, minutes and seconds in UTC. Fractional parts of arguments are ignored.\n\nSee\n[`Date.UTC`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC)\non MDN."]
    }, 
    {
      "id": "Js.Date.now",
      "kind": "value",
      "name": "now",
      "signature": "let now: unit => float",
      "docstrings": ["Returns the current time as number of milliseconds since Unix epoch."]
    }, 
    {
      "id": "Js.Date.parse",
      "kind": "value",
      "name": "parse",
      "deprecated": "Please use `fromString` instead",
      "signature": "let parse: string => t",
      "docstrings": []
    }, 
    {
      "id": "Js.Date.parseAsFloat",
      "kind": "value",
      "name": "parseAsFloat",
      "signature": "let parseAsFloat: string => float",
      "docstrings": ["Returns a float with the number of milliseconds past the epoch represented by\nthe given string. The string can be in “IETF-compliant RFC 2822 timestamps, and\nalso strings in a version of ISO8601.” Returns `NaN` if given an invalid date\nstring. According to the\n[`Date.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse)\ndocumentation on MDN, its use is discouraged. Returns `NaN` if passed invalid\ndate string."]
    }, 
    {
      "id": "Js.Date.getDate",
      "kind": "value",
      "name": "getDate",
      "signature": "let getDate: t => float",
      "docstrings": ["Returns the day of the month for its argument. The argument is evaluated in the\ncurrent time zone. See\n[`Date.getDate`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate)\non MDN.\n\n```rescript\nJs.Date.getDate(exampleDate) == 29.0\n```"]
    }, 
    {
      "id": "Js.Date.getDay",
      "kind": "value",
      "name": "getDay",
      "signature": "let getDay: t => float",
      "docstrings": ["Returns the day of the week (0.0-6.0) for its argument, where 0.0 represents\nSunday. The argument is evaluated in the current time zone.  See\n[`Date.getDay`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay)\non MDN.\n\n```rescript\nJs.Date.getDay(exampleDate) == 4.0\n```"]
    }, 
    {
      "id": "Js.Date.getFullYear",
      "kind": "value",
      "name": "getFullYear",
      "signature": "let getFullYear: t => float",
      "docstrings": ["Returns the full year (as opposed to the range 0-99) for its argument. The\nargument is evaluated in the current time zone. See\n[`Date.getFullYear`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear)\non MDN.\n\n```rescript\nJs.Date.getFullYear(exampleDate) == 1973.0\n```"]
    }, 
    {
      "id": "Js.Date.getHours",
      "kind": "value",
      "name": "getHours",
      "signature": "let getHours: t => float",
      "docstrings": ["Returns the hours for its argument, evaluated in the current time zone. See\n[`Date.getHours`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours)\non MDN.\n\n```rescript\nJs.Date.getHours(exampleDate) == 22.0 // Vienna is in GMT+01:00\n```"]
    }, 
    {
      "id": "Js.Date.getMilliseconds",
      "kind": "value",
      "name": "getMilliseconds",
      "signature": "let getMilliseconds: t => float",
      "docstrings": ["Returns the number of milliseconds for its argument, evaluated in the current\ntime zone. See\n[`Date.getMilliseconds`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds)\non MDN.\n\n```rescript\nJs.Date.getMilliseconds(exampleDate) == 321.0\n```"]
    }, 
    {
      "id": "Js.Date.getMinutes",
      "kind": "value",
      "name": "getMinutes",
      "signature": "let getMinutes: t => float",
      "docstrings": ["Returns the number of minutes for its argument, evaluated in the current time\nzone. See\n[`Date.getMinutes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes)\non MDN.\n\n```rescript\nJs.Date.getMinutes(exampleDate) == 30.0\n```"]
    }, 
    {
      "id": "Js.Date.getMonth",
      "kind": "value",
      "name": "getMonth",
      "signature": "let getMonth: t => float",
      "docstrings": ["Returns the month (0.0-11.0) for its argument, evaluated in the current time\nzone. January is month zero.  See\n[`Date.getMonth`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth)\non MDN.\n\n```rescript\nJs.Date.getMonth(exampleDate) == 10.0\n```"]
    }, 
    {
      "id": "Js.Date.getSeconds",
      "kind": "value",
      "name": "getSeconds",
      "signature": "let getSeconds: t => float",
      "docstrings": ["Returns the seconds for its argument, evaluated in the current time zone. See\n[`Date.getSeconds`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds)\non MDN.\n\n```rescript\nJs.Date.getSeconds(exampleDate) == 54.0\n```"]
    }, 
    {
      "id": "Js.Date.getTime",
      "kind": "value",
      "name": "getTime",
      "signature": "let getTime: t => float",
      "docstrings": ["Returns the number of milliseconds since Unix epoch, evaluated in UTC.  See\n[`Date.getTime`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime)\non MDN.\n\n```rescript\nJs.Date.getTime(exampleDate) == 123456654321.0\n```"]
    }, 
    {
      "id": "Js.Date.getTimezoneOffset",
      "kind": "value",
      "name": "getTimezoneOffset",
      "signature": "let getTimezoneOffset: t => float",
      "docstrings": ["Returns the time zone offset in minutes from the current time zone to UTC. See\n[`Date.getTimezoneOffset`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset)\non MDN.\n\n```rescript\nJs.Date.getTimezoneOffset(exampleDate) == -60.0\n```"]
    }, 
    {
      "id": "Js.Date.getUTCDate",
      "kind": "value",
      "name": "getUTCDate",
      "signature": "let getUTCDate: t => float",
      "docstrings": ["Returns the day of the month of the argument, evaluated in UTC. See\n[`Date.getUTCDate`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate)\non MDN.\n\n```rescript\nJs.Date.getUTCDate(exampleDate) == 29.0\n```"]
    }, 
    {
      "id": "Js.Date.getUTCDay",
      "kind": "value",
      "name": "getUTCDay",
      "signature": "let getUTCDay: t => float",
      "docstrings": ["Returns the day of the week of the argument, evaluated in UTC. The range of the\nreturn value is 0.0-6.0, where Sunday is zero. See\n[`Date.getUTCDay`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay)\non MDN.\n\n```rescript\nJs.Date.getUTCDay(exampleDate) == 4.0\n```"]
    }, 
    {
      "id": "Js.Date.getUTCFullYear",
      "kind": "value",
      "name": "getUTCFullYear",
      "signature": "let getUTCFullYear: t => float",
      "docstrings": ["Returns the full year (as opposed to the range 0-99) for its argument. The\nargument is evaluated in UTC.  See\n[`Date.getUTCFullYear`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear)\non MDN.\n\n```rescript\nJs.Date.getUTCFullYear(exampleDate) == 1973.0\n```"]
    }, 
    {
      "id": "Js.Date.getUTCHours",
      "kind": "value",
      "name": "getUTCHours",
      "signature": "let getUTCHours: t => float",
      "docstrings": ["Returns the hours for its argument, evaluated in the current time zone. See\n[`Date.getUTCHours`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours)\non MDN.\n\n```rescript\nJs.Date.getUTCHours(exampleDate) == 21.0\n```"]
    }, 
    {
      "id": "Js.Date.getUTCMilliseconds",
      "kind": "value",
      "name": "getUTCMilliseconds",
      "signature": "let getUTCMilliseconds: t => float",
      "docstrings": ["Returns the number of milliseconds for its argument, evaluated in UTC. See\n[`Date.getUTCMilliseconds`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds)\non MDN.\n\n```rescript\nJs.Date.getUTCMilliseconds(exampleDate) == 321.0\n```"]
    }, 
    {
      "id": "Js.Date.getUTCMinutes",
      "kind": "value",
      "name": "getUTCMinutes",
      "signature": "let getUTCMinutes: t => float",
      "docstrings": ["Returns the number of minutes for its argument, evaluated in UTC. See\n[`Date.getUTCMinutes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes)\non MDN.\n\n```rescript\nJs.Date.getUTCMinutes(exampleDate) == 30.0\n```"]
    }, 
    {
      "id": "Js.Date.getUTCMonth",
      "kind": "value",
      "name": "getUTCMonth",
      "signature": "let getUTCMonth: t => float",
      "docstrings": ["Returns the month (0.0-11.0) for its argument, evaluated in UTC. January is\nmonth zero. See\n[`Date.getUTCMonth`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth)\non MDN.\n\n```rescript\nJs.Date.getUTCMonth(exampleDate) == 10.0\n```"]
    }, 
    {
      "id": "Js.Date.getUTCSeconds",
      "kind": "value",
      "name": "getUTCSeconds",
      "signature": "let getUTCSeconds: t => float",
      "docstrings": ["Returns the seconds for its argument, evaluated in UTC. See\n[`Date.getUTCSeconds`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds)\non MDN.\n\n```rescript\nJs.Date.getUTCSeconds(exampleDate) == 54.0\n```"]
    }, 
    {
      "id": "Js.Date.getYear",
      "kind": "value",
      "name": "getYear",
      "deprecated": "Use `getFullYear` instead.",
      "signature": "let getYear: t => float",
      "docstrings": []
    }, 
    {
      "id": "Js.Date.setDate",
      "kind": "value",
      "name": "setDate",
      "signature": "let setDate: (t, float) => float",
      "docstrings": ["Sets the given `Date`’s day of month to the value in the second argument\naccording to the current time zone. Returns the number of milliseconds since\nthe epoch of the updated `Date`. *This function modifies the original `Date`.*\nSee\n[`Date.setDate`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet twoWeeksBefore = Js.Date.setDate(date1, 15.0)\ndate1 == Js.Date.fromString(\"1973-11-15T21:30:54.321Z00:00\")\ntwoWeeksBefore == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setFullYear",
      "kind": "value",
      "name": "setFullYear",
      "signature": "let setFullYear: (t, float) => float",
      "docstrings": ["Sets the given `Date`’s year to the value in the second argument according to\nthe current time zone. Returns the number of milliseconds since the epoch of\nthe updated `Date`. *This function modifies the original `Date`.* See\n[`Date.setFullYear`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet nextYear = Js.Date.setFullYear(date1, 1974.0)\ndate1 == Js.Date.fromString(\"1974-11-15T21:30:54.321Z00:00\")\nnextYear == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setFullYearM",
      "kind": "value",
      "name": "setFullYearM",
      "signature": "let setFullYearM: (t, ~year: float, ~month: float, unit) => float",
      "docstrings": ["Sets the given `Date`’s year and month to the values in the labeled arguments\naccording to the current time zone. Returns the number of milliseconds since\nthe epoch of the updated `Date`. *This function modifies the original `Date`.*\nSee\n[`Date.setFullYear`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet future = Js.Date.setFullYearM(date1, ~year=1974.0, ~month=0.0, ())\ndate1 == Js.Date.fromString(\"1974-01-22T21:30:54.321Z00:00\")\nfuture == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setFullYearMD",
      "kind": "value",
      "name": "setFullYearMD",
      "signature": "let setFullYearMD: (t, ~year: float, ~month: float, ~date: float, unit) => float",
      "docstrings": ["Sets the given `Date`’s year, month, and day of month to the values in the\nlabeled arguments according to the current time zone. Returns the number of\nmilliseconds since the epoch of the updated `Date`. *This function modifies the\noriginal `Date`.* See\n[`Date.setFullYear`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet future = Js.Date.setFullYearMD(date1, ~year=1974.0, ~month=0.0, ~date=7.0, ())\ndate1 == Js.Date.fromString(\"1974-01-07T21:30:54.321Z00:00\")\nfuture == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setHours",
      "kind": "value",
      "name": "setHours",
      "signature": "let setHours: (t, float) => float",
      "docstrings": ["Sets the given `Date`’s hours to the value in the second argument according to\nthe current time zone. Returns the number of milliseconds since the epoch of\nthe updated `Date`. *This function modifies the original `Date`.* See\n[`Date.setHours`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet nextHour = Js.Date.setHours(date1, 22.0)\ndate1 == Js.Date.fromString(\"1973-11-29T22:30:54.321Z00:00\")\nnextHour == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setHoursM",
      "kind": "value",
      "name": "setHoursM",
      "signature": "let setHoursM: (t, ~hours: float, ~minutes: float, unit) => float",
      "docstrings": ["Sets the given `Date`’s hours and minutes to the values in the labeled\narguments according to the current time zone. Returns the number of\nmilliseconds since the epoch of the updated `Date`. *This function modifies the\noriginal `Date`.* See\n[`Date.setHours`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setHoursM(date1, ~hours=22.0, ~minutes=46.0, ())\ndate1 == Js.Date.fromString(\"1973-11-29T22:46:54.321Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setHoursMS",
      "kind": "value",
      "name": "setHoursMS",
      "signature": "let setHoursMS: (t, ~hours: float, ~minutes: float, ~seconds: float, unit) => float",
      "docstrings": ["Sets the given `Date`’s hours, minutes, and seconds to the values in the\nlabeled arguments according to the current time zone. Returns the number of\nmilliseconds since the epoch of the updated `Date`. *This function modifies the\noriginal `Date`.* See\n[`Date.setHours`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setHoursMS(date1, ~hours=22.0, ~minutes=46.0, ~seconds=37.0, ())\ndate1 == Js.Date.fromString(\"1973-11-29T22:46:37.321Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setHoursMSMs",
      "kind": "value",
      "name": "setHoursMSMs",
      "signature": "let setHoursMSMs: (\\n  t,\\n  ~hours: float,\\n  ~minutes: float,\\n  ~seconds: float,\\n  ~milliseconds: float,\\n  unit,\\n) => float",
      "docstrings": ["Sets the given `Date`’s hours, minutes, seconds, and milliseconds to the values\nin the labeled arguments according to the current time zone. Returns the number\nof milliseconds since the epoch of the updated `Date`. *This function modifies\nthe original `Date`.* See\n[`Date.setHours`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setHoursMSMs(\n  date1,\n  ~hours=22.0,\n  ~minutes=46.0,\n  ~seconds=37.0,\n  ~milliseconds=494.0,\n  (),\n)\ndate1 == Js.Date.fromString(\"1973-11-29T22:46:37.494Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setMilliseconds",
      "kind": "value",
      "name": "setMilliseconds",
      "signature": "let setMilliseconds: (t, float) => float",
      "docstrings": ["Sets the given `Date`’s milliseconds to the value in the second argument\naccording to the current time zone. Returns the number of milliseconds since\nthe epoch of the updated `Date`. *This function modifies the original `Date`.*\nSee\n[`Date.setMilliseconds`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setMilliseconds(date1, 494.0)\ndate1 == Js.Date.fromString(\"1973-11-29T21:30:54.494Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setMinutes",
      "kind": "value",
      "name": "setMinutes",
      "signature": "let setMinutes: (t, float) => float",
      "docstrings": ["Sets the given `Date`’s minutes to the value in the second argument according\nto the current time zone. Returns the number of milliseconds since the epoch of\nthe updated `Date`. *This function modifies the original `Date`.* See\n[`Date.setMinutes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setMinutes(date1, 34.0)\ndate1 == Js.Date.fromString(\"1973-11-29T21:34:54.494Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setMinutesS",
      "kind": "value",
      "name": "setMinutesS",
      "signature": "let setMinutesS: (t, ~minutes: float, ~seconds: float, unit) => float",
      "docstrings": ["Sets the given `Date`’s minutes and seconds to the values in the labeled\narguments according to the current time zone. Returns the number of\nmilliseconds since the epoch of the updated `Date`. *This function modifies the\noriginal `Date`.* See\n[`Date.setMinutes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setMinutesS(date1, ~minutes=34.0, ~seconds=56.0, ())\ndate1 == Js.Date.fromString(\"1973-11-29T21:34:56.494Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setMinutesSMs",
      "kind": "value",
      "name": "setMinutesSMs",
      "signature": "let setMinutesSMs: (t, ~minutes: float, ~seconds: float, ~milliseconds: float, unit) => float",
      "docstrings": ["Sets the given `Date`’s minutes, seconds, and milliseconds to the values in the\nlabeled arguments according to the current time zone. Returns the number of\nmilliseconds since the epoch of the updated `Date`. *This function modifies the\noriginal `Date`.* See\n[`Date.setMinutes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setMinutesSMs(\n  date1,\n  ~minutes=34.0,\n  ~seconds=56.0,\n  ~milliseconds=789.0,\n  (),\n)\ndate1 == Js.Date.fromString(\"1973-11-29T21:34:56.789Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setMonth",
      "kind": "value",
      "name": "setMonth",
      "signature": "let setMonth: (t, float) => float",
      "docstrings": ["Sets the given `Date`’s month to the value in the second argument according to\nthe current time zone. Returns the number of milliseconds since the epoch of\nthe updated `Date`. *This function modifies the original `Date`.* See\n[`Date.setMonth`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setMonth(date1, 11.0)\ndate1 == Js.Date.fromString(\"1973-12-29T21:34:56.789Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setMonthD",
      "kind": "value",
      "name": "setMonthD",
      "signature": "let setMonthD: (t, ~month: float, ~date: float, unit) => float",
      "docstrings": ["Sets the given `Date`’s month and day of month to the values in the labeled\narguments according to the current time zone. Returns the number of\nmilliseconds since the epoch of the updated `Date`. *This function modifies the\noriginal `Date`.* See\n[`Date.setMonth`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setMonthD(date1, ~month=11.0, ~date=8.0, ())\ndate1 == Js.Date.fromString(\"1973-12-08T21:34:56.789Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setSeconds",
      "kind": "value",
      "name": "setSeconds",
      "signature": "let setSeconds: (t, float) => float",
      "docstrings": ["Sets the given `Date`’s seconds to the value in the second argument according\nto the current time zone. Returns the number of milliseconds since the epoch of\nthe updated `Date`. *This function modifies the original `Date`.* See\n[`Date.setSeconds`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setSeconds(date1, 56.0)\ndate1 == Js.Date.fromString(\"1973-12-29T21:30:56.321Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setSecondsMs",
      "kind": "value",
      "name": "setSecondsMs",
      "signature": "let setSecondsMs: (t, ~seconds: float, ~milliseconds: float, unit) => float",
      "docstrings": ["Sets the given `Date`’s seconds and milliseconds to the values in the labeled\narguments according to the current time zone. Returns the number of\nmilliseconds since the epoch of the updated `Date`. *This function modifies the\noriginal `Date`.* See\n[`Date.setSeconds`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setSecondsMs(date1, ~seconds=56.0, ~milliseconds=789.0, ())\ndate1 == Js.Date.fromString(\"1973-12-29T21:30:56.789Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setTime",
      "kind": "value",
      "name": "setTime",
      "signature": "let setTime: (t, float) => float",
      "docstrings": ["Sets the given `Date`’s value in terms of milliseconds since the epoch. Returns\nthe number of milliseconds since the epoch of the updated `Date`. *This\nfunction modifies the original `Date`.* See\n[`Date.setTime`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setTime(date1, 198765432101.0)\n\ndate1 == Js.Date.fromString(\"1976-04-19T12:37:12.101Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCDate",
      "kind": "value",
      "name": "setUTCDate",
      "signature": "let setUTCDate: (t, float) => float",
      "docstrings": ["Sets the given `Date`’s day of month to the value in the second argument\naccording to UTC. Returns the number of milliseconds since the epoch of the\nupdated `Date`. *This function modifies the original `Date`.* See\n[`Date.setUTCDate`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCDate)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet twoWeeksBefore = Js.Date.setUTCDate(date1, 15.0)\ndate1 == Js.Date.fromString(\"1973-11-15T21:30:54.321Z00:00\")\ntwoWeeksBefore == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCFullYear",
      "kind": "value",
      "name": "setUTCFullYear",
      "signature": "let setUTCFullYear: (t, float) => float",
      "docstrings": ["Sets the given `Date`’s year to the value in the second argument according to\nUTC. Returns the number of milliseconds since the epoch of the updated `Date`.\n*This function modifies the original `Date`.* See\n[`Date.setUTCFullYear`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet nextYear = Js.Date.setUTCFullYear(date1, 1974.0)\ndate1 == Js.Date.fromString(\"1974-11-15T21:30:54.321Z00:00\")\nnextYear == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCFullYearM",
      "kind": "value",
      "name": "setUTCFullYearM",
      "signature": "let setUTCFullYearM: (t, ~year: float, ~month: float, unit) => float",
      "docstrings": ["Sets the given `Date`’s year and month to the values in the labeled arguments\naccording to UTC. Returns the number of milliseconds since the epoch of the\nupdated `Date`. *This function modifies the original `Date`.* See\n[`Date.setUTCFullYear`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet future = Js.Date.setUTCFullYearM(date1, ~year=1974.0, ~month=0.0, ())\ndate1 == Js.Date.fromString(\"1974-01-22T21:30:54.321Z00:00\")\nfuture == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCFullYearMD",
      "kind": "value",
      "name": "setUTCFullYearMD",
      "signature": "let setUTCFullYearMD: (t, ~year: float, ~month: float, ~date: float, unit) => float",
      "docstrings": ["Sets the given `Date`’s year, month, and day of month to the values in the\nlabeled arguments according to UTC. Returns the number of milliseconds since\nthe epoch of the updated `Date`. *This function modifies the original `Date`.*\nSee\n[`Date.setUTCFullYear`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet future = Js.Date.setUTCFullYearMD(date1, ~year=1974.0, ~month=0.0, ~date=7.0, ())\ndate1 == Js.Date.fromString(\"1974-01-07T21:30:54.321Z00:00\")\nfuture == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCHours",
      "kind": "value",
      "name": "setUTCHours",
      "signature": "let setUTCHours: (t, float) => float",
      "docstrings": ["Sets the given `Date`’s hours to the value in the second argument according to\nUTC. Returns the number of milliseconds since the epoch of the updated `Date`.\n*This function modifies the original `Date`.* See\n[`Date.setUTCHours`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet nextHour = Js.Date.setUTCHours(date1, 22.0)\ndate1 == Js.Date.fromString(\"1973-11-29T22:30:54.321Z00:00\")\nnextHour == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCHoursM",
      "kind": "value",
      "name": "setUTCHoursM",
      "signature": "let setUTCHoursM: (t, ~hours: float, ~minutes: float, unit) => float",
      "docstrings": ["Sets the given `Date`’s hours and minutes to the values in the labeled\narguments according to UTC. Returns the number of milliseconds since the epoch\nof the updated `Date`. *This function modifies the original `Date`.* See\n[`Date.setUTCHours`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCHoursM(date1, ~hours=22.0, ~minutes=46.0, ())\ndate1 == Js.Date.fromString(\"1973-11-29T22:46:54.321Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCHoursMS",
      "kind": "value",
      "name": "setUTCHoursMS",
      "signature": "let setUTCHoursMS: (t, ~hours: float, ~minutes: float, ~seconds: float, unit) => float",
      "docstrings": ["Sets the given `Date`’s hours, minutes, and seconds to the values in the\nlabeled arguments according to UTC. Returns the number of milliseconds since\nthe epoch of the updated `Date`. *This function modifies the original `Date`.*\n\nSee\n[`Date.setUTCHours`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCHoursMS(date1, ~hours=22.0, ~minutes=46.0, ~seconds=37.0, ())\ndate1 == Js.Date.fromString(\"1973-11-29T22:46:37.321Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCHoursMSMs",
      "kind": "value",
      "name": "setUTCHoursMSMs",
      "signature": "let setUTCHoursMSMs: (\\n  t,\\n  ~hours: float,\\n  ~minutes: float,\\n  ~seconds: float,\\n  ~milliseconds: float,\\n  unit,\\n) => float",
      "docstrings": ["Sets the given `Date`’s hours, minutes, seconds, and milliseconds to the values\nin the labeled arguments according to UTC. Returns the number of milliseconds\nsince the epoch of the updated `Date`. *This function modifies the original\n`Date`.* See\n[`Date.setUTCHours`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCHoursMSMs(\n  date1,\n  ~hours=22.0,\n  ~minutes=46.0,\n  ~seconds=37.0,\n  ~milliseconds=494.0,\n  (),\n)\ndate1 == Js.Date.fromString(\"1973-11-29T22:46:37.494Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCMilliseconds",
      "kind": "value",
      "name": "setUTCMilliseconds",
      "signature": "let setUTCMilliseconds: (t, float) => float",
      "docstrings": ["Sets the given `Date`’s milliseconds to the value in the second argument\naccording to UTC. Returns the number of milliseconds since the epoch of the\nupdated `Date`. *This function modifies the original `Date`.* See\n[`Date.setUTCMilliseconds`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCMilliseconds(date1, 494.0)\ndate1 == Js.Date.fromString(\"1973-11-29T21:30:54.494Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCMinutes",
      "kind": "value",
      "name": "setUTCMinutes",
      "signature": "let setUTCMinutes: (t, float) => float",
      "docstrings": ["Sets the given `Date`’s minutes to the value in the second argument according\nto the current time zone. Returns the number of milliseconds since the epoch of\nthe updated `Date`. *This function modifies the original `Date`.* See\n[`Date.setUTCMinutes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCMinutes(date1, 34.0)\ndate1 == Js.Date.fromString(\"1973-11-29T21:34:54.494Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCMinutesS",
      "kind": "value",
      "name": "setUTCMinutesS",
      "signature": "let setUTCMinutesS: (t, ~minutes: float, ~seconds: float, unit) => float",
      "docstrings": ["Sets the given `Date`’s minutes and seconds to the values in the labeled\narguments according to UTC. Returns the number of milliseconds since the epoch\nof the updated `Date`. *This function modifies the original `Date`.* See\n[`Date.setUTCMinutes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCMinutesS(date1, ~minutes=34.0, ~seconds=56.0, ())\ndate1 == Js.Date.fromString(\"1973-11-29T21:34:56.494Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCMinutesSMs",
      "kind": "value",
      "name": "setUTCMinutesSMs",
      "signature": "let setUTCMinutesSMs: (t, ~minutes: float, ~seconds: float, ~milliseconds: float, unit) => float",
      "docstrings": ["Sets the given `Date`’s minutes, seconds, and milliseconds to the values in the\nlabeled arguments according to UTC. Returns the number of milliseconds since\nthe epoch of the updated `Date`. *This function modifies the original `Date`.*\nSee\n[`Date.setUTCMinutes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCMinutesSMs(\n  date1,\n  ~minutes=34.0,\n  ~seconds=56.0,\n  ~milliseconds=789.0,\n  (),\n)\ndate1 == Js.Date.fromString(\"1973-11-29T21:34:56.789Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCMonth",
      "kind": "value",
      "name": "setUTCMonth",
      "signature": "let setUTCMonth: (t, float) => float",
      "docstrings": ["Sets the given `Date`’s month to the value in the second argument according to\nUTC. Returns the number of milliseconds since the epoch of the updated `Date`.\n*This function modifies the original `Date`.* See\n[`Date.setUTCMonth`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCMonth(date1, 11.0)\ndate1 == Js.Date.fromString(\"1973-12-29T21:34:56.789Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCMonthD",
      "kind": "value",
      "name": "setUTCMonthD",
      "signature": "let setUTCMonthD: (t, ~month: float, ~date: float, unit) => float",
      "docstrings": ["Sets the given `Date`’s month and day of month to the values in the labeled\narguments according to UTC. Returns the number of milliseconds since the epoch\nof the updated `Date`. *This function modifies the original `Date`.* See\n[`Date.setUTCMonth`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCMonthD(date1, ~month=11.0, ~date=8.0, ())\ndate1 == Js.Date.fromString(\"1973-12-08T21:34:56.789Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCSeconds",
      "kind": "value",
      "name": "setUTCSeconds",
      "signature": "let setUTCSeconds: (t, float) => float",
      "docstrings": ["Sets the given `Date`’s seconds to the value in the second argument according\nto UTC. Returns the number of milliseconds since the epoch of the updated\n`Date`. *This function modifies the original `Date`.* See\n[`Date.setUTCSeconds`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCSeconds(date1, 56.0)\ndate1 == Js.Date.fromString(\"1973-12-29T21:30:56.321Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCSecondsMs",
      "kind": "value",
      "name": "setUTCSecondsMs",
      "signature": "let setUTCSecondsMs: (t, ~seconds: float, ~milliseconds: float, unit) => float",
      "docstrings": ["Sets the given `Date`’s seconds and milliseconds to the values in the labeled\narguments according to UTC. Returns the number of milliseconds since the epoch\nof the updated `Date`. *This function modifies the original `Date`.* See\n[`Date.setUTCSeconds`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds)\non MDN.\n\n```rescript\nlet date1 = Js.Date.fromFloat(123456654321.0) // 29 November 1973 21:30:54.321 GMT\nlet futureTime = Js.Date.setUTCSecondsMs(date1, ~seconds=56.0, ~milliseconds=789.0, ())\ndate1 == Js.Date.fromString(\"1973-12-29T21:30:56.789Z00:00\")\nfutureTime == Js.Date.getTime(date1)\n```"]
    }, 
    {
      "id": "Js.Date.setUTCTime",
      "kind": "value",
      "name": "setUTCTime",
      "signature": "let setUTCTime: (t, float) => float",
      "docstrings": ["Same as [`setTime()`](#settime)."]
    }, 
    {
      "id": "Js.Date.setYear",
      "kind": "value",
      "name": "setYear",
      "deprecated": "Use `setFullYear` instead",
      "signature": "let setYear: (t, float) => float",
      "docstrings": []
    }, 
    {
      "id": "Js.Date.toDateString",
      "kind": "value",
      "name": "toDateString",
      "signature": "let toDateString: t => string",
      "docstrings": ["Returns the date (day of week, year, month, and day of month) portion of a\n`Date` in English. See\n[`Date.toDateString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString)\non MDN.\n\n```rescript\nJs.Date.toDateString(exampleDate) == \"Thu Nov 29 1973\"\n```"]
    }, 
    {
      "id": "Js.Date.toGMTString",
      "kind": "value",
      "name": "toGMTString",
      "deprecated": "Use `toUTCString` instead",
      "signature": "let toGMTString: t => string",
      "docstrings": []
    }, 
    {
      "id": "Js.Date.toISOString",
      "kind": "value",
      "name": "toISOString",
      "signature": "let toISOString: t => string",
      "docstrings": ["Returns a simplified version of the ISO 8601 format for the date. See\n[`Date.toISOString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\non MDN.\n\n```rescript\nJs.Date.toISOString(exampleDate) == \"1973-11-29T21:30:54.321Z\"\n```"]
    }, 
    {
      "id": "Js.Date.toJSON",
      "kind": "value",
      "name": "toJSON",
      "deprecated": "This method is unsafe. It will be changed to return option in a future \\\n     release. Please use toJSONUnsafe instead.",
      "signature": "let toJSON: t => string",
      "docstrings": []
    }, 
    {
      "id": "Js.Date.toJSONUnsafe",
      "kind": "value",
      "name": "toJSONUnsafe",
      "signature": "let toJSONUnsafe: t => string",
      "docstrings": ["Returns a string representation of the given date. See\n[`Date.toJSON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON)\non MDN."]
    }, 
    {
      "id": "Js.Date.toLocaleDateString",
      "kind": "value",
      "name": "toLocaleDateString",
      "signature": "let toLocaleDateString: t => string",
      "docstrings": ["Returns the year, month, and day for the given `Date` in the current locale\nformat. See\n[`Date.toLocaleDateString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString)\non MDN.\n\n```rescript\nJs.Date.toLocaleDateString(exampleDate) == \"11/29/1973\" // for en_US.utf8\nJs.Date.toLocaleDateString(exampleDate) == \"29.11.73\" // for de_DE.utf8\n```"]
    }, 
    {
      "id": "Js.Date.toLocaleString",
      "kind": "value",
      "name": "toLocaleString",
      "signature": "let toLocaleString: t => string",
      "docstrings": ["Returns the time and date for the given `Date` in the current locale format.\nSee\n[`Date.toLocaleString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString)\non MDN.\n\n```rescript\nJs.Date.toLocaleString(exampleDate) == \"11/29/1973, 10:30:54 PM\" // for en_US.utf8\nJs.Date.toLocaleString(exampleDate) == \"29.11.1973, 22:30:54\" // for de_DE.utf8\n```"]
    }, 
    {
      "id": "Js.Date.toLocaleTimeString",
      "kind": "value",
      "name": "toLocaleTimeString",
      "signature": "let toLocaleTimeString: t => string",
      "docstrings": ["Returns the time of day for the given `Date` in the current locale format. See\n[`Date.toLocaleTimeString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString)\non MDN.\n\n```rescript\nJs.Date.toLocaleString(exampleDate) == \"10:30:54 PM\" // for en_US.utf8\nJs.Date.toLocaleString(exampleDate) == \"22:30:54\" // for de_DE.utf8\n```"]
    }, 
    {
      "id": "Js.Date.toString",
      "kind": "value",
      "name": "toString",
      "signature": "let toString: t => string",
      "docstrings": ["Returns a string representing the date and time of day for the given `Date` in\nthe current locale and time zone. See\n[`Date.toString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString)\non MDN.\n\n```rescript\nJs.Date.toString(\n  exampleDate,\n) == \"Thu Nov 29 1973 22:30:54 GMT+0100 (Central European Standard Time)\"\n```"]
    }, 
    {
      "id": "Js.Date.toTimeString",
      "kind": "value",
      "name": "toTimeString",
      "signature": "let toTimeString: t => string",
      "docstrings": ["Returns a string representing the time of day for the given `Date` in the\ncurrent locale and time zone.  See\n[`Date.toTimeString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString)\non MDN.\n\n```rescript\nJs.Date.toTimeString(exampleDate) == \"22:30:54 GMT+0100 (Central European Standard Time)\"\n```"]
    }, 
    {
      "id": "Js.Date.toUTCString",
      "kind": "value",
      "name": "toUTCString",
      "signature": "let toUTCString: t => string",
      "docstrings": ["Returns a string representing the date and time of day for the given `Date` in\nthe current locale and UTC (GMT time zone). See\n[`Date.toUTCString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString)\non MDN.\n\n```rescript\nJs.Date.toUTCString(exampleDate) == \"Thu, 29 Nov 1973 21:30:54 GMT\"\n```"]
    }]
  }, 
  {
    "id": "Js.Dict",
    "kind": "moduleAlias",
    "name": "Dict",
    "docstrings": ["Provide utilities for JS dictionary object"],
    "items": [
    {
      "id": "Js.Dict.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Dict.key",
      "kind": "type",
      "name": "key",
      "signature": "type key = string",
      "docstrings": ["The type for dictionary keys. This means that dictionaries *must* use `string`s as their keys."]
    }, 
    {
      "id": "Js.Dict.get",
      "kind": "value",
      "name": "get",
      "signature": "let get: (t<'a>, key) => option<'a>",
      "docstrings": ["`Js.Dict.get(key)` returns `None` if the key is not found in the dictionary,\n`Some(value)` otherwise.\n\n```rescript\nJs.Dict.get(ages, \"Vinh\") == Some(22)\nJs.Dict.get(ages, \"Paul\") == None\n```"]
    }, 
    {
      "id": "Js.Dict.unsafeGet",
      "kind": "value",
      "name": "unsafeGet",
      "signature": "let unsafeGet: (t<'a>, key) => 'a",
      "docstrings": ["`Js.Dict.unsafeGet(key)` returns the value if the key exists, otherwise an `undefined` value is returned. Use this only when you are sure the key exists (i.e. when having used the `keys()` function to check that the key is valid).\n\n```rescript\nJs.Dict.unsafeGet(ages, \"Fred\") == 49\nJs.Dict.unsafeGet(ages, \"Paul\") // returns undefined\n```"]
    }, 
    {
      "id": "Js.Dict.set",
      "kind": "value",
      "name": "set",
      "signature": "let set: (t<'a>, key, 'a) => unit",
      "docstrings": ["`Js.Dict.set(dict, key, value)` sets the key/value in the dictionary `dict`. If\nthe key does not exist, and entry will be created for it.\n\n*This function modifies the original dictionary.*\n\n```rescript\nJs.Dict.set(ages, \"Maria\", 31)\nJs.log(ages == Js.Dict.fromList(list{(\"Maria\", 31), (\"Vinh\", 22), (\"Fred\", 49)}))\n\nJs.Dict.set(ages, \"David\", 66)\nJs.log(ages == Js.Dict.fromList(list{(\"Maria\", 31), (\"Vinh\", 22), (\"Fred\", 49), (\"David\", 66)}))\n```"]
    }, 
    {
      "id": "Js.Dict.keys",
      "kind": "value",
      "name": "keys",
      "signature": "let keys: t<'a> => array<string>",
      "docstrings": ["Returns all the keys in the dictionary `dict`.\n\n```rescript\nJs.Dict.keys(ages) == [\"Maria\", \"Vinh\", \"Fred\"]\n```"]
    }, 
    {
      "id": "Js.Dict.empty",
      "kind": "value",
      "name": "empty",
      "signature": "let empty: unit => t<'a>",
      "docstrings": ["Returns an empty dictionary."]
    }, 
    {
      "id": "Js.Dict.unsafeDeleteKey",
      "kind": "value",
      "name": "unsafeDeleteKey",
      "signature": "let unsafeDeleteKey: (. t<string>, string) => unit",
      "docstrings": ["Experimental internal function"]
    }, 
    {
      "id": "Js.Dict.entries",
      "kind": "value",
      "name": "entries",
      "signature": "let entries: t<'a> => array<(key, 'a)>",
      "docstrings": ["Returns an array of key/value pairs in the given dictionary (ES2017).\n\n```rescript\nJs.Dict.entries(ages) == [(\"Maria\", 30), (\"Vinh\", 22), (\"Fred\", 49)]\n```"]
    }, 
    {
      "id": "Js.Dict.values",
      "kind": "value",
      "name": "values",
      "signature": "let values: t<'a> => array<'a>",
      "docstrings": ["Returns the values in the given dictionary (ES2017).\n\n```rescript\nJs.Dict.values(ages) == [30, 22, 49]\n```"]
    }, 
    {
      "id": "Js.Dict.fromList",
      "kind": "value",
      "name": "fromList",
      "signature": "let fromList: list<(key, 'a)> => t<'a>",
      "docstrings": ["Creates a new dictionary containing each (key, value) pair in its list\nargument.\n\n```rescript\nlet capitals = Js.Dict.fromList(list{(\"Japan\", \"Tokyo\"), (\"France\", \"Paris\"), (\"Egypt\", \"Cairo\")})\n```"]
    }, 
    {
      "id": "Js.Dict.fromArray",
      "kind": "value",
      "name": "fromArray",
      "signature": "let fromArray: array<(key, 'a)> => t<'a>",
      "docstrings": ["Creates a new dictionary containing each (key, value) pair in its array\nargument.\n\n```rescript\nlet capitals2 = Js.Dict.fromArray([(\"Germany\", \"Berlin\"), (\"Burkina Faso\", \"Ouagadougou\")])\n```"]
    }, 
    {
      "id": "Js.Dict.map",
      "kind": "value",
      "name": "map",
      "signature": "let map: ((. 'a) => 'b, t<'a>) => t<'b>",
      "docstrings": ["`map(f, dict)` maps `dict` to a new dictionary with the same keys, using the\nfunction `f` to map each value.\n\n```rescript\nlet prices = Js.Dict.fromList(list{(\"pen\", 1.00), (\"book\", 5.00), (\"stapler\", 7.00)})\n\nlet discount = (. price) => price *. 0.90\nlet salePrices = Js.Dict.map(discount, prices)\n\nsalePrices == Js.Dict.fromList(list{(\"pen\", 0.90), (\"book\", 4.50), (\"stapler\", 6.30)})\n```"]
    }]
  }, 
  {
    "id": "Js.Global",
    "kind": "moduleAlias",
    "name": "Global",
    "docstrings": ["Provide bindings to JS global functions in global namespace"],
    "items": [
    {
      "id": "Js.Global.intervalId",
      "kind": "type",
      "name": "intervalId",
      "signature": "type intervalId",
      "docstrings": ["Identify an interval started by `Js.Global.setInterval`."]
    }, 
    {
      "id": "Js.Global.timeoutId",
      "kind": "type",
      "name": "timeoutId",
      "signature": "type timeoutId",
      "docstrings": ["Identify timeout started by `Js.Global.setTimeout`."]
    }, 
    {
      "id": "Js.Global.clearInterval",
      "kind": "value",
      "name": "clearInterval",
      "signature": "let clearInterval: intervalId => unit",
      "docstrings": ["Clear an interval started by `Js.Global.setInterval`\n\n```rescript\n/* API for a somewhat aggressive snoozing alarm clock */\n\nlet punchSleepyGuy = () => Js.log(\"Punch\")\n\nlet interval = ref(Js.Nullable.null)\n\nlet remind = () => {\n  Js.log(\"Wake Up!\")\n  punchSleepyGuy()\n}\n\nlet snooze = mins =>\n  interval := Js.Nullable.return(Js.Global.setInterval(remind, mins * 60 * 1000))\n\nlet cancel = () =>\n  Js.Nullable.iter(interval.contents, (. intervalId) => Js.Global.clearInterval(intervalId))\n```"]
    }, 
    {
      "id": "Js.Global.clearTimeout",
      "kind": "value",
      "name": "clearTimeout",
      "signature": "let clearTimeout: timeoutId => unit",
      "docstrings": ["Clear a timeout started by `Js.Global.setTimeout`.\n\n```rescript\n/* A simple model of a code monkey's brain */\n\nlet closeHackerNewsTab = () => Js.log(\"close\")\n\nlet timer = ref(Js.Nullable.null)\n\nlet work = () => closeHackerNewsTab()\n\nlet procrastinate = mins => {\n  Js.Nullable.iter(timer.contents, (. timer) => Js.Global.clearTimeout(timer))\n  timer := Js.Nullable.return(Js.Global.setTimeout(work, mins * 60 * 1000))\n}\n```"]
    }, 
    {
      "id": "Js.Global.setInterval",
      "kind": "value",
      "name": "setInterval",
      "signature": "let setInterval: (unit => unit, int) => intervalId",
      "docstrings": ["Repeatedly executes a callback with a specified interval (in milliseconds)\nbetween calls. Returns a `Js.Global.intervalId` that can be passed to\n`Js.Global.clearInterval` to cancel the timeout.\n\n```rescript\n/* Will count up and print the count to the console every second */\n\nlet count = ref(0)\n\nlet tick = () => {\n  count := count.contents + 1\n  Js.log(Belt.Int.toString(count.contents))\n}\n\nJs.Global.setInterval(tick, 1000)\n```"]
    }, 
    {
      "id": "Js.Global.setIntervalFloat",
      "kind": "value",
      "name": "setIntervalFloat",
      "signature": "let setIntervalFloat: (unit => unit, float) => intervalId",
      "docstrings": ["Repeatedly executes a callback with a specified interval (in milliseconds)\nbetween calls. Returns a `Js.Global.intervalId` that can be passed to\n`Js.Global.clearInterval` to cancel the timeout.\n\n```rescript\n/* Will count up and print the count to the console every second */\n\nlet count = ref(0)\n\nlet tick = () => {\n  count := count.contents + 1\n  Js.log(Belt.Int.toString(count.contents))\n}\n\nJs.Global.setIntervalFloat(tick, 1000.0)\n```"]
    }, 
    {
      "id": "Js.Global.setTimeout",
      "kind": "value",
      "name": "setTimeout",
      "signature": "let setTimeout: (unit => unit, int) => timeoutId",
      "docstrings": ["Execute a callback after a specified delay (in milliseconds). Returns a\n`Js.Global.timeoutId` that can be passed to `Js.Global.clearTimeout` to cancel\nthe timeout.\n\n```rescript\n/* Prints \"Timed out!\" in the console after one second */\n\nlet message = \"Timed out!\"\n\nJs.Global.setTimeout(() => Js.log(message), 1000)\n```"]
    }, 
    {
      "id": "Js.Global.setTimeoutFloat",
      "kind": "value",
      "name": "setTimeoutFloat",
      "signature": "let setTimeoutFloat: (unit => unit, float) => timeoutId",
      "docstrings": ["Execute a callback after a specified delay (in milliseconds). Returns a\n`Js.Global.timeoutId` that can be passed to `Js.Global.clearTimeout` to cancel\nthe timeout.\n\n```rescript\n/* Prints \"Timed out!\" in the console after one second */\n\nlet message = \"Timed out!\"\n\nJs.Global.setTimeoutFloat(() => Js.log(message), 1000.0)\n```"]
    }, 
    {
      "id": "Js.Global.encodeURI",
      "kind": "value",
      "name": "encodeURI",
      "signature": "let encodeURI: string => string",
      "docstrings": ["URL-encodes a string.\n\n  **see** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI)"]
    }, 
    {
      "id": "Js.Global.decodeURI",
      "kind": "value",
      "name": "decodeURI",
      "signature": "let decodeURI: string => string",
      "docstrings": ["Decodes a URL-enmcoded string produced by `encodeURI`\n\n  **see** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI)"]
    }, 
    {
      "id": "Js.Global.encodeURIComponent",
      "kind": "value",
      "name": "encodeURIComponent",
      "signature": "let encodeURIComponent: string => string",
      "docstrings": ["URL-encodes a string, including characters with special meaning in a URI.\n\n  **see** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent)"]
    }, 
    {
      "id": "Js.Global.decodeURIComponent",
      "kind": "value",
      "name": "decodeURIComponent",
      "signature": "let decodeURIComponent: string => string",
      "docstrings": ["Decodes a URL-enmcoded string produced by `encodeURIComponent`\n\n  **see** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent)"]
    }]
  }, 
  {
    "id": "Js.Json",
    "kind": "moduleAlias",
    "name": "Json",
    "docstrings": ["Provide utilities for json"],
    "items": [
    {
      "id": "Js.Json.t",
      "kind": "type",
      "name": "t",
      "signature": "type t =\\n  | False\\n  | True\\n  | Null\\n  | String(string)\\n  | Number(float)\\n  | Object(Js.Dict.t<t>)\\n  | Array(array<t>)",
      "docstrings": ["The JSON data structure"],
      "detail": 
      {
        "kind": "variant",
        "items": [
        {
          "name": "False",
          "docstrings": [],
          "signature": "False"
        }, 
        {
          "name": "True",
          "docstrings": [],
          "signature": "True"
        }, 
        {
          "name": "Null",
          "docstrings": [],
          "signature": "Null"
        }, 
        {
          "name": "String",
          "docstrings": [],
          "signature": "String(string)"
        }, 
        {
          "name": "Number",
          "docstrings": [],
          "signature": "Number(float)"
        }, 
        {
          "name": "Object",
          "docstrings": [],
          "signature": "Object(Js.Dict.t<t>)"
        }, 
        {
          "name": "Array",
          "docstrings": [],
          "signature": "Array(array<t>)"
        }]
      }
    }, 
    {
      "id": "Js.Json.Kind",
      "name": "Kind",
      "kind": "module",
      "items": [
      {
        "id": "Js.Json.Kind.json",
        "kind": "type",
        "name": "json",
        "signature": "type json = t",
        "docstrings": []
      }, 
      {
        "id": "Js.Json.Kind.t",
        "kind": "type",
        "name": "t",
        "signature": "type t<_> =\\n  | String: t<Js_string.t>\\n  | Number: t<float>\\n  | Object: t<Js_dict.t<json>>\\n  | Array: t<array<json>>\\n  | Boolean: t<bool>\\n  | Null: t<Js_types.null_val>",
        "docstrings": ["Underlying type of a JSON value"],
        "detail": 
        {
          "kind": "variant",
          "items": [
          {
            "name": "String",
            "docstrings": [],
            "signature": "String\nt<Js_string.t>"
          }, 
          {
            "name": "Number",
            "docstrings": [],
            "signature": "Number\nt<float>"
          }, 
          {
            "name": "Object",
            "docstrings": [],
            "signature": "Object\nt<Js_dict.t<json>>"
          }, 
          {
            "name": "Array",
            "docstrings": [],
            "signature": "Array\nt<array<json>>"
          }, 
          {
            "name": "Boolean",
            "docstrings": [],
            "signature": "Boolean\nt<bool>"
          }, 
          {
            "name": "Null",
            "docstrings": [],
            "signature": "Null\nt<Js_types.null_val>"
          }]
        }
      }]
    }, 
    {
      "id": "Js.Json.tagged_t",
      "kind": "type",
      "name": "tagged_t",
      "signature": "type tagged_t =\\n  | JSONFalse\\n  | JSONTrue\\n  | JSONNull\\n  | JSONString(string)\\n  | JSONNumber(float)\\n  | JSONObject(Js_dict.t<t>)\\n  | JSONArray(array<t>)",
      "docstrings": [],
      "detail": 
      {
        "kind": "variant",
        "items": [
        {
          "name": "JSONFalse",
          "docstrings": [],
          "signature": "JSONFalse"
        }, 
        {
          "name": "JSONTrue",
          "docstrings": [],
          "signature": "JSONTrue"
        }, 
        {
          "name": "JSONNull",
          "docstrings": [],
          "signature": "JSONNull"
        }, 
        {
          "name": "JSONString",
          "docstrings": [],
          "signature": "JSONString(string)"
        }, 
        {
          "name": "JSONNumber",
          "docstrings": [],
          "signature": "JSONNumber(float)"
        }, 
        {
          "name": "JSONObject",
          "docstrings": [],
          "signature": "JSONObject(Js_dict.t<t>)"
        }, 
        {
          "name": "JSONArray",
          "docstrings": [],
          "signature": "JSONArray(array<t>)"
        }]
      }
    }, 
    {
      "id": "Js.Json.classify",
      "kind": "value",
      "name": "classify",
      "signature": "let classify: t => tagged_t",
      "docstrings": []
    }, 
    {
      "id": "Js.Json.test",
      "kind": "value",
      "name": "test",
      "signature": "let test: ('a, Kind.t<'b>) => bool",
      "docstrings": ["`test(v, kind)` returns `true` if `v` is of `kind`."]
    }, 
    {
      "id": "Js.Json.decodeString",
      "kind": "value",
      "name": "decodeString",
      "signature": "let decodeString: t => option<Js_string.t>",
      "docstrings": ["`decodeString(json)` returns `Some(s)` if `json` is a `string`, `None` otherwise."]
    }, 
    {
      "id": "Js.Json.decodeNumber",
      "kind": "value",
      "name": "decodeNumber",
      "signature": "let decodeNumber: t => option<float>",
      "docstrings": ["`decodeNumber(json)` returns `Some(n)` if `json` is a `number`, `None` otherwise."]
    }, 
    {
      "id": "Js.Json.decodeObject",
      "kind": "value",
      "name": "decodeObject",
      "signature": "let decodeObject: t => option<Js_dict.t<t>>",
      "docstrings": ["`decodeObject(json)` returns `Some(o)` if `json` is an `object`, `None` otherwise."]
    }, 
    {
      "id": "Js.Json.decodeArray",
      "kind": "value",
      "name": "decodeArray",
      "signature": "let decodeArray: t => option<array<t>>",
      "docstrings": ["`decodeArray(json)` returns `Some(a)` if `json` is an `array`, `None` otherwise."]
    }, 
    {
      "id": "Js.Json.decodeBoolean",
      "kind": "value",
      "name": "decodeBoolean",
      "signature": "let decodeBoolean: t => option<bool>",
      "docstrings": ["`decodeBoolean(json)` returns `Some(b)` if `json` is a `boolean`, `None` otherwise."]
    }, 
    {
      "id": "Js.Json.decodeNull",
      "kind": "value",
      "name": "decodeNull",
      "signature": "let decodeNull: t => option<Js_null.t<'a>>",
      "docstrings": ["`decodeNull(json)` returns `Some(null)` if `json` is a `null`, `None` otherwise."]
    }, 
    {
      "id": "Js.Json.null",
      "kind": "value",
      "name": "null",
      "signature": "let null: t",
      "docstrings": ["`null` is the singleton null JSON value."]
    }, 
    {
      "id": "Js.Json.string",
      "kind": "value",
      "name": "string",
      "signature": "let string: string => t",
      "docstrings": ["`string(s)` makes a JSON string of the `string` `s`."]
    }, 
    {
      "id": "Js.Json.number",
      "kind": "value",
      "name": "number",
      "signature": "let number: float => t",
      "docstrings": ["`number(n)` makes a JSON number of the `float` `n`."]
    }, 
    {
      "id": "Js.Json.boolean",
      "kind": "value",
      "name": "boolean",
      "signature": "let boolean: bool => t",
      "docstrings": ["`boolean(b)` makes a JSON boolean of the `bool` `b`."]
    }, 
    {
      "id": "Js.Json.object_",
      "kind": "value",
      "name": "object_",
      "signature": "let object_: Js_dict.t<t> => t",
      "docstrings": ["`object_(dict)` makes a JSON object of the `Js.Dict.t` `dict`."]
    }, 
    {
      "id": "Js.Json.array",
      "kind": "value",
      "name": "array",
      "signature": "let array: array<t> => t",
      "docstrings": ["`array_(a)` makes a JSON array of the `Js.Json.t` array `a`."]
    }, 
    {
      "id": "Js.Json.stringArray",
      "kind": "value",
      "name": "stringArray",
      "signature": "let stringArray: array<string> => t",
      "docstrings": ["`stringArray(a)` makes a JSON array of the `string` array `a`."]
    }, 
    {
      "id": "Js.Json.numberArray",
      "kind": "value",
      "name": "numberArray",
      "signature": "let numberArray: array<float> => t",
      "docstrings": ["`numberArray(a)` makes a JSON array of the `float` array `a`."]
    }, 
    {
      "id": "Js.Json.booleanArray",
      "kind": "value",
      "name": "booleanArray",
      "signature": "let booleanArray: array<bool> => t",
      "docstrings": ["`booleanArray(a)` makes a JSON array of the `bool` array `a`."]
    }, 
    {
      "id": "Js.Json.objectArray",
      "kind": "value",
      "name": "objectArray",
      "signature": "let objectArray: array<Js_dict.t<t>> => t",
      "docstrings": ["`objectArray(a) makes a JSON array of the `JsDict.t` array `a`."]
    }, 
    {
      "id": "Js.Json.parseExn",
      "kind": "value",
      "name": "parseExn",
      "signature": "let parseExn: string => t",
      "docstrings": ["`parseExn(s)` parses the `string` `s` into a JSON data structure.\nReturns a JSON data structure.\nRaises `SyntaxError` if the given string is not a valid JSON. Note: `SyntaxError` is a JavaScript exception.\n\n**See** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\n\n```rescript\n/* parse a simple JSON string */\n\nlet json = try Js.Json.parseExn(` \"hello\" `) catch {\n| _ => failwith(\"Error parsing JSON string\")\n}\n\nswitch Js.Json.classify(json) {\n| Js.Json.JSONString(value) => Js.log(value)\n| _ => failwith(\"Expected a string\")\n}\n```\n\n```rescript\n/* parse a complex JSON string */\n\nlet getIds = s => {\n  let json = try Js.Json.parseExn(s) catch {\n  | _ => failwith(\"Error parsing JSON string\")\n  }\n\n  switch Js.Json.classify(json) {\n  | Js.Json.JSONObject(value) =>\n    /* In this branch, compiler infer value : Js.Json.t Js.Dict.t */\n    switch Js.Dict.get(value, \"ids\") {\n    | Some(ids) =>\n      switch Js.Json.classify(ids) {\n      | Js.Json.JSONArray(ids) => /* In this branch compiler infer ids : Js.Json.t array */\n        ids\n      | _ => failwith(\"Expected an array\")\n      }\n    | None => failwith(\"Expected an `ids` property\")\n    }\n  | _ => failwith(\"Expected an object\")\n  }\n}\n\n/* prints `1, 2, 3` */\nJs.log(getIds(` { \"ids\" : [1, 2, 3 ] } `))\n```"]
    }, 
    {
      "id": "Js.Json.stringify",
      "kind": "value",
      "name": "stringify",
      "signature": "let stringify: t => string",
      "docstrings": ["`stringify(json)` formats the JSON data structure as a `string`.\nReturns the string representation of a given JSON data structure.\n\n**See** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\n\n```rescript\n/* Creates and stringifies a simple JS object */\n\nlet dict = Js.Dict.empty()\nJs.Dict.set(dict, \"name\", Js.Json.string(\"John Doe\"))\nJs.Dict.set(dict, \"age\", Js.Json.number(30.0))\nJs.Dict.set(dict, \"likes\", Js.Json.stringArray([\"ReScript\", \"ocaml\", \"js\"]))\n\nJs.log(Js.Json.stringify(Js.Json.object_(dict)))\n```"]
    }, 
    {
      "id": "Js.Json.stringifyWithSpace",
      "kind": "value",
      "name": "stringifyWithSpace",
      "signature": "let stringifyWithSpace: (t, int) => string",
      "docstrings": ["`stringifyWithSpace(json)` formats the JSON data structure as a `string`.\nReturns the string representation of a given JSON data structure with spacing.\n\n**See** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\n\n```rescript\n/* Creates and stringifies a simple JS object with spacing */\n\nlet dict = Js.Dict.empty()\nJs.Dict.set(dict, \"name\", Js.Json.string(\"John Doe\"))\nJs.Dict.set(dict, \"age\", Js.Json.number(30.0))\nJs.Dict.set(dict, \"likes\", Js.Json.stringArray([\"ReScript\", \"ocaml\", \"js\"]))\n\nJs.log(Js.Json.stringifyWithSpace(Js.Json.object_(dict), 2))\n```"]
    }, 
    {
      "id": "Js.Json.stringifyAny",
      "kind": "value",
      "name": "stringifyAny",
      "signature": "let stringifyAny: 'a => option<string>",
      "docstrings": ["`stringifyAny(value)` formats any value into a JSON string.\n\n```rescript\n/* prints `[\"hello\", \"world\"]` */\nJs.log(Js.Json.stringifyAny([\"hello\", \"world\"]))\n```"]
    }, 
    {
      "id": "Js.Json.deserializeUnsafe",
      "kind": "value",
      "name": "deserializeUnsafe",
      "signature": "let deserializeUnsafe: string => 'a",
      "docstrings": ["Best-effort serialization, it tries to seralize as\n  many objects as possible and deserialize it back\n\n  It is unsafe in two aspects\n  - It may throw during  parsing\n  - when you cast it to a specific type, it may have a type mismatch"]
    }, 
    {
      "id": "Js.Json.serializeExn",
      "kind": "value",
      "name": "serializeExn",
      "signature": "let serializeExn: 'a => string",
      "docstrings": ["It will raise in such situations:\n  - The object can not be serlialized to a JSON\n  - There are cycles\n  - Some JS engines can not stringify deeply nested json objects"]
    }]
  }, 
  {
    "id": "Js.Math",
    "kind": "moduleAlias",
    "name": "Math",
    "docstrings": ["Provide bindings for JS `Math` object"],
    "items": [
    {
      "id": "Js.Math._E",
      "kind": "value",
      "name": "_E",
      "signature": "let _E: float",
      "docstrings": ["Euler's number; ≈ 2.718281828459045. See\n  [`Math.E`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E)\n  on MDN."]
    }, 
    {
      "id": "Js.Math._LN2",
      "kind": "value",
      "name": "_LN2",
      "signature": "let _LN2: float",
      "docstrings": ["Natural logarithm of 2; ≈ 0.6931471805599453. See\n  [`Math.LN2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2)\n  on MDN."]
    }, 
    {
      "id": "Js.Math._LN10",
      "kind": "value",
      "name": "_LN10",
      "signature": "let _LN10: float",
      "docstrings": ["Natural logarithm of 10; ≈ 2.302585092994046. See\n  [`Math.LN10`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10)\n  on MDN."]
    }, 
    {
      "id": "Js.Math._LOG2E",
      "kind": "value",
      "name": "_LOG2E",
      "signature": "let _LOG2E: float",
      "docstrings": ["Base 2 logarithm of E; ≈ 1.4426950408889634. See\n  [`Math.LOG2E`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E)\n  on MDN."]
    }, 
    {
      "id": "Js.Math._LOG10E",
      "kind": "value",
      "name": "_LOG10E",
      "signature": "let _LOG10E: float",
      "docstrings": ["Base 10 logarithm of E; ≈ 0.4342944819032518. See\n  [`Math.LOG10E`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E)\n  on MDN."]
    }, 
    {
      "id": "Js.Math._PI",
      "kind": "value",
      "name": "_PI",
      "signature": "let _PI: float",
      "docstrings": ["Pi - ratio of the circumference to the diameter of a circle; ≈ 3.141592653589793. See\n  [`Math.PI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI)\n  on MDN."]
    }, 
    {
      "id": "Js.Math._SQRT1_2",
      "kind": "value",
      "name": "_SQRT1_2",
      "signature": "let _SQRT1_2: float",
      "docstrings": ["Square root of 1/2; ≈ 0.7071067811865476. See\n  [`Math.SQRT1_2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2)\n  on MDN."]
    }, 
    {
      "id": "Js.Math._SQRT2",
      "kind": "value",
      "name": "_SQRT2",
      "signature": "let _SQRT2: float",
      "docstrings": ["Square root of 2; ≈ 1.4142135623730951. See\n  [`Math.SQRT2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.abs_int",
      "kind": "value",
      "name": "abs_int",
      "signature": "let abs_int: int => int",
      "docstrings": ["Absolute value for integer argument. See\n  [`Math.abs`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.abs_float",
      "kind": "value",
      "name": "abs_float",
      "signature": "let abs_float: float => float",
      "docstrings": ["Absolute value for float argument. See\n  [`Math.abs`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.acos",
      "kind": "value",
      "name": "acos",
      "signature": "let acos: float => float",
      "docstrings": ["Arccosine (in radians) of argument; returns `NaN` if the argument is outside\n  the range [-1.0, 1.0]. See\n  [`Math.acos`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.acosh",
      "kind": "value",
      "name": "acosh",
      "signature": "let acosh: float => float",
      "docstrings": ["Hyperbolic arccosine (in radians) of argument; returns `NaN` if the argument\n  is less than 1.0. See\n  [`Math.acosh`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.asin",
      "kind": "value",
      "name": "asin",
      "signature": "let asin: float => float",
      "docstrings": ["Arcsine (in radians) of argument; returns `NaN` if the argument is outside\n  the range [-1.0, 1.0]. See\n  [`Math.asin`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.asinh",
      "kind": "value",
      "name": "asinh",
      "signature": "let asinh: float => float",
      "docstrings": ["Hyperbolic arcsine (in radians) of argument. See\n  [`Math.asinh`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.atan",
      "kind": "value",
      "name": "atan",
      "signature": "let atan: float => float",
      "docstrings": ["Arctangent (in radians) of argument. See\n  [`Math.atan`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.atanh",
      "kind": "value",
      "name": "atanh",
      "signature": "let atanh: float => float",
      "docstrings": ["Hyperbolic arctangent (in radians) of argument; returns `NaN` if the argument\n  is is outside the range [-1.0, 1.0]. Returns `-Infinity` and `Infinity` for\n  arguments -1.0 and 1.0. See\n  [`Math.atanh`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.atan2",
      "kind": "value",
      "name": "atan2",
      "signature": "let atan2: (~y: float, ~x: float, unit) => float",
      "docstrings": ["Returns the angle (in radians) of the quotient `y /. x`. It is also the angle\n  between the *x*-axis and point (*x*, *y*). See\n  [`Math.atan2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2)\n  on MDN.\n\n  ```rescript\n  Js.Math.atan2(~y=0.0, ~x=10.0, ()) == 0.0\n  Js.Math.atan2(~x=5.0, ~y=5.0, ()) == Js.Math._PI /. 4.0\n  Js.Math.atan2(~x=-5.0, ~y=5.0, ())\n  Js.Math.atan2(~x=-5.0, ~y=5.0, ()) == 3.0 *. Js.Math._PI /. 4.0\n  Js.Math.atan2(~x=-0.0, ~y=-5.0, ()) == -.Js.Math._PI /. 2.0\n  ```"]
    }, 
    {
      "id": "Js.Math.cbrt",
      "kind": "value",
      "name": "cbrt",
      "signature": "let cbrt: float => float",
      "docstrings": ["Cube root. See\n  [`Math.cbrt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt)\n  on MDN"]
    }, 
    {
      "id": "Js.Math.unsafe_ceil_int",
      "kind": "value",
      "name": "unsafe_ceil_int",
      "signature": "let unsafe_ceil_int: float => int",
      "docstrings": ["Returns the smallest integer greater than or equal to the argument. This\n  function may return values not representable by `int`, whose range is\n  -2147483648 to 2147483647. This is because, in JavaScript, there are only\n  64-bit floating point numbers, which can represent integers in the range\n  ±(2<sup>53</sup>-1) exactly. See\n  [`Math.ceil`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil)\n  on MDN.\n\n  ```rescript\n  Js.Math.unsafe_ceil_int(3.1) == 4\n  Js.Math.unsafe_ceil_int(3.0) == 3\n  Js.Math.unsafe_ceil_int(-3.1) == -3\n  Js.Math.unsafe_ceil_int(1.0e15) // result is outside range of int datatype\n  ```"]
    }, 
    {
      "id": "Js.Math.unsafe_ceil",
      "kind": "value",
      "name": "unsafe_ceil",
      "deprecated": "Please use `unsafe_ceil_int` instead",
      "signature": "let unsafe_ceil: float => int",
      "docstrings": ["Deprecated; please use [`unsafe_ceil_int`](#unsafe_ceil_int) instead."]
    }, 
    {
      "id": "Js.Math.ceil_int",
      "kind": "value",
      "name": "ceil_int",
      "signature": "let ceil_int: float => int",
      "docstrings": ["Returns the smallest `int` greater than or equal to the argument; the result\n  is pinned to the range of the `int` data type: -2147483648 to 2147483647. See\n  [`Math.ceil`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil)\n  on MDN.\n\n  ```rescript\n  Js.Math.ceil_int(3.1) == 4\n  Js.Math.ceil_int(3.0) == 3\n  Js.Math.ceil_int(-3.1) == -3\n  Js.Math.ceil_int(-1.0e15) == -2147483648\n  Js.Math.ceil_int(1.0e15) == 2147483647\n  ```"]
    }, 
    {
      "id": "Js.Math.ceil",
      "kind": "value",
      "name": "ceil",
      "deprecated": "Please use `ceil_int` instead",
      "signature": "let ceil: float => int",
      "docstrings": ["Deprecated; please use [`ceil_int`](#ceil_int) instead."]
    }, 
    {
      "id": "Js.Math.ceil_float",
      "kind": "value",
      "name": "ceil_float",
      "signature": "let ceil_float: float => float",
      "docstrings": ["Returns the smallest integral value greater than or equal to the argument.\n  The result is a `float` and is not restricted to the `int` data type range.\n  See\n  [`Math.ceil`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil)\n  on MDN.\n\n  ```rescript\n  Js.Math.ceil_float(3.1) == 4.0\n  Js.Math.ceil_float(3.0) == 3.0\n  Js.Math.ceil_float(-3.1) == -3.0\n  Js.Math.ceil_float(2_150_000_000.3) == 2_150_000_001.0\n  ```"]
    }, 
    {
      "id": "Js.Math.clz32",
      "kind": "value",
      "name": "clz32",
      "signature": "let clz32: int => int",
      "docstrings": ["Number of leading zero bits of the argument's 32 bit int representation. See\n  [`Math.clz32`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32)\n  on MDN.\n\n  ```rescript\n  Js.Math.clz32(0) == 32\n  Js.Math.clz32(-1) == 0\n  Js.Math.clz32(255) == 24\n  ```"]
    }, 
    {
      "id": "Js.Math.cos",
      "kind": "value",
      "name": "cos",
      "signature": "let cos: float => float",
      "docstrings": ["Cosine of argument, which must be specified in radians. See\n  [`Math.cos`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.cosh",
      "kind": "value",
      "name": "cosh",
      "signature": "let cosh: float => float",
      "docstrings": ["Hyperbolic cosine of argument, which must be specified in radians. See\n  [`Math.cosh`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.exp",
      "kind": "value",
      "name": "exp",
      "signature": "let exp: float => float",
      "docstrings": ["Natural exponentional; returns *e* (the base of natural logarithms) to the\n  power of the given argument. See\n  [`Math.exp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.expm1",
      "kind": "value",
      "name": "expm1",
      "signature": "let expm1: float => float",
      "docstrings": ["Returns *e* (the base of natural logarithms) to the power of the given\n  argument minus 1. See\n  [`Math.expm1`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.unsafe_floor_int",
      "kind": "value",
      "name": "unsafe_floor_int",
      "signature": "let unsafe_floor_int: float => int",
      "docstrings": ["Returns the largest integer less than or equal to the argument. This function\n  may return values not representable by `int`, whose range is -2147483648 to\n  2147483647. This is because, in JavaScript, there are only 64-bit floating\n  point numbers, which can represent integers in the range\n  ±(2<sup>53</sup>-1) exactly. See\n  [`Math.floor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor)\n  on MDN.\n\n  ```rescript\n  Js.Math.unsafe_floor_int(3.7) == 3\n  Js.Math.unsafe_floor_int(3.0) == 3\n  Js.Math.unsafe_floor_int(-3.7) == -4\n  Js.Math.unsafe_floor_int(1.0e15) // result is outside range of int datatype\n  ```"]
    }, 
    {
      "id": "Js.Math.unsafe_floor",
      "kind": "value",
      "name": "unsafe_floor",
      "deprecated": "Please use `unsafe_floor_int` instead",
      "signature": "let unsafe_floor: float => int",
      "docstrings": ["Deprecated; please use [`unsafe_floor_int`](#unsafe_floor_int) instead."]
    }, 
    {
      "id": "Js.Math.floor_int",
      "kind": "value",
      "name": "floor_int",
      "signature": "let floor_int: float => int",
      "docstrings": ["Returns the largest `int` less than or equal to the argument; the result is\n  pinned to the range of the `int` data type: -2147483648 to 2147483647. See\n  [`Math.floor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor)\n  on MDN.\n\n  ```rescript\n  Js.Math.floor_int(3.7) == 3\n  Js.Math.floor_int(3.0) == 3\n  Js.Math.floor_int(-3.1) == -4\n  Js.Math.floor_int(-1.0e15) == -2147483648\n  Js.Math.floor_int(1.0e15) == 2147483647\n  ```"]
    }, 
    {
      "id": "Js.Math.floor",
      "kind": "value",
      "name": "floor",
      "deprecated": "Please use `floor_int` instead",
      "signature": "let floor: float => int",
      "docstrings": ["Deprecated; please use [`floor_int`](#floor_int) instead."]
    }, 
    {
      "id": "Js.Math.floor_float",
      "kind": "value",
      "name": "floor_float",
      "signature": "let floor_float: float => float",
      "docstrings": ["Returns the largest integral value less than or equal to the argument. The\n  result is a `float` and is not restricted to the `int` data type range. See\n  [`Math.floor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor)\n  on MDN.\n\n  ```rescript\n  Js.Math.floor_float(3.7) == 3.0\n  Js.Math.floor_float(3.0) == 3.0\n  Js.Math.floor_float(-3.1) == -4.0\n  Js.Math.floor_float(2_150_000_000.3) == 2_150_000_000.0\n  ```"]
    }, 
    {
      "id": "Js.Math.fround",
      "kind": "value",
      "name": "fround",
      "signature": "let fround: float => float",
      "docstrings": ["Round to nearest single precision float. See\n  [`Math.fround`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround)\n  on MDN.\n\n  ```rescript\n  Js.Math.fround(5.5) == 5.5\n  Js.Math.fround(5.05) == 5.050000190734863\n  ```"]
    }, 
    {
      "id": "Js.Math.hypot",
      "kind": "value",
      "name": "hypot",
      "signature": "let hypot: (float, float) => float",
      "docstrings": ["Returns the square root of the sum of squares of its two arguments (the\n  Pythagorean formula). See\n  [`Math.hypot`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.hypotMany",
      "kind": "value",
      "name": "hypotMany",
      "signature": "let hypotMany: array<float> => float",
      "docstrings": ["Returns the square root of the sum of squares of the numbers in the array\n  argument (generalized Pythagorean equation). Using an array allows you to\n  have more than two items. See\n  [`Math.hypot`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot)\n  on MDN.\n\n  ```rescript\n  Js.Math.hypotMany([3.0, 4.0, 12.0]) == 13.0\n  ```"]
    }, 
    {
      "id": "Js.Math.imul",
      "kind": "value",
      "name": "imul",
      "signature": "let imul: (int, int) => int",
      "docstrings": ["32-bit integer multiplication. Use this only when you need to optimize\n  performance of multiplication of numbers stored as 32-bit integers. See\n  [`Math.imul`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.log",
      "kind": "value",
      "name": "log",
      "signature": "let log: float => float",
      "docstrings": ["Returns the natural logarithm of its argument; this is the number *x* such\n  that *e*<sup>*x*</sup> equals the argument. Returns `NaN` for negative\n  arguments. See\n  [`Math.log`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log)\n  on MDN.\n\n  ```rescript\n  Js.Math.log(Js.Math._E) == 1.0\n  Js.Math.log(100.0) == 4.605170185988092\n  ```"]
    }, 
    {
      "id": "Js.Math.log1p",
      "kind": "value",
      "name": "log1p",
      "signature": "let log1p: float => float",
      "docstrings": ["Returns the natural logarithm of one plus the argument. Returns `NaN` for\n  arguments less than -1. See\n  [`Math.log1p`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p)\n  on MDN.\n\n  ```rescript\n  Js.Math.log1p(Js.Math._E -. 1.0) == 1.0\n  Js.Math.log1p(99.0) == 4.605170185988092\n  ```"]
    }, 
    {
      "id": "Js.Math.log10",
      "kind": "value",
      "name": "log10",
      "signature": "let log10: float => float",
      "docstrings": ["Returns the base 10 logarithm of its argument. Returns `NaN` for negative\n  arguments. See\n  [`Math.log10`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10)\n  on MDN.\n\n  ```rescript\n  Js.Math.log10(1000.0) == 3.0\n  Js.Math.log10(0.01) == -2.0\n  Js.Math.log10(Js.Math.sqrt(10.0)) == 0.5\n  ```"]
    }, 
    {
      "id": "Js.Math.log2",
      "kind": "value",
      "name": "log2",
      "signature": "let log2: float => float",
      "docstrings": ["Returns the base 2 logarithm of its argument. Returns `NaN` for negative\n  arguments. See\n  [`Math.log2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2)\n  on MDN.\n\n  ```rescript\n  Js.Math.log2(512.0) == 9.0\n  Js.Math.log2(0.125) == -3.0\n  Js.Math.log2(Js.Math._SQRT2) == 0.5000000000000001 // due to precision\n  ```"]
    }, 
    {
      "id": "Js.Math.max_int",
      "kind": "value",
      "name": "max_int",
      "signature": "let max_int: (int, int) => int",
      "docstrings": ["Returns the maximum of its two integer arguments.  See\n  [`Math.max`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.maxMany_int",
      "kind": "value",
      "name": "maxMany_int",
      "signature": "let maxMany_int: array<int> => int",
      "docstrings": ["Returns the maximum of the integers in the given array.  See\n  [`Math.max`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.max_float",
      "kind": "value",
      "name": "max_float",
      "signature": "let max_float: (float, float) => float",
      "docstrings": ["Returns the maximum of its two floating point arguments. See\n  [`Math.max`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.maxMany_float",
      "kind": "value",
      "name": "maxMany_float",
      "signature": "let maxMany_float: array<float> => float",
      "docstrings": ["Returns the maximum of the floating point values in the given array. See\n  [`Math.max`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.min_int",
      "kind": "value",
      "name": "min_int",
      "signature": "let min_int: (int, int) => int",
      "docstrings": ["Returns the minimum of its two integer arguments. See\n  [`Math.min`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.minMany_int",
      "kind": "value",
      "name": "minMany_int",
      "signature": "let minMany_int: array<int> => int",
      "docstrings": ["Returns the minimum of the integers in the given array. See\n  [`Math.min`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.min_float",
      "kind": "value",
      "name": "min_float",
      "signature": "let min_float: (float, float) => float",
      "docstrings": ["Returns the minimum of its two floating point arguments. See\n  [`Math.min`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.minMany_float",
      "kind": "value",
      "name": "minMany_float",
      "signature": "let minMany_float: array<float> => float",
      "docstrings": ["Returns the minimum of the floating point values in the given array. See\n  [`Math.min`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.pow_int",
      "kind": "value",
      "name": "pow_int",
      "deprecated": "use `pow_float` instead, the return type may be not int",
      "signature": "let pow_int: (~base: int, ~exp: int) => int",
      "docstrings": ["Raises the given base to the given exponent. (Arguments and result are\n  integers.) See\n  [`Math.pow`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow)\n  on MDN.\n\n  ```rescript\n  Js.Math.pow_int(~base=3, ~exp=4) == 81\n  ```"]
    }, 
    {
      "id": "Js.Math.pow_float",
      "kind": "value",
      "name": "pow_float",
      "signature": "let pow_float: (~base: float, ~exp: float) => float",
      "docstrings": ["Raises the given base to the given exponent. (Arguments and result are\n  floats.) Returns `NaN` if the result would be imaginary. See\n  [`Math.pow`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow)\n  on MDN.\n\n  ```rescript\n  Js.Math.pow_float(~base=3.0, ~exp=4.0) == 81.0\n  Js.Math.pow_float(~base=4.0, ~exp=-2.0) == 0.0625\n  Js.Math.pow_float(~base=625.0, ~exp=0.5) == 25.0\n  Js.Math.pow_float(~base=625.0, ~exp=-0.5) == 0.04\n  Js.Float.isNaN(Js.Math.pow_float(~base=-2.0, ~exp=0.5)) == true\n  ```"]
    }, 
    {
      "id": "Js.Math.random",
      "kind": "value",
      "name": "random",
      "signature": "let random: unit => float",
      "docstrings": ["Returns a random number in the half-closed interval [0,1). See\n  [`Math.random`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.random_int",
      "kind": "value",
      "name": "random_int",
      "signature": "let random_int: (int, int) => int",
      "docstrings": ["A call to `random_int(minVal, maxVal)` returns a random number in the\n  half-closed interval [minVal, maxVal). See\n  [`Math.random`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.unsafe_round",
      "kind": "value",
      "name": "unsafe_round",
      "signature": "let unsafe_round: float => int",
      "docstrings": ["Rounds its argument to nearest integer. For numbers with a fractional portion\n  of exactly 0.5, the argument is rounded to the next integer in the direction\n  of positive infinity. This function may return values not representable by\n  `int`, whose range is -2147483648 to 2147483647. This is because, in\n  JavaScript, there are only 64-bit floating point numbers, which can represent\n  integers in the range ±(2<sup>53</sup>-1) exactly. See\n  [`Math.round`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round)\n  on MDN.\n\n  ```rescript\n  Js.Math.unsafe_round(3.7) == 4\n  Js.Math.unsafe_round(-3.5) == -3\n  Js.Math.unsafe_round(2_150_000_000_000.3) // out of range for int\n  ```"]
    }, 
    {
      "id": "Js.Math.round",
      "kind": "value",
      "name": "round",
      "signature": "let round: float => float",
      "docstrings": ["Rounds to nearest integral value (expressed as a float). See\n  [`Math.round`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.sign_int",
      "kind": "value",
      "name": "sign_int",
      "signature": "let sign_int: int => int",
      "docstrings": ["Returns the sign of its integer argument: -1 if negative, 0 if zero, 1 if\n  positive. See\n  [`Math.sign`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.sign_float",
      "kind": "value",
      "name": "sign_float",
      "signature": "let sign_float: float => float",
      "docstrings": ["Returns the sign of its float argument: -1.0 if negative, 0.0 if zero, 1.0 if\n  positive. See\n  [`Math.sign`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.sin",
      "kind": "value",
      "name": "sin",
      "signature": "let sin: float => float",
      "docstrings": ["Sine of argument, which must be specified in radians. See\n  [`Math.sin`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.sinh",
      "kind": "value",
      "name": "sinh",
      "signature": "let sinh: float => float",
      "docstrings": ["Hyperbolic sine of argument, which must be specified in radians. See\n  [`Math.sinh`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.sqrt",
      "kind": "value",
      "name": "sqrt",
      "signature": "let sqrt: float => float",
      "docstrings": ["Square root. If the argument is negative, this function returns `NaN`. See\n  [`Math.sqrt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.tan",
      "kind": "value",
      "name": "tan",
      "signature": "let tan: float => float",
      "docstrings": ["Tangent of argument, which must be specified in radians. Returns `NaN` if the\n  argument is positive infinity or negative infinity. See\n  [`Math.cos`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.tanh",
      "kind": "value",
      "name": "tanh",
      "signature": "let tanh: float => float",
      "docstrings": ["Hyperbolic tangent of argument, which must be specified in radians. See\n  [`Math.tanh`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.unsafe_trunc",
      "kind": "value",
      "name": "unsafe_trunc",
      "signature": "let unsafe_trunc: float => int",
      "docstrings": ["Truncates its argument; i.e., removes fractional digits. This function may\n  return values not representable by `int`, whose range is -2147483648 to\n  2147483647. This is because, in JavaScript, there are only 64-bit floating\n  point numbers, which can represent integers in the range ±(2<sup>53</sup>-1)\n  exactly. See\n  [`Math.trunc`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc)\n  on MDN."]
    }, 
    {
      "id": "Js.Math.trunc",
      "kind": "value",
      "name": "trunc",
      "signature": "let trunc: float => float",
      "docstrings": ["Truncates its argument; i.e., removes fractional digits. See\n  [`Math.trunc`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc)\n  on MDN."]
    }]
  }, 
  {
    "id": "Js.Obj",
    "kind": "moduleAlias",
    "name": "Obj",
    "docstrings": ["Provide utilities for `Js.t`"],
    "items": [
    {
      "id": "Js.Obj.empty",
      "kind": "value",
      "name": "empty",
      "signature": "let empty: unit => {..}",
      "docstrings": ["`empty()` returns the empty object `{}`"]
    }, 
    {
      "id": "Js.Obj.assign",
      "kind": "value",
      "name": "assign",
      "signature": "let assign: ({..}, {..}) => {..}",
      "docstrings": ["`assign(target, source)` copies properties from source to target.\nProperties in `target` will be overwritten by properties in `source` if they have the same key.\nReturns `target`.\n\n**See** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n\n```rescript\n/* Copy an object */\n\nlet obj = {\"a\": 1}\n\nlet copy = Js.Obj.assign(Js.Obj.empty(), obj)\n\n/* prints \"{ a: 1 }\" */\nJs.log(copy)\n\n/* Merge objects with same properties */\n\nlet target = {\"a\": 1, \"b\": 1}\nlet source = {\"b\": 2}\n\nlet obj = Js.Obj.assign(target, source)\n\n/* prints \"{ a: 1, b: 2 }\" */\nJs.log(obj)\n\n/* prints \"{ a: 1, b: 2 }\", target is modified */\nJs.log(target)\n```"]
    }, 
    {
      "id": "Js.Obj.keys",
      "kind": "value",
      "name": "keys",
      "signature": "let keys: {..} => array<string>",
      "docstrings": ["`keys(obj)` returns an `array` of the keys of `obj`'s own enumerable properties."]
    }]
  }, 
  {
    "id": "Js.Typed_array",
    "kind": "moduleAlias",
    "name": "Typed_array",
    "docstrings": ["Provide bindings for JS typed array"],
    "items": [
    {
      "id": "Js.Typed_array.array_buffer",
      "kind": "type",
      "name": "array_buffer",
      "signature": "type array_buffer = Js_typed_array2.array_buffer",
      "docstrings": []
    }, 
    {
      "id": "Js.Typed_array.array_like",
      "kind": "type",
      "name": "array_like",
      "signature": "type array_like<'a> = Js_typed_array2.array_like<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Typed_array.Type",
      "name": "Type",
      "kind": "module",
      "items": [
      {
        "id": "Js.Typed_array.Type.t",
        "kind": "type",
        "name": "t",
        "signature": "type t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.Typed_array.ArrayBuffer",
      "name": "ArrayBuffer",
      "kind": "module",
      "items": [
      {
        "id": "Js.Typed_array.ArrayBuffer.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.ArrayBuffer.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: int => t",
        "docstrings": ["takes length. initializes elements to 0"]
      }, 
      {
        "id": "Js.Typed_array.ArrayBuffer.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.ArrayBuffer.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (~start: int, ~end_: int, t) => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.ArrayBuffer.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (int, t) => array_buffer",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.Typed_array.S",
      "name": "S",
      "kind": "module",
      "items": [
      {
        "id": "Js.Typed_array.S.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (array<elt>, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (array<elt>, int, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (~to_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (~to_: int, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (elt, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (elt, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: ((. elt, elt) => int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (elt, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (string, t) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: ((. elt) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: ((. elt, int) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: ((. elt) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: ((. elt, int) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: ((. elt) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: ((. elt, int) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: ((. elt) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: ((. elt, int) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: ((. elt) => 'b, t) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: ((. elt, int) => 'b, t) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: ((. 'b, elt) => 'b, 'b, t) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: ((. 'b, elt, int) => 'b, 'b, t) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: ((. 'b, elt) => 'b, 'b, t) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: ((. 'b, elt, int) => 'b, 'b, t) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.S.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.Typed_array.Int8Array",
      "name": "Int8Array",
      "kind": "module",
      "items": [
      {
        "id": "Js.Typed_array.Int8Array.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = int",
        "docstrings": [""]
      }, 
      {
        "id": "Js.Typed_array.Int8Array.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a> = Js_typed_array2.Int8Array.typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (array<elt>, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (array<elt>, int, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (~to_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (~to_: int, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (elt, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (elt, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: ((. elt, elt) => int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (elt, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (string, t) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: ((. elt) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: ((. elt, int) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: ((. elt) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: ((. elt, int) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: ((. elt) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: ((. elt, int) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: ((. elt) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: ((. elt, int) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: ((. elt) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: ((. elt, int) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.Typed_array.Int8Array.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["raise Js.Exn.Error raise Js exception\n\n    param offset is in bytes"]
      }, 
      {
        "id": "Js.Typed_array.Int8Array.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["raise Js.Exn.Error raises Js exception\n\n    param offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.Typed_array.Int8Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int8Array.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.Typed_array.Uint8Array",
      "name": "Uint8Array",
      "kind": "module",
      "items": [
      {
        "id": "Js.Typed_array.Uint8Array.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = int",
        "docstrings": [""]
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a> = Js_typed_array2.Uint8Array.typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (array<elt>, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (array<elt>, int, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (~to_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (~to_: int, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (elt, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (elt, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: ((. elt, elt) => int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (elt, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (string, t) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: ((. elt) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: ((. elt, int) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: ((. elt) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: ((. elt, int) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: ((. elt) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: ((. elt, int) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: ((. elt) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: ((. elt, int) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: ((. elt) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: ((. elt, int) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8Array.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.Typed_array.Uint8ClampedArray",
      "name": "Uint8ClampedArray",
      "kind": "module",
      "items": [
      {
        "id": "Js.Typed_array.Uint8ClampedArray.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = int",
        "docstrings": [""]
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a> = Js_typed_array2.Uint8ClampedArray.typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (array<elt>, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (array<elt>, int, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (~to_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (~to_: int, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (elt, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (elt, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: ((. elt, elt) => int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (elt, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (string, t) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: ((. elt) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: ((. elt, int) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: ((. elt) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: ((. elt, int) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: ((. elt) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: ((. elt, int) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: ((. elt) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: ((. elt, int) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: ((. elt) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: ((. elt, int) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint8ClampedArray.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.Typed_array.Int16Array",
      "name": "Int16Array",
      "kind": "module",
      "items": [
      {
        "id": "Js.Typed_array.Int16Array.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = int",
        "docstrings": [""]
      }, 
      {
        "id": "Js.Typed_array.Int16Array.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a> = Js_typed_array2.Int16Array.typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (array<elt>, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (array<elt>, int, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (~to_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (~to_: int, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (elt, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (elt, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: ((. elt, elt) => int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (elt, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (string, t) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: ((. elt) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: ((. elt, int) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: ((. elt) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: ((. elt, int) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: ((. elt) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: ((. elt, int) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: ((. elt) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: ((. elt, int) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: ((. elt) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: ((. elt, int) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.Typed_array.Int16Array.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.Typed_array.Int16Array.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.Typed_array.Int16Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int16Array.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.Typed_array.Uint16Array",
      "name": "Uint16Array",
      "kind": "module",
      "items": [
      {
        "id": "Js.Typed_array.Uint16Array.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = int",
        "docstrings": [""]
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a> = Js_typed_array2.Uint16Array.typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (array<elt>, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (array<elt>, int, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (~to_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (~to_: int, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (elt, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (elt, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: ((. elt, elt) => int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (elt, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (string, t) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: ((. elt) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: ((. elt, int) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: ((. elt) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: ((. elt, int) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: ((. elt) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: ((. elt, int) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: ((. elt) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: ((. elt, int) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: ((. elt) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: ((. elt, int) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint16Array.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.Typed_array.Int32Array",
      "name": "Int32Array",
      "kind": "module",
      "items": [
      {
        "id": "Js.Typed_array.Int32Array.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = int",
        "docstrings": [""]
      }, 
      {
        "id": "Js.Typed_array.Int32Array.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a> = Js_typed_array2.Int32Array.typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (array<elt>, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (array<elt>, int, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (~to_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (~to_: int, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (elt, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (elt, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: ((. elt, elt) => int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (elt, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (string, t) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: ((. elt) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: ((. elt, int) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: ((. elt) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: ((. elt, int) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: ((. elt) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: ((. elt, int) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: ((. elt) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: ((. elt, int) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: ((. elt) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: ((. elt, int) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.Typed_array.Int32Array.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.Typed_array.Int32Array.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.Typed_array.Int32Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.create",
        "kind": "value",
        "name": "create",
        "deprecated": "use `make` instead",
        "signature": "let create: array<int> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Int32Array.of_buffer",
        "kind": "value",
        "name": "of_buffer",
        "deprecated": "use `fromBuffer` instead",
        "signature": "let of_buffer: array_buffer => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.Typed_array.Int32_array",
      "kind": "moduleAlias",
      "name": "Int32_array",
      "docstrings": [],
      "items": []
    }, 
    {
      "id": "Js.Typed_array.Uint32Array",
      "name": "Uint32Array",
      "kind": "module",
      "items": [
      {
        "id": "Js.Typed_array.Uint32Array.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = int",
        "docstrings": [""]
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a> = Js_typed_array2.Uint32Array.typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (array<elt>, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (array<elt>, int, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (~to_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (~to_: int, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (elt, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (elt, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: ((. elt, elt) => int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (elt, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (string, t) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: ((. elt) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: ((. elt, int) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: ((. elt) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: ((. elt, int) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: ((. elt) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: ((. elt, int) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: ((. elt) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: ((. elt, int) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: ((. elt) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: ((. elt, int) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Uint32Array.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.Typed_array.Float32Array",
      "name": "Float32Array",
      "kind": "module",
      "items": [
      {
        "id": "Js.Typed_array.Float32Array.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = float",
        "docstrings": [""]
      }, 
      {
        "id": "Js.Typed_array.Float32Array.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a> = Js_typed_array2.Float32Array.typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (array<elt>, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (array<elt>, int, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (~to_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (~to_: int, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (elt, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (elt, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: ((. elt, elt) => int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (elt, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (string, t) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: ((. elt) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: ((. elt, int) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: ((. elt) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: ((. elt, int) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: ((. elt) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: ((. elt, int) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: ((. elt) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: ((. elt, int) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: ((. elt) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: ((. elt, int) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.Typed_array.Float32Array.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.Typed_array.Float32Array.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.Typed_array.Float32Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.create",
        "kind": "value",
        "name": "create",
        "deprecated": "use `make` instead",
        "signature": "let create: array<float> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float32Array.of_buffer",
        "kind": "value",
        "name": "of_buffer",
        "deprecated": "use `fromBuffer` instead",
        "signature": "let of_buffer: array_buffer => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.Typed_array.Float32_array",
      "kind": "moduleAlias",
      "name": "Float32_array",
      "docstrings": [],
      "items": []
    }, 
    {
      "id": "Js.Typed_array.Float64Array",
      "name": "Float64Array",
      "kind": "module",
      "items": [
      {
        "id": "Js.Typed_array.Float64Array.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = float",
        "docstrings": [""]
      }, 
      {
        "id": "Js.Typed_array.Float64Array.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a> = Js_typed_array2.Float64Array.typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (array<elt>, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (array<elt>, int, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (~to_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (~to_: int, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (~to_: int, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (elt, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (elt, ~from: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (elt, ~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: ((. elt, elt) => int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (elt, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (string, t) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (elt, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (elt, ~from: int, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (~start: int, ~end_: int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (int, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: ((. elt) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: ((. elt, int) => bool, t) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: ((. elt) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: ((. elt, int) => bool, t) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: ((. elt) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: ((. elt, int) => bool, t) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: ((. elt) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: ((. elt, int) => unit, t) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: ((. elt) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: ((. elt, int) => 'a, t) => typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: ((. 'a, elt) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: ((. 'a, elt, int) => 'a, 'a, t) => 'a",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: ((. elt) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: ((. elt, int) => bool, t) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.Typed_array.Float64Array.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.Typed_array.Float64Array.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.Typed_array.Float64Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.create",
        "kind": "value",
        "name": "create",
        "deprecated": "use `make` instead",
        "signature": "let create: array<float> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.Float64Array.of_buffer",
        "kind": "value",
        "name": "of_buffer",
        "deprecated": "use `fromBuffer` instead",
        "signature": "let of_buffer: array_buffer => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.Typed_array.Float64_array",
      "kind": "moduleAlias",
      "name": "Float64_array",
      "docstrings": [],
      "items": []
    }, 
    {
      "id": "Js.Typed_array.DataView",
      "name": "DataView",
      "kind": "module",
      "items": [
      {
        "id": "Js.Typed_array.DataView.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = Js_typed_array2.DataView.t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array_buffer => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.getInt8",
        "kind": "value",
        "name": "getInt8",
        "signature": "let getInt8: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.getUint8",
        "kind": "value",
        "name": "getUint8",
        "signature": "let getUint8: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.getInt16",
        "kind": "value",
        "name": "getInt16",
        "signature": "let getInt16: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.getInt16LittleEndian",
        "kind": "value",
        "name": "getInt16LittleEndian",
        "signature": "let getInt16LittleEndian: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.getUint16",
        "kind": "value",
        "name": "getUint16",
        "signature": "let getUint16: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.getUint16LittleEndian",
        "kind": "value",
        "name": "getUint16LittleEndian",
        "signature": "let getUint16LittleEndian: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.getInt32",
        "kind": "value",
        "name": "getInt32",
        "signature": "let getInt32: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.getInt32LittleEndian",
        "kind": "value",
        "name": "getInt32LittleEndian",
        "signature": "let getInt32LittleEndian: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.getUint32",
        "kind": "value",
        "name": "getUint32",
        "signature": "let getUint32: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.getUint32LittleEndian",
        "kind": "value",
        "name": "getUint32LittleEndian",
        "signature": "let getUint32LittleEndian: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.getFloat32",
        "kind": "value",
        "name": "getFloat32",
        "signature": "let getFloat32: (t, int) => float",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.getFloat32LittleEndian",
        "kind": "value",
        "name": "getFloat32LittleEndian",
        "signature": "let getFloat32LittleEndian: (t, int) => float",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.getFloat64",
        "kind": "value",
        "name": "getFloat64",
        "signature": "let getFloat64: (t, int) => float",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.getFloat64LittleEndian",
        "kind": "value",
        "name": "getFloat64LittleEndian",
        "signature": "let getFloat64LittleEndian: (t, int) => float",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.setInt8",
        "kind": "value",
        "name": "setInt8",
        "signature": "let setInt8: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.setUint8",
        "kind": "value",
        "name": "setUint8",
        "signature": "let setUint8: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.setInt16",
        "kind": "value",
        "name": "setInt16",
        "signature": "let setInt16: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.setInt16LittleEndian",
        "kind": "value",
        "name": "setInt16LittleEndian",
        "signature": "let setInt16LittleEndian: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.setUint16",
        "kind": "value",
        "name": "setUint16",
        "signature": "let setUint16: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.setUint16LittleEndian",
        "kind": "value",
        "name": "setUint16LittleEndian",
        "signature": "let setUint16LittleEndian: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.setInt32",
        "kind": "value",
        "name": "setInt32",
        "signature": "let setInt32: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.setInt32LittleEndian",
        "kind": "value",
        "name": "setInt32LittleEndian",
        "signature": "let setInt32LittleEndian: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.setUint32",
        "kind": "value",
        "name": "setUint32",
        "signature": "let setUint32: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.setUint32LittleEndian",
        "kind": "value",
        "name": "setUint32LittleEndian",
        "signature": "let setUint32LittleEndian: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.setFloat32",
        "kind": "value",
        "name": "setFloat32",
        "signature": "let setFloat32: (t, int, float) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.setFloat32LittleEndian",
        "kind": "value",
        "name": "setFloat32LittleEndian",
        "signature": "let setFloat32LittleEndian: (t, int, float) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.setFloat64",
        "kind": "value",
        "name": "setFloat64",
        "signature": "let setFloat64: (t, int, float) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.Typed_array.DataView.setFloat64LittleEndian",
        "kind": "value",
        "name": "setFloat64LittleEndian",
        "signature": "let setFloat64LittleEndian: (t, int, float) => unit",
        "docstrings": []
      }]
    }]
  }, 
  {
    "id": "Js.TypedArray2",
    "kind": "moduleAlias",
    "name": "TypedArray2",
    "docstrings": ["Provide bindings for JS typed array"],
    "items": [
    {
      "id": "Js.TypedArray2.array_buffer",
      "kind": "type",
      "name": "array_buffer",
      "signature": "type array_buffer",
      "docstrings": []
    }, 
    {
      "id": "Js.TypedArray2.array_like",
      "kind": "type",
      "name": "array_like",
      "signature": "type array_like<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.TypedArray2.ArrayBuffer",
      "name": "ArrayBuffer",
      "kind": "module",
      "items": [
      {
        "id": "Js.TypedArray2.ArrayBuffer.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.ArrayBuffer.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: int => t",
        "docstrings": ["takes length. initializes elements to 0"]
      }, 
      {
        "id": "Js.TypedArray2.ArrayBuffer.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.ArrayBuffer.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (t, ~start: int, ~end_: int) => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.ArrayBuffer.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (t, int) => array_buffer",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.TypedArray2.Int8Array",
      "name": "Int8Array",
      "kind": "module",
      "items": [
      {
        "id": "Js.TypedArray2.Int8Array.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = int",
        "docstrings": [""]
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": [],
        "detail": 
        {
          "kind": "variant",
          "items": [
          {
            "name": "Value",
            "docstrings": [],
            "signature": "Value('a)"
          }, 
          {
            "name": "Null",
            "docstrings": [],
            "signature": "Null"
          }, 
          {
            "name": "Undefined",
            "docstrings": [],
            "signature": "Undefined"
          }]
        }
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (t, array<elt>) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (t, array<elt>, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (t, ~to_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (t, ~to_: int, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (t, ~to_: int, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (t, elt) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (t, elt, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (t, elt, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: (t, (. elt, elt) => int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (t, elt) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (t, string) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: (t, (. elt) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: (t, (. elt, int) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: (t, (. elt) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: (t, (. elt, int) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: (t, (. elt) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: (t, (. elt, int) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: (t, (. elt) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: (t, (. elt, int) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: (t, (. elt) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: (t, (. elt, int) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int8Array.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.TypedArray2.Uint8Array",
      "name": "Uint8Array",
      "kind": "module",
      "items": [
      {
        "id": "Js.TypedArray2.Uint8Array.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = int",
        "docstrings": [""]
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (t, array<elt>) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (t, array<elt>, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (t, ~to_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (t, ~to_: int, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (t, ~to_: int, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (t, elt) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (t, elt, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (t, elt, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: (t, (. elt, elt) => int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (t, elt) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (t, string) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: (t, (. elt) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: (t, (. elt, int) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: (t, (. elt) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: (t, (. elt, int) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: (t, (. elt) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: (t, (. elt, int) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: (t, (. elt) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: (t, (. elt, int) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: (t, (. elt) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: (t, (. elt, int) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8Array.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.TypedArray2.Uint8ClampedArray",
      "name": "Uint8ClampedArray",
      "kind": "module",
      "items": [
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = int",
        "docstrings": [""]
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (t, array<elt>) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (t, array<elt>, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (t, ~to_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (t, ~to_: int, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (t, ~to_: int, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (t, elt) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (t, elt, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (t, elt, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: (t, (. elt, elt) => int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (t, elt) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (t, string) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: (t, (. elt) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: (t, (. elt, int) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: (t, (. elt) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: (t, (. elt, int) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: (t, (. elt) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: (t, (. elt, int) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: (t, (. elt) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: (t, (. elt, int) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: (t, (. elt) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: (t, (. elt, int) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint8ClampedArray.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.TypedArray2.Int16Array",
      "name": "Int16Array",
      "kind": "module",
      "items": [
      {
        "id": "Js.TypedArray2.Int16Array.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = int",
        "docstrings": [""]
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (t, array<elt>) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (t, array<elt>, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (t, ~to_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (t, ~to_: int, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (t, ~to_: int, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (t, elt) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (t, elt, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (t, elt, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: (t, (. elt, elt) => int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (t, elt) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (t, string) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: (t, (. elt) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: (t, (. elt, int) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: (t, (. elt) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: (t, (. elt, int) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: (t, (. elt) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: (t, (. elt, int) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: (t, (. elt) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: (t, (. elt, int) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: (t, (. elt) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: (t, (. elt, int) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int16Array.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.TypedArray2.Uint16Array",
      "name": "Uint16Array",
      "kind": "module",
      "items": [
      {
        "id": "Js.TypedArray2.Uint16Array.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = int",
        "docstrings": [""]
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (t, array<elt>) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (t, array<elt>, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (t, ~to_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (t, ~to_: int, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (t, ~to_: int, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (t, elt) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (t, elt, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (t, elt, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: (t, (. elt, elt) => int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (t, elt) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (t, string) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: (t, (. elt) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: (t, (. elt, int) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: (t, (. elt) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: (t, (. elt, int) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: (t, (. elt) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: (t, (. elt, int) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: (t, (. elt) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: (t, (. elt, int) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: (t, (. elt) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: (t, (. elt, int) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint16Array.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.TypedArray2.Int32Array",
      "name": "Int32Array",
      "kind": "module",
      "items": [
      {
        "id": "Js.TypedArray2.Int32Array.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = int",
        "docstrings": [""]
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (t, array<elt>) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (t, array<elt>, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (t, ~to_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (t, ~to_: int, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (t, ~to_: int, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (t, elt) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (t, elt, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (t, elt, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: (t, (. elt, elt) => int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (t, elt) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (t, string) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: (t, (. elt) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: (t, (. elt, int) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: (t, (. elt) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: (t, (. elt, int) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: (t, (. elt) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: (t, (. elt, int) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: (t, (. elt) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: (t, (. elt, int) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: (t, (. elt) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: (t, (. elt, int) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Int32Array.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.TypedArray2.Uint32Array",
      "name": "Uint32Array",
      "kind": "module",
      "items": [
      {
        "id": "Js.TypedArray2.Uint32Array.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = int",
        "docstrings": [""]
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (t, array<elt>) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (t, array<elt>, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (t, ~to_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (t, ~to_: int, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (t, ~to_: int, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (t, elt) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (t, elt, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (t, elt, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: (t, (. elt, elt) => int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (t, elt) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (t, string) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: (t, (. elt) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: (t, (. elt, int) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: (t, (. elt) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: (t, (. elt, int) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: (t, (. elt) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: (t, (. elt, int) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: (t, (. elt) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: (t, (. elt, int) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: (t, (. elt) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: (t, (. elt, int) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Uint32Array.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.TypedArray2.Float32Array",
      "name": "Float32Array",
      "kind": "module",
      "items": [
      {
        "id": "Js.TypedArray2.Float32Array.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = float",
        "docstrings": [""]
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (t, array<elt>) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (t, array<elt>, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (t, ~to_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (t, ~to_: int, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (t, ~to_: int, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (t, elt) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (t, elt, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (t, elt, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: (t, (. elt, elt) => int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (t, elt) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (t, string) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: (t, (. elt) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: (t, (. elt, int) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: (t, (. elt) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: (t, (. elt, int) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: (t, (. elt) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: (t, (. elt, int) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: (t, (. elt) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: (t, (. elt, int) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: (t, (. elt) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: (t, (. elt, int) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float32Array.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.TypedArray2.Float64Array",
      "name": "Float64Array",
      "kind": "module",
      "items": [
      {
        "id": "Js.TypedArray2.Float64Array.elt",
        "kind": "type",
        "name": "elt",
        "signature": "type elt = float",
        "docstrings": [""]
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.typed_array",
        "kind": "type",
        "name": "typed_array",
        "signature": "type typed_array<'a>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.t",
        "kind": "type",
        "name": "t",
        "signature": "type t = typed_array<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "signature": "let unsafe_get: (t, int) => elt",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.unsafe_set",
        "kind": "value",
        "name": "unsafe_set",
        "signature": "let unsafe_set: (t, int, elt) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.setArray",
        "kind": "value",
        "name": "setArray",
        "signature": "let setArray: (t, array<elt>) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.setArrayOffset",
        "kind": "value",
        "name": "setArrayOffset",
        "signature": "let setArrayOffset: (t, array<elt>, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.length",
        "kind": "value",
        "name": "length",
        "signature": "let length: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "signature": "let copyWithin: (t, ~to_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.copyWithinFrom",
        "kind": "value",
        "name": "copyWithinFrom",
        "signature": "let copyWithinFrom: (t, ~to_: int, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.copyWithinFromRange",
        "kind": "value",
        "name": "copyWithinFromRange",
        "signature": "let copyWithinFromRange: (t, ~to_: int, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.fillInPlace",
        "kind": "value",
        "name": "fillInPlace",
        "signature": "let fillInPlace: (t, elt) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.fillFromInPlace",
        "kind": "value",
        "name": "fillFromInPlace",
        "signature": "let fillFromInPlace: (t, elt, ~from: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.fillRangeInPlace",
        "kind": "value",
        "name": "fillRangeInPlace",
        "signature": "let fillRangeInPlace: (t, elt, ~start: int, ~end_: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.reverseInPlace",
        "kind": "value",
        "name": "reverseInPlace",
        "signature": "let reverseInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.sortInPlace",
        "kind": "value",
        "name": "sortInPlace",
        "signature": "let sortInPlace: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.sortInPlaceWith",
        "kind": "value",
        "name": "sortInPlaceWith",
        "signature": "let sortInPlaceWith: (t, (. elt, elt) => int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.includes",
        "kind": "value",
        "name": "includes",
        "signature": "let includes: (t, elt) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "signature": "let indexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "signature": "let indexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.join",
        "kind": "value",
        "name": "join",
        "signature": "let join: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "signature": "let joinWith: (t, string) => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "signature": "let lastIndexOf: (t, elt) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "signature": "let lastIndexOfFrom: (t, elt, ~from: int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.slice",
        "kind": "value",
        "name": "slice",
        "signature": "let slice: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.copy",
        "kind": "value",
        "name": "copy",
        "signature": "let copy: t => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.sliceFrom",
        "kind": "value",
        "name": "sliceFrom",
        "signature": "let sliceFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.subarray",
        "kind": "value",
        "name": "subarray",
        "signature": "let subarray: (t, ~start: int, ~end_: int) => t",
        "docstrings": ["`start` is inclusive, `end_` exclusive"]
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.subarrayFrom",
        "kind": "value",
        "name": "subarrayFrom",
        "signature": "let subarrayFrom: (t, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.toString",
        "kind": "value",
        "name": "toString",
        "signature": "let toString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "signature": "let toLocaleString: t => string",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.every",
        "kind": "value",
        "name": "every",
        "signature": "let every: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.everyi",
        "kind": "value",
        "name": "everyi",
        "signature": "let everyi: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.filter",
        "kind": "value",
        "name": "filter",
        "signature": "let filter: (t, (. elt) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.filteri",
        "kind": "value",
        "name": "filteri",
        "signature": "let filteri: (t, (. elt, int) => bool) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.find",
        "kind": "value",
        "name": "find",
        "signature": "let find: (t, (. elt) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.findi",
        "kind": "value",
        "name": "findi",
        "signature": "let findi: (t, (. elt, int) => bool) => Js.undefined<elt>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "signature": "let findIndex: (t, (. elt) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.findIndexi",
        "kind": "value",
        "name": "findIndexi",
        "signature": "let findIndexi: (t, (. elt, int) => bool) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.forEach",
        "kind": "value",
        "name": "forEach",
        "signature": "let forEach: (t, (. elt) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.forEachi",
        "kind": "value",
        "name": "forEachi",
        "signature": "let forEachi: (t, (. elt, int) => unit) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.map",
        "kind": "value",
        "name": "map",
        "signature": "let map: (t, (. elt) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.mapi",
        "kind": "value",
        "name": "mapi",
        "signature": "let mapi: (t, (. elt, int) => 'b) => typed_array<'b>",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.reduce",
        "kind": "value",
        "name": "reduce",
        "signature": "let reduce: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.reducei",
        "kind": "value",
        "name": "reducei",
        "signature": "let reducei: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "signature": "let reduceRight: (t, (. 'b, elt) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.reduceRighti",
        "kind": "value",
        "name": "reduceRighti",
        "signature": "let reduceRighti: (t, (. 'b, elt, int) => 'b, 'b) => 'b",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.some",
        "kind": "value",
        "name": "some",
        "signature": "let some: (t, (. elt) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.somei",
        "kind": "value",
        "name": "somei",
        "signature": "let somei: (t, (. elt, int) => bool) => bool",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array._BYTES_PER_ELEMENT",
        "kind": "value",
        "name": "_BYTES_PER_ELEMENT",
        "signature": "let _BYTES_PER_ELEMENT: int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array<elt> => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": ["can throw"]
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": ["**raise** Js.Exn.Error raise Js exception\n\n    **param** offset is in bytes"]
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": ["**raise** Js.Exn.Error raises Js exception\n\n    **param** offset is in bytes, length in elements"]
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "signature": "let fromLength: int => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.Float64Array.from",
        "kind": "value",
        "name": "from",
        "signature": "let from: array_like<elt> => t",
        "docstrings": []
      }]
    }, 
    {
      "id": "Js.TypedArray2.DataView",
      "name": "DataView",
      "kind": "module",
      "items": [
      {
        "id": "Js.TypedArray2.DataView.t",
        "kind": "type",
        "name": "t",
        "signature": "type t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.make",
        "kind": "value",
        "name": "make",
        "signature": "let make: array_buffer => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "signature": "let fromBuffer: array_buffer => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.fromBufferOffset",
        "kind": "value",
        "name": "fromBufferOffset",
        "signature": "let fromBufferOffset: (array_buffer, int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.fromBufferRange",
        "kind": "value",
        "name": "fromBufferRange",
        "signature": "let fromBufferRange: (array_buffer, ~offset: int, ~length: int) => t",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.buffer",
        "kind": "value",
        "name": "buffer",
        "signature": "let buffer: t => array_buffer",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.byteLength",
        "kind": "value",
        "name": "byteLength",
        "signature": "let byteLength: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "signature": "let byteOffset: t => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.getInt8",
        "kind": "value",
        "name": "getInt8",
        "signature": "let getInt8: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.getUint8",
        "kind": "value",
        "name": "getUint8",
        "signature": "let getUint8: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.getInt16",
        "kind": "value",
        "name": "getInt16",
        "signature": "let getInt16: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.getInt16LittleEndian",
        "kind": "value",
        "name": "getInt16LittleEndian",
        "signature": "let getInt16LittleEndian: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.getUint16",
        "kind": "value",
        "name": "getUint16",
        "signature": "let getUint16: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.getUint16LittleEndian",
        "kind": "value",
        "name": "getUint16LittleEndian",
        "signature": "let getUint16LittleEndian: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.getInt32",
        "kind": "value",
        "name": "getInt32",
        "signature": "let getInt32: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.getInt32LittleEndian",
        "kind": "value",
        "name": "getInt32LittleEndian",
        "signature": "let getInt32LittleEndian: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.getUint32",
        "kind": "value",
        "name": "getUint32",
        "signature": "let getUint32: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.getUint32LittleEndian",
        "kind": "value",
        "name": "getUint32LittleEndian",
        "signature": "let getUint32LittleEndian: (t, int) => int",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.getFloat32",
        "kind": "value",
        "name": "getFloat32",
        "signature": "let getFloat32: (t, int) => float",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.getFloat32LittleEndian",
        "kind": "value",
        "name": "getFloat32LittleEndian",
        "signature": "let getFloat32LittleEndian: (t, int) => float",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.getFloat64",
        "kind": "value",
        "name": "getFloat64",
        "signature": "let getFloat64: (t, int) => float",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.getFloat64LittleEndian",
        "kind": "value",
        "name": "getFloat64LittleEndian",
        "signature": "let getFloat64LittleEndian: (t, int) => float",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.setInt8",
        "kind": "value",
        "name": "setInt8",
        "signature": "let setInt8: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.setUint8",
        "kind": "value",
        "name": "setUint8",
        "signature": "let setUint8: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.setInt16",
        "kind": "value",
        "name": "setInt16",
        "signature": "let setInt16: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.setInt16LittleEndian",
        "kind": "value",
        "name": "setInt16LittleEndian",
        "signature": "let setInt16LittleEndian: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.setUint16",
        "kind": "value",
        "name": "setUint16",
        "signature": "let setUint16: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.setUint16LittleEndian",
        "kind": "value",
        "name": "setUint16LittleEndian",
        "signature": "let setUint16LittleEndian: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.setInt32",
        "kind": "value",
        "name": "setInt32",
        "signature": "let setInt32: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.setInt32LittleEndian",
        "kind": "value",
        "name": "setInt32LittleEndian",
        "signature": "let setInt32LittleEndian: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.setUint32",
        "kind": "value",
        "name": "setUint32",
        "signature": "let setUint32: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.setUint32LittleEndian",
        "kind": "value",
        "name": "setUint32LittleEndian",
        "signature": "let setUint32LittleEndian: (t, int, int) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.setFloat32",
        "kind": "value",
        "name": "setFloat32",
        "signature": "let setFloat32: (t, int, float) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.setFloat32LittleEndian",
        "kind": "value",
        "name": "setFloat32LittleEndian",
        "signature": "let setFloat32LittleEndian: (t, int, float) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.setFloat64",
        "kind": "value",
        "name": "setFloat64",
        "signature": "let setFloat64: (t, int, float) => unit",
        "docstrings": []
      }, 
      {
        "id": "Js.TypedArray2.DataView.setFloat64LittleEndian",
        "kind": "value",
        "name": "setFloat64LittleEndian",
        "signature": "let setFloat64LittleEndian: (t, int, float) => unit",
        "docstrings": []
      }]
    }]
  }, 
  {
    "id": "Js.Types",
    "kind": "moduleAlias",
    "name": "Types",
    "docstrings": ["Provide utilities for manipulating JS types"],
    "items": [
    {
      "id": "Js.Types.symbol",
      "kind": "type",
      "name": "symbol",
      "signature": "type symbol",
      "docstrings": ["Js symbol type (only available in ES6)"]
    }, 
    {
      "id": "Js.Types.bigint_val",
      "kind": "type",
      "name": "bigint_val",
      "signature": "type bigint_val",
      "docstrings": ["Js bigint type only available in ES2020"]
    }, 
    {
      "id": "Js.Types.obj_val",
      "kind": "type",
      "name": "obj_val",
      "signature": "type obj_val",
      "docstrings": []
    }, 
    {
      "id": "Js.Types.undefined_val",
      "kind": "type",
      "name": "undefined_val",
      "signature": "type undefined_val",
      "docstrings": ["This type has only one value `undefined`"]
    }, 
    {
      "id": "Js.Types.null_val",
      "kind": "type",
      "name": "null_val",
      "signature": "type null_val",
      "docstrings": ["This type has only one value `null`"]
    }, 
    {
      "id": "Js.Types.function_val",
      "kind": "type",
      "name": "function_val",
      "signature": "type function_val",
      "docstrings": []
    }, 
    {
      "id": "Js.Types.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<_> =\\n  | Undefined: t<undefined_val>\\n  | Null: t<null_val>\\n  | Boolean: t<bool>\\n  | Number: t<float>\\n  | String: t<string>\\n  | Function: t<function_val>\\n  | Object: t<obj_val>\\n  | Symbol: t<symbol>\\n  | BigInt: t<bigint_val>",
      "docstrings": [],
      "detail": 
      {
        "kind": "variant",
        "items": [
        {
          "name": "Undefined",
          "docstrings": [],
          "signature": "Undefined\nt<undefined_val>"
        }, 
        {
          "name": "Null",
          "docstrings": [],
          "signature": "Null\nt<null_val>"
        }, 
        {
          "name": "Boolean",
          "docstrings": [],
          "signature": "Boolean\nt<bool>"
        }, 
        {
          "name": "Number",
          "docstrings": [],
          "signature": "Number\nt<float>"
        }, 
        {
          "name": "String",
          "docstrings": [],
          "signature": "String\nt<string>"
        }, 
        {
          "name": "Function",
          "docstrings": [],
          "signature": "Function\nt<function_val>"
        }, 
        {
          "name": "Object",
          "docstrings": [],
          "signature": "Object\nt<obj_val>"
        }, 
        {
          "name": "Symbol",
          "docstrings": [],
          "signature": "Symbol\nt<symbol>"
        }, 
        {
          "name": "BigInt",
          "docstrings": [],
          "signature": "BigInt\nt<bigint_val>"
        }]
      }
    }, 
    {
      "id": "Js.Types.test",
      "kind": "value",
      "name": "test",
      "signature": "let test: ('a, t<'b>) => bool",
      "docstrings": ["`test(value, t)` returns `true` if `value` is `typeof t`, otherwise `false`.\n   This is useful for doing runtime reflection on any given value.\n\n   ```rescript\n   test(\"test\", String) == true\n   test(() => true, Function) == true\n   test(\"test\", Boolean) == false\n   ```"]
    }, 
    {
      "id": "Js.Types.tagged_t",
      "kind": "type",
      "name": "tagged_t",
      "signature": "type tagged_t =\\n  | JSFalse\\n  | JSTrue\\n  | JSNull\\n  | JSUndefined\\n  | JSNumber(float)\\n  | JSString(string)\\n  | JSFunction(function_val)\\n  | JSObject(obj_val)\\n  | JSSymbol(symbol)\\n  | JSBigInt(bigint_val)",
      "docstrings": [],
      "detail": 
      {
        "kind": "variant",
        "items": [
        {
          "name": "JSFalse",
          "docstrings": [],
          "signature": "JSFalse"
        }, 
        {
          "name": "JSTrue",
          "docstrings": [],
          "signature": "JSTrue"
        }, 
        {
          "name": "JSNull",
          "docstrings": [],
          "signature": "JSNull"
        }, 
        {
          "name": "JSUndefined",
          "docstrings": [],
          "signature": "JSUndefined"
        }, 
        {
          "name": "JSNumber",
          "docstrings": [],
          "signature": "JSNumber(float)"
        }, 
        {
          "name": "JSString",
          "docstrings": [],
          "signature": "JSString(string)"
        }, 
        {
          "name": "JSFunction",
          "docstrings": [],
          "signature": "JSFunction(function_val)"
        }, 
        {
          "name": "JSObject",
          "docstrings": [],
          "signature": "JSObject(obj_val)"
        }, 
        {
          "name": "JSSymbol",
          "docstrings": [],
          "signature": "JSSymbol(symbol)"
        }, 
        {
          "name": "JSBigInt",
          "docstrings": [],
          "signature": "JSBigInt(bigint_val)"
        }]
      }
    }, 
    {
      "id": "Js.Types.classify",
      "kind": "value",
      "name": "classify",
      "signature": "let classify: 'a => tagged_t",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Float",
    "kind": "moduleAlias",
    "name": "Float",
    "docstrings": ["Provide utilities for JS float"],
    "items": [
    {
      "id": "Js.Float._NaN",
      "kind": "value",
      "name": "_NaN",
      "signature": "let _NaN: float",
      "docstrings": ["The special value \"Not a Number\"\n\n  **See:** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN)"]
    }, 
    {
      "id": "Js.Float.isNaN",
      "kind": "value",
      "name": "isNaN",
      "signature": "let isNaN: float => bool",
      "docstrings": ["Tests if the given value is `_NaN`\n\n  Note that both `_NaN = _NaN` and `_NaN == _NaN` will return `false`. `isNaN` is\n  therefore necessary to test for `_NaN`.\n\n  **return** `true` if the given value is `_NaN`, `false` otherwise\n\n  **see** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN)"]
    }, 
    {
      "id": "Js.Float.isFinite",
      "kind": "value",
      "name": "isFinite",
      "signature": "let isFinite: float => bool",
      "docstrings": ["Tests if the given value is finite\n\n  **return** `true` if the given value is a finite number, `false` otherwise\n\n  ```rescript\n  /* returns [false] */\n  Js.Float.isFinite(infinity)\n\n  /* returns [false] */\n  Js.Float.isFinite(neg_infinity)\n\n  /* returns [false] */\n  Js.Float.isFinite(Js.Float._NaN)\n\n  /* returns [true] */\n  Js.Float.isFinite(1234.)\n  ```\n\n  **see** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite)"]
    }, 
    {
      "id": "Js.Float.toExponential",
      "kind": "value",
      "name": "toExponential",
      "signature": "let toExponential: float => string",
      "docstrings": ["Formats a `float` using exponential (scientific) notation\n\n  **return** a `string` representing the given value in exponential notation\n\n  **raise** RangeError if digits is not in the range [0, 20] (inclusive)\n\n  ```rescript\n  /* prints \"7.71234e+1\" */\n  Js.Float.toExponential(77.1234)->Js.log\n\n  /* prints \"7.7e+1\" */\n  Js.Float.toExponential(77.)->Js.log\n  ```\n\n  **See** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential)"]
    }, 
    {
      "id": "Js.Float.toExponentialWithPrecision",
      "kind": "value",
      "name": "toExponentialWithPrecision",
      "signature": "let toExponentialWithPrecision: (float, ~digits: int) => string",
      "docstrings": ["Formats a `float` using exponential (scientific) notation\n\n  **digits** specifies how many digits should appear after the decimal point. The\n  value must be in the range [0, 20] (inclusive).\n\n  **return** a `string` representing the given value in exponential notation\n\n  The output will be rounded or padded with zeroes if necessary.\n\n  **raise** RangeError if digits is not in the range [0, 20] (inclusive)\n\n  ```rescript\n  /* prints \"7.71e+1\" */\n  Js.Float.toExponentialWithPrecision(77.1234, ~digits=2)->Js.log\n  ```\n\n  **see** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential)"]
    }, 
    {
      "id": "Js.Float.toFixed",
      "kind": "value",
      "name": "toFixed",
      "signature": "let toFixed: float => string",
      "docstrings": ["Formats a `float` using fixed point notation\n\n  **return** a `string` representing the given value in fixed-point notation (usually)\n\n  **raise** RangeError if digits is not in the range [0, 20] (inclusive)\n\n  ```rescript\n  /* prints \"12346\" (note the rounding) */\n  Js.Float.toFixed(12345.6789)->Js.log\n\n  /* print \"1.2e+21\" */\n  Js.Float.toFixed(1.2e21)->Js.log\n  ```\n\n  **See** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed)"]
    }, 
    {
      "id": "Js.Float.toFixedWithPrecision",
      "kind": "value",
      "name": "toFixedWithPrecision",
      "signature": "let toFixedWithPrecision: (float, ~digits: int) => string",
      "docstrings": ["Formats a `float` using fixed point notation\n\n  **digits** specifies how many digits should appear after the decimal point. The\n  value must be in the range [0, 20] (inclusive). Defaults to `0`.\n\n  **return** a `string` representing the given value in fixed-point notation (usually)\n\n  The output will be rounded or padded with zeroes if necessary.\n\n  **raise** RangeError if digits is not in the range [0, 20] (inclusive)\n\n  ```rescript\n  /* prints \"12345.7\" (note the rounding) */\n  Js.Float.toFixedWithPrecision(12345.6789, ~digits=1)->Js.log\n\n  /* prints \"0.00\" (note the added zeroes) */\n  Js.Float.toFixedWithPrecision(0., ~digits=2)->Js.log\n  ```\n\n  **See** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed)"]
    }, 
    {
      "id": "Js.Float.toPrecision",
      "kind": "value",
      "name": "toPrecision",
      "signature": "let toPrecision: float => string",
      "docstrings": ["Formats a `float` using some fairly arbitrary rules\n\n  **return** a `string` representing the given value in fixed-point (usually)\n\n  `toPrecision` differs from `toFixed` in that the former will format the number\n  with full precision, while the latter will not output any digits after the\n  decimal point.\n\n  **raise** RangeError if digits is not in the range accepted by this function (what do you mean \"vague\"?)\n\n  ```rescript\n  /* prints \"12345.6789\" */\n  Js.Float.toPrecision(12345.6789)->Js.log\n\n  /* print \"1.2e+21\" */\n  Js.Float.toPrecision(1.2e21)->Js.log\n  ```\n\n  **See** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision)"]
    }, 
    {
      "id": "Js.Float.toPrecisionWithPrecision",
      "kind": "value",
      "name": "toPrecisionWithPrecision",
      "signature": "let toPrecisionWithPrecision: (float, ~digits: int) => string",
      "docstrings": ["Formats a `float` using some fairly arbitrary rules\n\n  **digits** specifies how many digits should appear in total. The\n  value must between 0 and some arbitrary number that's hopefully at least larger\n  than 20 (for Node it's 21. Why? Who knows).\n\n  **return** a `string` representing the given value in fixed-point or scientific notation\n\n  The output will be rounded or padded with zeroes if necessary.\n\n  `toPrecisionWithPrecision` differs from `toFixedWithPrecision` in that the former\n  will count all digits against the precision, while the latter will count only\n  the digits after the decimal point. `toPrecisionWithPrecision` will also use\n  scientific notation if the specified precision is less than the number for digits\n  before the decimal point.\n\n  **raise** RangeError if digits is not in the range accepted by this function (what do you mean \"vague\"?)\n\n  ```rescript\n  /* prints \"1e+4\" */\n  Js.Float.toPrecisionWithPrecision(12345.6789, ~digits=1)->Js.log\n\n  /* prints \"0.0\" */\n  Js.Float.toPrecisionWithPrecision(0., ~digits=2)->Js.log\n  ```\n\n  **See** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision)"]
    }, 
    {
      "id": "Js.Float.toString",
      "kind": "value",
      "name": "toString",
      "signature": "let toString: float => string",
      "docstrings": ["Formats a `float` as a string\n\n  **return** a `string` representing the given value in fixed-point (usually)\n\n  ```rescript\n  /* prints \"12345.6789\" */\n  Js.Float.toString(12345.6789)->Js.log\n  ```\n\n  **See** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString)"]
    }, 
    {
      "id": "Js.Float.toStringWithRadix",
      "kind": "value",
      "name": "toStringWithRadix",
      "signature": "let toStringWithRadix: (float, ~radix: int) => string",
      "docstrings": ["Formats a `float` as a string\n\n  **radix** specifies the radix base to use for the formatted number. The\n  value must be in the range [2, 36] (inclusive).\n\n  **return** a `string` representing the given value in fixed-point (usually)\n\n  **raise** RangeError if radix is not in the range [2, 36] (inclusive)\n\n  ```rescript\n  /* prints \"110\" */\n  Js.Float.toStringWithRadix(6., ~radix=2)->Js.log\n\n  /* prints \"11.001000111101011100001010001111010111000010100011111\" */\n  Js.Float.toStringWithRadix(3.14, ~radix=2)->Js.log\n\n  /* prints \"deadbeef\" */\n  Js.Float.toStringWithRadix(3735928559., ~radix=16)->Js.log\n\n  /* prints \"3f.gez4w97ry0a18ymf6qadcxr\" */\n  Js.Float.toStringWithRadix(123.456, ~radix=36)->Js.log\n  ```\n\n  **See** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString)"]
    }, 
    {
      "id": "Js.Float.fromString",
      "kind": "value",
      "name": "fromString",
      "signature": "let fromString: string => float",
      "docstrings": ["Parses the given `string` into a `float` using JavaScript semantics\n\n  **return** the number as a `float` if successfully parsed, `_NaN` otherwise.\n\n  ```rescript\n  /* returns 123 */\n  Js.Float.fromString(\"123\")\n\n  /* returns 12.3 */\n  Js.Float.fromString(\"12.3\")\n\n  /* returns 0 */\n  Js.Float.fromString(\"\")\n\n  /* returns 17 */\n  Js.Float.fromString(\"0x11\")\n\n  /* returns 3 */\n  Js.Float.fromString(\"0b11\")\n\n  /* returns 9 */\n  Js.Float.fromString(\"0o11\")\n\n  /* returns [_NaN] */\n  Js.Float.fromString(\"hello\")\n\n  /* returns [_NaN] */\n  Js.Float.fromString(\"100a\")\n  ```"]
    }]
  }, 
  {
    "id": "Js.Int",
    "kind": "moduleAlias",
    "name": "Int",
    "docstrings": ["Provide utilities for int"],
    "items": [
    {
      "id": "Js.Int.toExponential",
      "kind": "value",
      "name": "toExponential",
      "signature": "let toExponential: int => string",
      "docstrings": ["Formats an `int` using exponential (scientific) notation.\nReturns a `string` representing the given value in exponential notation.\nRaises `RangeError` if digits is not in the range \\[0, 20\\] (inclusive).\n\n**see** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential)\n\n```rescript\n/* prints \"7.7e+1\" */\nJs.log(Js.Int.toExponential(77))\n```"]
    }, 
    {
      "id": "Js.Int.toExponentialWithPrecision",
      "kind": "value",
      "name": "toExponentialWithPrecision",
      "signature": "let toExponentialWithPrecision: (int, ~digits: int) => string",
      "docstrings": ["Formats an `int` using exponential (scientific) notation.\n`digits` specifies how many digits should appear after the decimal point. The value must be in the range \\[0, 20\\] (inclusive).\n\nReturns a `string` representing the given value in exponential notation.\n\nThe output will be rounded or padded with zeroes if necessary.\nRaises `RangeError` if `digits` is not in the range \\[0, 20\\] (inclusive).\n\n**see** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential)\n\n```rescript\n/* prints \"7.70e+1\" */\nJs.log(Js.Int.toExponentialWithPrecision(77, ~digits=2))\n\n/* prints \"5.68e+3\" */\nJs.log(Js.Int.toExponentialWithPrecision(5678, ~digits=2))\n```"]
    }, 
    {
      "id": "Js.Int.toPrecision",
      "kind": "value",
      "name": "toPrecision",
      "signature": "let toPrecision: int => string",
      "docstrings": ["Formats an `int` using some fairly arbitrary rules.\nReturns a `string` representing the given value in fixed-point (usually).\n\n`toPrecision` differs from `toFixed` in that the former will format the number with full precision, while the latter will not output any digits after the decimal point.\nRaises `RangeError` if `digits` is not in the range accepted by this function.\n\n**See** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision)\n\n```rescript\n/* prints \"123456789\" */\nJs.log(Js.Int.toPrecision(123456789))\n```"]
    }, 
    {
      "id": "Js.Int.toPrecisionWithPrecision",
      "kind": "value",
      "name": "toPrecisionWithPrecision",
      "signature": "let toPrecisionWithPrecision: (int, ~digits: int) => string",
      "docstrings": ["Formats an `int` using some fairly arbitrary rules.\n`digits` specifies how many digits should appear in total. The value must between 0 and some arbitrary number that's hopefully at least larger than 20 (for Node it's 21. Why? Who knows).\n\nReturns a `string` representing the given value in fixed-point or scientific notation.\n\nThe output will be rounded or padded with zeroes if necessary.\n\n`toPrecisionWithPrecision` differs from `toFixedWithPrecision` in that the former will count all digits against the precision, while the latter will count only the digits after the decimal point.\n`toPrecisionWithPrecision` will also use scientific notation if the specified precision is less than the number of digits before the decimal point.\nRaises `RangeError` if `digits` is not in the range accepted by this function.\n\n\n**See** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision)\n\n```rescript\n/* prints \"1.2e+8\" */\nJs.log(Js.Int.toPrecisionWithPrecision(123456789, ~digits=2))\n\n/* prints \"0.0\" */\nJs.log(Js.Int.toPrecisionWithPrecision(0, ~digits=2))\n```"]
    }, 
    {
      "id": "Js.Int.toString",
      "kind": "value",
      "name": "toString",
      "signature": "let toString: int => string",
      "docstrings": ["Formats an `int` as a `string`. Returns a `string` representing the given value\nin fixed-point (usually).\n\n**See** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString)\n\n```rescript\n/* prints \"123456789\" */\nJs.log(Js.Int.toString(123456789))\n```"]
    }, 
    {
      "id": "Js.Int.toStringWithRadix",
      "kind": "value",
      "name": "toStringWithRadix",
      "signature": "let toStringWithRadix: (int, ~radix: int) => string",
      "docstrings": ["Formats an `int` as a `string`. `radix` specifies the radix base to use for the\nformatted number. The value must be in the range \\[2, 36\\] (inclusive). Returns\na `string` representing the given value in fixed-point (usually). Raises\n`RangeError` if `radix` is not in the range \\[2, 36\\] (inclusive).\n\n\n**See** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString)\n\n```rescript\n/* prints \"110\" */\nJs.log(Js.Int.toStringWithRadix(6, ~radix=2))\n\n/* prints \"deadbeef\" */\nJs.log(Js.Int.toStringWithRadix(3735928559, ~radix=16))\n\n/* prints \"2n9c\" */\nJs.log(Js.Int.toStringWithRadix(123456, ~radix=36))\n```"]
    }, 
    {
      "id": "Js.Int.toFloat",
      "kind": "value",
      "name": "toFloat",
      "signature": "let toFloat: int => float",
      "docstrings": []
    }, 
    {
      "id": "Js.Int.equal",
      "kind": "value",
      "name": "equal",
      "signature": "let equal: (int, int) => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.Int.max",
      "kind": "value",
      "name": "max",
      "signature": "let max: int",
      "docstrings": []
    }, 
    {
      "id": "Js.Int.min",
      "kind": "value",
      "name": "min",
      "signature": "let min: int",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Bigint",
    "kind": "moduleAlias",
    "name": "Bigint",
    "docstrings": ["Provide utilities for bigint"],
    "items": [
    {
      "id": "Js.Bigint.t",
      "kind": "type",
      "name": "t",
      "signature": "type t",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.File",
    "kind": "moduleAlias",
    "name": "File",
    "docstrings": ["Provide utilities for File"],
    "items": [
    {
      "id": "Js.File.t",
      "kind": "type",
      "name": "t",
      "signature": "type t",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Blob",
    "kind": "moduleAlias",
    "name": "Blob",
    "docstrings": ["Provide utilities for Blob"],
    "items": [
    {
      "id": "Js.Blob.t",
      "kind": "type",
      "name": "t",
      "signature": "type t",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Option",
    "kind": "moduleAlias",
    "name": "Option",
    "docstrings": ["Provide utilities for option"],
    "items": [
    {
      "id": "Js.Option.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a> = option<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Option.some",
      "kind": "value",
      "name": "some",
      "signature": "let some: 'a => option<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Option.isSome",
      "kind": "value",
      "name": "isSome",
      "signature": "let isSome: option<'a> => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.Option.isSomeValue",
      "kind": "value",
      "name": "isSomeValue",
      "signature": "let isSomeValue: ((. 'a, 'a) => bool, 'a, option<'a>) => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.Option.isNone",
      "kind": "value",
      "name": "isNone",
      "signature": "let isNone: option<'a> => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.Option.getExn",
      "kind": "value",
      "name": "getExn",
      "signature": "let getExn: option<'a> => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Option.equal",
      "kind": "value",
      "name": "equal",
      "signature": "let equal: ((. 'a, 'b) => bool, option<'a>, option<'b>) => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.Option.andThen",
      "kind": "value",
      "name": "andThen",
      "signature": "let andThen: ((. 'a) => option<'b>, option<'a>) => option<'b>",
      "docstrings": []
    }, 
    {
      "id": "Js.Option.map",
      "kind": "value",
      "name": "map",
      "signature": "let map: ((. 'a) => 'b, option<'a>) => option<'b>",
      "docstrings": []
    }, 
    {
      "id": "Js.Option.getWithDefault",
      "kind": "value",
      "name": "getWithDefault",
      "signature": "let getWithDefault: ('a, option<'a>) => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Option.default",
      "kind": "value",
      "name": "default",
      "deprecated": "Use `getWithDefault` instead since default has special meaning in ES module",
      "signature": "let default: ('a, option<'a>) => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Option.filter",
      "kind": "value",
      "name": "filter",
      "signature": "let filter: ((. 'a) => bool, option<'a>) => option<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Option.firstSome",
      "kind": "value",
      "name": "firstSome",
      "signature": "let firstSome: (option<'a>, option<'a>) => option<'a>",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Result",
    "kind": "moduleAlias",
    "name": "Result",
    "docstrings": ["Define the interface for result"],
    "items": [
    {
      "id": "Js.Result.t",
      "kind": "type",
      "name": "t",
      "deprecated": "Please use `Belt.Result.t` instead",
      "signature": "type t<'good, 'bad> = Ok('good) | Error('bad)",
      "docstrings": [],
      "detail": 
      {
        "kind": "variant",
        "items": [
        {
          "name": "Ok",
          "docstrings": [],
          "signature": "Ok('good)"
        }, 
        {
          "name": "Error",
          "docstrings": [],
          "signature": "Error('bad)"
        }]
      }
    }]
  }, 
  {
    "id": "Js.List",
    "kind": "moduleAlias",
    "name": "List",
    "docstrings": ["Provide utilities for list"],
    "items": [
    {
      "id": "Js.List.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a> = list<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.List.length",
      "kind": "value",
      "name": "length",
      "signature": "let length: t<'a> => int",
      "docstrings": []
    }, 
    {
      "id": "Js.List.cons",
      "kind": "value",
      "name": "cons",
      "signature": "let cons: ('a, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.List.isEmpty",
      "kind": "value",
      "name": "isEmpty",
      "signature": "let isEmpty: t<'a> => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.List.hd",
      "kind": "value",
      "name": "hd",
      "signature": "let hd: t<'a> => option<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.List.tl",
      "kind": "value",
      "name": "tl",
      "signature": "let tl: t<'a> => option<t<'a>>",
      "docstrings": []
    }, 
    {
      "id": "Js.List.nth",
      "kind": "value",
      "name": "nth",
      "signature": "let nth: (t<'a>, int) => option<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.List.revAppend",
      "kind": "value",
      "name": "revAppend",
      "signature": "let revAppend: (t<'a>, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.List.rev",
      "kind": "value",
      "name": "rev",
      "signature": "let rev: t<'a> => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.List.mapRev",
      "kind": "value",
      "name": "mapRev",
      "signature": "let mapRev: ((. 'a) => 'b, t<'a>) => t<'b>",
      "docstrings": []
    }, 
    {
      "id": "Js.List.map",
      "kind": "value",
      "name": "map",
      "signature": "let map: ((. 'a) => 'b, t<'a>) => t<'b>",
      "docstrings": []
    }, 
    {
      "id": "Js.List.iter",
      "kind": "value",
      "name": "iter",
      "signature": "let iter: ((. 'a) => unit, t<'a>) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.List.iteri",
      "kind": "value",
      "name": "iteri",
      "signature": "let iteri: ((. int, 'a) => unit, t<'a>) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.List.foldLeft",
      "kind": "value",
      "name": "foldLeft",
      "signature": "let foldLeft: ((. 'a, 'b) => 'a, 'a, list<'b>) => 'a",
      "docstrings": ["Application order is left to right, tail recurisve"]
    }, 
    {
      "id": "Js.List.foldRight",
      "kind": "value",
      "name": "foldRight",
      "signature": "let foldRight: ((. 'a, 'b) => 'b, list<'a>, 'b) => 'b",
      "docstrings": ["Application order is right to left\n    tail-recursive."]
    }, 
    {
      "id": "Js.List.flatten",
      "kind": "value",
      "name": "flatten",
      "signature": "let flatten: t<t<'a>> => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.List.filter",
      "kind": "value",
      "name": "filter",
      "signature": "let filter: ((. 'a) => bool, t<'a>) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.List.filterMap",
      "kind": "value",
      "name": "filterMap",
      "signature": "let filterMap: ((. 'a) => option<'b>, t<'a>) => t<'b>",
      "docstrings": []
    }, 
    {
      "id": "Js.List.countBy",
      "kind": "value",
      "name": "countBy",
      "signature": "let countBy: ((. 'a) => bool, list<'a>) => int",
      "docstrings": []
    }, 
    {
      "id": "Js.List.init",
      "kind": "value",
      "name": "init",
      "signature": "let init: (int, (. int) => 'a) => t<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.List.toVector",
      "kind": "value",
      "name": "toVector",
      "signature": "let toVector: t<'a> => array<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.List.equal",
      "kind": "value",
      "name": "equal",
      "signature": "let equal: ((. 'a, 'a) => bool, list<'a>, list<'a>) => bool",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Vector",
    "kind": "moduleAlias",
    "name": "Vector",
    "docstrings": ["Provides bindings for JS Vector"],
    "items": [
    {
      "id": "Js.Vector.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a> = array<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Vector.filterInPlace",
      "kind": "value",
      "name": "filterInPlace",
      "signature": "let filterInPlace: ((. 'a) => bool, t<'a>) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Vector.empty",
      "kind": "value",
      "name": "empty",
      "signature": "let empty: t<'a> => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Vector.pushBack",
      "kind": "value",
      "name": "pushBack",
      "signature": "let pushBack: ('a, t<'a>) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Vector.copy",
      "kind": "value",
      "name": "copy",
      "signature": "let copy: t<'a> => t<'a>",
      "docstrings": ["shallow copy"]
    }, 
    {
      "id": "Js.Vector.memByRef",
      "kind": "value",
      "name": "memByRef",
      "signature": "let memByRef: ('a, t<'a>) => bool",
      "docstrings": []
    }, 
    {
      "id": "Js.Vector.iter",
      "kind": "value",
      "name": "iter",
      "signature": "let iter: ((. 'a) => unit, t<'a>) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Vector.iteri",
      "kind": "value",
      "name": "iteri",
      "signature": "let iteri: ((. int, 'a) => unit, t<'a>) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Vector.toList",
      "kind": "value",
      "name": "toList",
      "signature": "let toList: t<'a> => list<'a>",
      "docstrings": []
    }, 
    {
      "id": "Js.Vector.map",
      "kind": "value",
      "name": "map",
      "signature": "let map: ((. 'a) => 'b, t<'a>) => t<'b>",
      "docstrings": []
    }, 
    {
      "id": "Js.Vector.mapi",
      "kind": "value",
      "name": "mapi",
      "signature": "let mapi: ((. int, 'a) => 'b, t<'a>) => t<'b>",
      "docstrings": []
    }, 
    {
      "id": "Js.Vector.foldLeft",
      "kind": "value",
      "name": "foldLeft",
      "signature": "let foldLeft: ((. 'a, 'b) => 'a, 'a, t<'b>) => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Vector.foldRight",
      "kind": "value",
      "name": "foldRight",
      "signature": "let foldRight: ((. 'b, 'a) => 'a, t<'b>, 'a) => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Vector.length",
      "kind": "value",
      "name": "length",
      "signature": "let length: t<'a> => int",
      "docstrings": ["Return the length (number of elements) of the given array."]
    }, 
    {
      "id": "Js.Vector.get",
      "kind": "value",
      "name": "get",
      "signature": "let get: (t<'a>, int) => 'a",
      "docstrings": ["`Vector.get(a, n)` returns the element number `n` of vector `a`. The first\nelement has number 0. The last element has number `Vector.length(a) - 1`. You\ncan also write `a[n]` instead of `Vector.get(a, n)`. Raise `Invalid_argument\n\"index out of bounds\"` if `n` is outside the range 0 to (`Array.length(a) -\n1`)."]
    }, 
    {
      "id": "Js.Vector.set",
      "kind": "value",
      "name": "set",
      "signature": "let set: (t<'a>, int, 'a) => unit",
      "docstrings": ["`Vector.set(a, n, x)` modifies vector `a` in place, replacing element number\n`n` with `x`. Raise `Invalid_argument \"index out of bounds\"` if `n` is outside\nthe range 0 to `Array.length(a) - 1`."]
    }, 
    {
      "id": "Js.Vector.make",
      "kind": "value",
      "name": "make",
      "signature": "let make: (int, 'a) => t<'a>",
      "docstrings": ["`Vector.make(n, x)` returns a fresh vector of length `n`, initialized with `x`.\nAll the elements of this new vector are initially physically equal to `x` (in\nthe sense of the `==` predicate). Consequently, if `x` is mutable, it is shared\namong all elements of the array, and modifying `x` through one of the array\nentries will modify all other entries at the same time. Raise\n`Invalid_argument` if `n < 0` or `n > Sys.max_array_length`. If the value of\n`x` is a floating-point number, then the maximum size is only\n`Sys.max_array_length / 2`."]
    }, 
    {
      "id": "Js.Vector.init",
      "kind": "value",
      "name": "init",
      "signature": "let init: (int, (. int) => 'a) => t<'a>",
      "docstrings": ["Raises `RangeError` when n is negative.\nn : size"]
    }, 
    {
      "id": "Js.Vector.append",
      "kind": "value",
      "name": "append",
      "signature": "let append: ('a, t<'a>) => t<'a>",
      "docstrings": ["`append(x, a)` returns a fresh vector with `x` appended to `a`."]
    }, 
    {
      "id": "Js.Vector.unsafe_get",
      "kind": "value",
      "name": "unsafe_get",
      "signature": "let unsafe_get: (t<'a>, int) => 'a",
      "docstrings": []
    }, 
    {
      "id": "Js.Vector.unsafe_set",
      "kind": "value",
      "name": "unsafe_set",
      "signature": "let unsafe_set: (t<'a>, int, 'a) => unit",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Console",
    "kind": "moduleAlias",
    "name": "Console",
    "docstrings": ["Provides bindings for console"],
    "items": [
    {
      "id": "Js.Console.log",
      "kind": "value",
      "name": "log",
      "signature": "let log: 'a => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.log2",
      "kind": "value",
      "name": "log2",
      "signature": "let log2: ('a, 'b) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.log3",
      "kind": "value",
      "name": "log3",
      "signature": "let log3: ('a, 'b, 'c) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.log4",
      "kind": "value",
      "name": "log4",
      "signature": "let log4: ('a, 'b, 'c, 'd) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.logMany",
      "kind": "value",
      "name": "logMany",
      "signature": "let logMany: array<'a> => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.info",
      "kind": "value",
      "name": "info",
      "signature": "let info: 'a => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.info2",
      "kind": "value",
      "name": "info2",
      "signature": "let info2: ('a, 'b) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.info3",
      "kind": "value",
      "name": "info3",
      "signature": "let info3: ('a, 'b, 'c) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.info4",
      "kind": "value",
      "name": "info4",
      "signature": "let info4: ('a, 'b, 'c, 'd) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.infoMany",
      "kind": "value",
      "name": "infoMany",
      "signature": "let infoMany: array<'a> => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.warn",
      "kind": "value",
      "name": "warn",
      "signature": "let warn: 'a => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.warn2",
      "kind": "value",
      "name": "warn2",
      "signature": "let warn2: ('a, 'b) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.warn3",
      "kind": "value",
      "name": "warn3",
      "signature": "let warn3: ('a, 'b, 'c) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.warn4",
      "kind": "value",
      "name": "warn4",
      "signature": "let warn4: ('a, 'b, 'c, 'd) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.warnMany",
      "kind": "value",
      "name": "warnMany",
      "signature": "let warnMany: array<'a> => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.error",
      "kind": "value",
      "name": "error",
      "signature": "let error: 'a => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.error2",
      "kind": "value",
      "name": "error2",
      "signature": "let error2: ('a, 'b) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.error3",
      "kind": "value",
      "name": "error3",
      "signature": "let error3: ('a, 'b, 'c) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.error4",
      "kind": "value",
      "name": "error4",
      "signature": "let error4: ('a, 'b, 'c, 'd) => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.errorMany",
      "kind": "value",
      "name": "errorMany",
      "signature": "let errorMany: array<'a> => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.trace",
      "kind": "value",
      "name": "trace",
      "signature": "let trace: unit => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.timeStart",
      "kind": "value",
      "name": "timeStart",
      "signature": "let timeStart: string => unit",
      "docstrings": []
    }, 
    {
      "id": "Js.Console.timeEnd",
      "kind": "value",
      "name": "timeEnd",
      "signature": "let timeEnd: string => unit",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Set",
    "kind": "moduleAlias",
    "name": "Set",
    "docstrings": ["Provides bindings for ES6 Set"],
    "items": [
    {
      "id": "Js.Set.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a>",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.WeakSet",
    "kind": "moduleAlias",
    "name": "WeakSet",
    "docstrings": ["Provides bindings for ES6 WeakSet"],
    "items": [
    {
      "id": "Js.WeakSet.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'a>",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.Map",
    "kind": "moduleAlias",
    "name": "Map",
    "docstrings": ["Provides bindings for ES6 Map"],
    "items": [
    {
      "id": "Js.Map.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'k, 'v>",
      "docstrings": []
    }]
  }, 
  {
    "id": "Js.WeakMap",
    "kind": "moduleAlias",
    "name": "WeakMap",
    "docstrings": ["Provides bindings for ES6 WeakMap"],
    "items": [
    {
      "id": "Js.WeakMap.t",
      "kind": "type",
      "name": "t",
      "signature": "type t<'k, 'v>",
      "docstrings": []
    }]
  }]
}